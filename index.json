[{"uri":"https://evelios.github.io/Math.Units/reference/math-units.html","title":"Math.Units","content":"Acceleration \nAngle \nAngularAcceleration \nAngularSpeed \nArea \nCapacitance \nCharge \nConstants \nCurrent \nDensity \nDuration \nEnergy \nFloat \nForce \nIlluminance \nInductance \nInterval \nLength \nLuminance \nLuminousFlux \nLuminousIntensity \nMass \nMolarity \nPixels \nPower \nPressure \nQuantity \nResistance \nSolidAngle \nSpeed \nSubstanceAmount \nTemperature \nVoltage \nVolume \nAcceleration \nAmperes \nAngle \nAngularAcceleration \nAngularSpeed \nArea \nCandelas \nCapacitance \nCelsiusDegrees \nCharge \nCoulombs \nCubed\u003C\u0027Units\u003E \nCubicMeters \nCurrent \nDensity \nDuration \nEnergy \nFarads \nFloat \nForce \nHenries \nIlluminance \nInductance \nInterval\u003C\u0027Units\u003E \nJoules \nKilograms \nKilogramsPerCubicMeter \nLength \nLumens \nLuminance \nLuminousFlux \nLuminousIntensity \nLux \nMass \nMeters \nMetersPerSecond \nMetersPerSecondSquared \nMolarity \nMoles \nMolesPerCubicMeter \nNewtons \nNits \nOhms \nPascals \nPercent \nPercentage \nPixel \nPixels \nPixelsPerSecond \nPixelsPerSecondSquared \nPower \nPressure \nProduct\u003C\u0027Unit1, \u0027Unit2\u003E \nQuantity\u003C\u0027Units\u003E \nRadians \nRadiansPerSecond \nRadiansPerSecondSquared \nRate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E \nResistance \nSeconds \nSolidAngle \nSpeed \nSquareMeters \nSquarePixels \nSquared\u003C\u0027Units\u003E \nSteradians \nSubstanceAmount \nTemperature \nTemperatureDelta \nUnitless \nVoltage \nVolts \nVolume \nWatts"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test.html","title":"Math.Units.Test","content":"Arb \nGen \nOperators \nTest \n\u0027a Positive \nTestDefines \nTestSpace \n\u0027a ZeroToOne"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html","title":"Acceleration","content":"Acceleration \n\n An \u003Ccode\u003EAcceleration\u003C/code\u003E represents an acceleration in meters per second squared,\n feet per second squared or\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/G-force#Unit_and_measurement\u0022\u003Egees\u003C/a\u003E.\n It is stored as a number of meters per second squared.\n  \nAcceleration.metersPerSecondSquared \nmetersPerSecondSquared \nAcceleration.inMetersPerSecondSquared \ninMetersPerSecondSquared \nAcceleration.feetPerSecondSquared \nfeetPerSecondSquared \nAcceleration.inFeetPerSecondSquared \ninFeetPerSecondSquared \nAcceleration.gees \ngees \nAcceleration.inGees \ninGees"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#metersPerSecondSquared","title":"Acceleration.metersPerSecondSquared","content":"Acceleration.metersPerSecondSquared \nmetersPerSecondSquared \n\n Construct an acceleration from a number of meters per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#inMetersPerSecondSquared","title":"Acceleration.inMetersPerSecondSquared","content":"Acceleration.inMetersPerSecondSquared \ninMetersPerSecondSquared \n\n Convert an acceleration to a number of meters per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#feetPerSecondSquared","title":"Acceleration.feetPerSecondSquared","content":"Acceleration.feetPerSecondSquared \nfeetPerSecondSquared \n\n Construct an acceleration from a number of feet per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#inFeetPerSecondSquared","title":"Acceleration.inFeetPerSecondSquared","content":"Acceleration.inFeetPerSecondSquared \ninFeetPerSecondSquared \n\n Convert an acceleration to a number of feet per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#gees","title":"Acceleration.gees","content":"Acceleration.gees \ngees \n\n Construct an acceleration from a number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/G-force#Unit_and_measurement\u0022\u003Egees\u003C/a\u003E.\n One gee is equal to 9.80665 meters per second squared (the\n standard acceleration due to gravity).\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#inGees","title":"Acceleration.inGees","content":"Acceleration.inGees \ninGees \n\n Convert an acceleration to a number of gees.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html","title":"Angle","content":"Angle \n\n An \u003Ccode\u003EAngle\u003C/code\u003E represents an angle in degrees, radians, or turns. It is stored\n as a number of radians.\n  \nAngle.radians \nradians \nAngle.inRadians \ninRadians \nAngle.degrees \ndegrees \nAngle.inDegrees \ninDegrees \nAngle.minutes \nminutes \nAngle.inMinutes \ninMinutes \nAngle.seconds \nseconds \nAngle.inSeconds \ninSeconds \nAngle.turns \nturns \nAngle.inTurns \ninTurns \nAngle.pi \npi \nAngle.twoPi \ntwoPi \nAngle.piOverTwo \npiOverTwo \nAngle.halfPi \nhalfPi \nAngle.normalize \nnormalize \nAngle.sin \nsin \nAngle.cos \ncos \nAngle.tan \ntan \nAngle.asin \nasin \nAngle.acos \nacos \nAngle.atan \natan \nAngle.radian \nradian \nAngle.degree \ndegree \nAngle.turn \nturn \nAngle.minute \nminute \nAngle.second \nsecond"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#radians","title":"Angle.radians","content":"Angle.radians \nradians \n\n Create an angle from a number of radians.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inRadians","title":"Angle.inRadians","content":"Angle.inRadians \ninRadians \n\n Get a \u003Ccode\u003Efloat\u003C/code\u003E of the given angle in radians\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#degrees","title":"Angle.degrees","content":"Angle.degrees \ndegrees \n\n Create an angle from a number of degrees.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inDegrees","title":"Angle.inDegrees","content":"Angle.inDegrees \ninDegrees \n\n Get a \u003Ccode\u003Efloat\u003C/code\u003E of the given angle in degrees.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#minutes","title":"Angle.minutes","content":"Angle.minutes \nminutes \n\n Create an angle from a number of minutes.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inMinutes","title":"Angle.inMinutes","content":"Angle.inMinutes \ninMinutes \n\n Get a \u003Ccode\u003Efloat\u003C/code\u003E of the given angle in minutes.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#seconds","title":"Angle.seconds","content":"Angle.seconds \nseconds \n\n Create an angle from a number of seconds.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inSeconds","title":"Angle.inSeconds","content":"Angle.inSeconds \ninSeconds \n\n Get a \u003Ccode\u003Efloat\u003C/code\u003E of the given angle in seconds.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#turns","title":"Angle.turns","content":"Angle.turns \nturns \n\n Create an angle from a number of turns.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inTurns","title":"Angle.inTurns","content":"Angle.inTurns \ninTurns \n\n Get a \u003Ccode\u003Efloat\u003C/code\u003E of the given angle in turns.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#pi","title":"Angle.pi","content":"Angle.pi \npi \n\n \u03C0\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#twoPi","title":"Angle.twoPi","content":"Angle.twoPi \ntwoPi \n\n 2\u03C0\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#piOverTwo","title":"Angle.piOverTwo","content":"Angle.piOverTwo \npiOverTwo \n\n \u03C0/2\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#halfPi","title":"Angle.halfPi","content":"Angle.halfPi \nhalfPi \n\n \u03C0/2.\n Alias for \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-angle.html\u0022\u003EAngle.piOverTwo\u003C/a\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#normalize","title":"Angle.normalize","content":"Angle.normalize \nnormalize \n\n Convert an arbitrary angle to the equivalent angle in the range -180 to 180\n degrees (-\u03C0 to \u03C0 radians), by adding or subtracting some multiple of 360\n degrees (2\u03C0 radians) if necessary.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#sin","title":"Angle.sin","content":"Angle.sin \nsin \n\n Run the \u003Ccode\u003Esin\u003C/code\u003E function on an angle.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#cos","title":"Angle.cos","content":"Angle.cos \ncos \n\n Run the \u003Ccode\u003Ecos\u003C/code\u003E function on an angle.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#tan","title":"Angle.tan","content":"Angle.tan \ntan \n\n Run the \u003Ccode\u003Etan\u003C/code\u003E function on an angle.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#asin","title":"Angle.asin","content":"Angle.asin \nasin \n\n Run the \u003Ccode\u003Easin\u003C/code\u003E function on an angle.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#acos","title":"Angle.acos","content":"Angle.acos \nacos \n\n Run the \u003Ccode\u003Eacos\u003C/code\u003E function on an angle.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#atan","title":"Angle.atan","content":"Angle.atan \natan \n\n Run the \u003Ccode\u003Eatan\u003C/code\u003E function on an angle.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#radian","title":"Angle.radian","content":"Angle.radian \nradian \n\n One radian.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#degree","title":"Angle.degree","content":"Angle.degree \ndegree \n\n One degree.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#turn","title":"Angle.turn","content":"Angle.turn \nturn \n\n One turn.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#minute","title":"Angle.minute","content":"Angle.minute \nminute \n\n One minute.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#second","title":"Angle.second","content":"Angle.second \nsecond \n\n One second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html","title":"AngularAcceleration","content":"AngularAcceleration \n\n An \u003Ccode\u003EAngularAcceleration\u003C/code\u003E represents an angular acceleration in radians per\n second squared, degrees per second squared, and turns per second squared. It is\n stored as a number of radians per second squared.\n  \nAngularAcceleration.radiansPerSecondSquared \nradiansPerSecondSquared \nAngularAcceleration.inRadiansPerSecondSquared \ninRadiansPerSecondSquared \nAngularAcceleration.degreesPerSecondSquared \ndegreesPerSecondSquared \nAngularAcceleration.inDegreesPerSecondSquared \ninDegreesPerSecondSquared \nAngularAcceleration.turnsPerSecondSquared \nturnsPerSecondSquared \nAngularAcceleration.inTurnsPerSecondSquared \ninTurnsPerSecondSquared"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#radiansPerSecondSquared","title":"AngularAcceleration.radiansPerSecondSquared","content":"AngularAcceleration.radiansPerSecondSquared \nradiansPerSecondSquared \n\n Construct an angular acceleration from a number of radians per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#inRadiansPerSecondSquared","title":"AngularAcceleration.inRadiansPerSecondSquared","content":"AngularAcceleration.inRadiansPerSecondSquared \ninRadiansPerSecondSquared \n\n Convert an angular acceleration to a number of radians per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#degreesPerSecondSquared","title":"AngularAcceleration.degreesPerSecondSquared","content":"AngularAcceleration.degreesPerSecondSquared \ndegreesPerSecondSquared \n\n Construct an angular acceleration from a number of degrees per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#inDegreesPerSecondSquared","title":"AngularAcceleration.inDegreesPerSecondSquared","content":"AngularAcceleration.inDegreesPerSecondSquared \ninDegreesPerSecondSquared \n\n Convert an angular acceleration to a number of degrees per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#turnsPerSecondSquared","title":"AngularAcceleration.turnsPerSecondSquared","content":"AngularAcceleration.turnsPerSecondSquared \nturnsPerSecondSquared \n\n Construct an angular acceleration from a number of turns per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#inTurnsPerSecondSquared","title":"AngularAcceleration.inTurnsPerSecondSquared","content":"AngularAcceleration.inTurnsPerSecondSquared \ninTurnsPerSecondSquared \n\n Convert an angular acceleration to a number of turns per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html","title":"AngularSpeed","content":"AngularSpeed \n\n An \u003Ccode\u003EAngularSpeed\u003C/code\u003E represents a rotation rate in radians per second, degrees\n per second, turns (revolutions) per second or turns (revolutions) per minute.\n It is stored as a number of radians per second.\n  \nAngularSpeed.radiansPerSecond \nradiansPerSecond \nAngularSpeed.inRadiansPerSecond \ninRadiansPerSecond \nAngularSpeed.degreesPerSecond \ndegreesPerSecond \nAngularSpeed.inDegreesPerSecond \ninDegreesPerSecond \nAngularSpeed.turnsPerSecond \nturnsPerSecond \nAngularSpeed.inTurnsPerSecond \ninTurnsPerSecond \nAngularSpeed.turnsPerMinute \nturnsPerMinute \nAngularSpeed.inTurnsPerMinute \ninTurnsPerMinute \nAngularSpeed.revolutionsPerSecond \nrevolutionsPerSecond \nAngularSpeed.inRevolutionsPerSecond \ninRevolutionsPerSecond \nAngularSpeed.revolutionsPerMinute \nrevolutionsPerMinute \nAngularSpeed.inRevolutionsPerMinute \ninRevolutionsPerMinute"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#radiansPerSecond","title":"AngularSpeed.radiansPerSecond","content":"AngularSpeed.radiansPerSecond \nradiansPerSecond \n\n Construct an angular speed from a number of radians per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inRadiansPerSecond","title":"AngularSpeed.inRadiansPerSecond","content":"AngularSpeed.inRadiansPerSecond \ninRadiansPerSecond \n\n Convert an angular speed to a number of radians per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#degreesPerSecond","title":"AngularSpeed.degreesPerSecond","content":"AngularSpeed.degreesPerSecond \ndegreesPerSecond \n\n Construct an angular speed from a number of degrees per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inDegreesPerSecond","title":"AngularSpeed.inDegreesPerSecond","content":"AngularSpeed.inDegreesPerSecond \ninDegreesPerSecond \n\n Convert an angular speed to a number of degrees per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#turnsPerSecond","title":"AngularSpeed.turnsPerSecond","content":"AngularSpeed.turnsPerSecond \nturnsPerSecond \n\n Construct an angular speed from a number of turns per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inTurnsPerSecond","title":"AngularSpeed.inTurnsPerSecond","content":"AngularSpeed.inTurnsPerSecond \ninTurnsPerSecond \n\n Convert an angular speed to a number of turns per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#turnsPerMinute","title":"AngularSpeed.turnsPerMinute","content":"AngularSpeed.turnsPerMinute \nturnsPerMinute \n\n Construct an angular speed from a number of turns per minute.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inTurnsPerMinute","title":"AngularSpeed.inTurnsPerMinute","content":"AngularSpeed.inTurnsPerMinute \ninTurnsPerMinute \n\n Convert an angular speed to a number of turns per minute.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#revolutionsPerSecond","title":"AngularSpeed.revolutionsPerSecond","content":"AngularSpeed.revolutionsPerSecond \nrevolutionsPerSecond \n\n Alias for \u003Ccode\u003EAngularSpeed.turnsPerSecond\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inRevolutionsPerSecond","title":"AngularSpeed.inRevolutionsPerSecond","content":"AngularSpeed.inRevolutionsPerSecond \ninRevolutionsPerSecond \n\n Alias for \u003Ccode\u003EAngularSpeed.inTurnsPerSecond\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#revolutionsPerMinute","title":"AngularSpeed.revolutionsPerMinute","content":"AngularSpeed.revolutionsPerMinute \nrevolutionsPerMinute \n\n Alias for \u003Ccode\u003EAngularSpeed.turnsPerMinute\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inRevolutionsPerMinute","title":"AngularSpeed.inRevolutionsPerMinute","content":"AngularSpeed.inRevolutionsPerMinute \ninRevolutionsPerMinute \n\n Alias for \u003Ccode\u003EAngularSpeed.inTurnsPerMinute\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html","title":"Area","content":"Area \n\n An \u003Ccode\u003EArea\u003C/code\u003E represents an area in square meters, square feet, acres, hectares\n etc. It is stored as a number of square meters.\n Note that you can construct an \u003Ccode\u003EArea\u003C/code\u003E value directly using the functions in this\n module, but it also works to call \u003Ccode\u003EQuantity.squared\u003C/code\u003E on a\n \u003Ccode\u003ELength\u003C/code\u003E or \u003Ccode\u003EQuantity.times\u003C/code\u003E on a pair of \u003Ccode\u003ELength\u003C/code\u003Es.\n  \nArea.squareMeters \nsquareMeters \nArea.inSquareMeters \ninSquareMeters \nArea.squareMillimeters \nsquareMillimeters \nArea.inSquareMillimeters \ninSquareMillimeters \nArea.squareInches \nsquareInches \nArea.inSquareInches \ninSquareInches \nArea.squareCentimeters \nsquareCentimeters \nArea.inSquareCentimeters \ninSquareCentimeters \nArea.squareFeet \nsquareFeet \nArea.inSquareFeet \ninSquareFeet \nArea.squareYards \nsquareYards \nArea.inSquareYards \ninSquareYards \nArea.hectares \nhectares \nArea.inHectares \ninHectares \nArea.squareKilometers \nsquareKilometers \nArea.inSquareKilometers \ninSquareKilometers \nArea.acres \nacres \nArea.inAcres \ninAcres \nArea.squareMiles \nsquareMiles \nArea.inSquareMiles \ninSquareMiles \nArea.squareMeter \nsquareMeter \nArea.squareMillimeter \nsquareMillimeter \nArea.squareCentimeter \nsquareCentimeter \nArea.hectare \nhectare \nArea.squareKilometer \nsquareKilometer \nArea.squareInch \nsquareInch \nArea.squareFoot \nsquareFoot \nArea.squareYard \nsquareYard \nArea.acre \nacre \nArea.squareMile \nsquareMile"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMeters","title":"Area.squareMeters","content":"Area.squareMeters \nsquareMeters \n\n Construct an area from a number of square meters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareMeters","title":"Area.inSquareMeters","content":"Area.inSquareMeters \ninSquareMeters \n\n Convert an area to a number of square meters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMillimeters","title":"Area.squareMillimeters","content":"Area.squareMillimeters \nsquareMillimeters \n\n Construct an area from a number of square millimeters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareMillimeters","title":"Area.inSquareMillimeters","content":"Area.inSquareMillimeters \ninSquareMillimeters \n\n Convert an area to a number of square millimeters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareInches","title":"Area.squareInches","content":"Area.squareInches \nsquareInches \n\n Construct an area from a number of square inches.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareInches","title":"Area.inSquareInches","content":"Area.inSquareInches \ninSquareInches \n\n Convert an area to a number of square inches.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareCentimeters","title":"Area.squareCentimeters","content":"Area.squareCentimeters \nsquareCentimeters \n\n Construct an area from a number of square centimeters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareCentimeters","title":"Area.inSquareCentimeters","content":"Area.inSquareCentimeters \ninSquareCentimeters \n\n Convert an area to a number of square centimeters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareFeet","title":"Area.squareFeet","content":"Area.squareFeet \nsquareFeet \n\n Construct an area from a number of square feet.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareFeet","title":"Area.inSquareFeet","content":"Area.inSquareFeet \ninSquareFeet \n\n Convert an area to a number of square feet.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareYards","title":"Area.squareYards","content":"Area.squareYards \nsquareYards \n\n Construct an area from a number of square yards.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareYards","title":"Area.inSquareYards","content":"Area.inSquareYards \ninSquareYards \n\n Convert an area to a number of square yards.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#hectares","title":"Area.hectares","content":"Area.hectares \nhectares \n\n Construct an area from a number of hectares.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inHectares","title":"Area.inHectares","content":"Area.inHectares \ninHectares \n\n Convert an area to a number of hectares.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareKilometers","title":"Area.squareKilometers","content":"Area.squareKilometers \nsquareKilometers \n\n Construct an area from a number of square kilometers.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareKilometers","title":"Area.inSquareKilometers","content":"Area.inSquareKilometers \ninSquareKilometers \n\n Convert an area to a number of square kilometers.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#acres","title":"Area.acres","content":"Area.acres \nacres \n\n Construct an area from a number of acres.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inAcres","title":"Area.inAcres","content":"Area.inAcres \ninAcres \n\n Convert an area to a number of acres.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMiles","title":"Area.squareMiles","content":"Area.squareMiles \nsquareMiles \n\n Construct an area from a number of square miles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareMiles","title":"Area.inSquareMiles","content":"Area.inSquareMiles \ninSquareMiles \n\n Convert an area to a number of square miles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMeter","title":"Area.squareMeter","content":"Area.squareMeter \nsquareMeter \n\n One square meter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMillimeter","title":"Area.squareMillimeter","content":"Area.squareMillimeter \nsquareMillimeter \n\n One square millimeter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareCentimeter","title":"Area.squareCentimeter","content":"Area.squareCentimeter \nsquareCentimeter \n\n One square centimeter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#hectare","title":"Area.hectare","content":"Area.hectare \nhectare \n\n One hectare.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareKilometer","title":"Area.squareKilometer","content":"Area.squareKilometer \nsquareKilometer \n\n One square kilometer.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareInch","title":"Area.squareInch","content":"Area.squareInch \nsquareInch \n\n One square inch.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareFoot","title":"Area.squareFoot","content":"Area.squareFoot \nsquareFoot \n\n One square foot.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareYard","title":"Area.squareYard","content":"Area.squareYard \nsquareYard \n\n One square yard.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#acre","title":"Area.acre","content":"Area.acre \nacre \n\n One acre.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMile","title":"Area.squareMile","content":"Area.squareMile \nsquareMile \n\n One square mile.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html","title":"Capacitance","content":"Capacitance \n\n A \u003Ccode\u003ECapacitance\u003C/code\u003E value represents an electrical capacitance in farads.\n Note that since \u003Ccode\u003ECapacitance\u003C/code\u003E is defined as \u003Ccode\u003ERate\u0026lt;Coulombs, Volts\u0026gt;\u003C/code\u003E (charge per\n voltage) .\n  \nCapacitance.farads \nfarads \nCapacitance.inFarads \ninFarads \nCapacitance.microfarads \nmicrofarads \nCapacitance.inMicrofarads \ninMicrofarads \nCapacitance.nanofarads \nnanofarads \nCapacitance.inNanofarads \ninNanofarads \nCapacitance.picofarads \npicofarads \nCapacitance.inPicofarads \ninPicofarads"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#farads","title":"Capacitance.farads","content":"Capacitance.farads \nfarads \n\n Construct capacitance from a number of farads.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inFarads","title":"Capacitance.inFarads","content":"Capacitance.inFarads \ninFarads \n\n Convert capacitance to a number of farads.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#microfarads","title":"Capacitance.microfarads","content":"Capacitance.microfarads \nmicrofarads \n\n Construct a capacitance from a number of microfarads.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inMicrofarads","title":"Capacitance.inMicrofarads","content":"Capacitance.inMicrofarads \ninMicrofarads \n\n Convert a capacitance to a number of microfarads\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#nanofarads","title":"Capacitance.nanofarads","content":"Capacitance.nanofarads \nnanofarads \n\n Construct a capacitance from a number of nanofarads\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inNanofarads","title":"Capacitance.inNanofarads","content":"Capacitance.inNanofarads \ninNanofarads \n\n Convert a capacitance to a number of nanofarads\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#picofarads","title":"Capacitance.picofarads","content":"Capacitance.picofarads \npicofarads \n\n Construct capacitance from a number of picofarads.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inPicofarads","title":"Capacitance.inPicofarads","content":"Capacitance.inPicofarads \ninPicofarads \n\n Convert a capacitance to a number of picofarads.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html","title":"Charge","content":"Charge \n\n A \u003Ccode\u003ECharge\u003C/code\u003E value represents an electrical charge in coulombs or ampere\n hours. It is stored as a number of coulombs.\n  \nCharge.coulombs \ncoulombs \nCharge.inCoulombs \ninCoulombs \nCharge.ampereHours \nampereHours \nCharge.inAmpereHours \ninAmpereHours \nCharge.milliampereHours \nmilliampereHours \nCharge.inMilliampereHours \ninMilliampereHours"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#coulombs","title":"Charge.coulombs","content":"Charge.coulombs \ncoulombs \n\n Construct a charge from a number of coulombs.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#inCoulombs","title":"Charge.inCoulombs","content":"Charge.inCoulombs \ninCoulombs \n\n Convert a charge to a number of coulombs.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#ampereHours","title":"Charge.ampereHours","content":"Charge.ampereHours \nampereHours \n\n Construct a charge from a number of ampere hours.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#inAmpereHours","title":"Charge.inAmpereHours","content":"Charge.inAmpereHours \ninAmpereHours \n\n Convert a charge to a number of ampere hours.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#milliampereHours","title":"Charge.milliampereHours","content":"Charge.milliampereHours \nmilliampereHours \n\n Construct a charge from a number of milliampere hours.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#inMilliampereHours","title":"Charge.inMilliampereHours","content":"Charge.inMilliampereHours \ninMilliampereHours \n\n Convert a charge to a number of milliampere hours.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html","title":"Constants","content":"Constants \n\n All conversion factors sourced from \n \u003Ca href=\u0022https://www.nist.gov/pml/weights-and-measures/publications/nist-handbooks/handbook-44\u0022\u003ENational Institute of Standards and Technology\u003C/a\u003E\n unless otherwise specified.\n  \nConstants.meter \nmeter \nConstants.angstrom \nangstrom \nConstants.nanometer \nnanometer \nConstants.micron \nmicron \nConstants.millimeter \nmillimeter \nConstants.centimeter \ncentimeter \nConstants.kilometer \nkilometer \nConstants.inch \ninch \nConstants.foot \nfoot \nConstants.yard \nyard \nConstants.thou \nthou \nConstants.mile \nmile \nConstants.astronomicalUnit \nastronomicalUnit \nConstants.lightYear \nlightYear \nConstants.parsec \nparsec \nConstants.cssPixel \ncssPixel \nConstants.point \npoint \nConstants.pica \npica \nConstants.squareInch \nsquareInch \nConstants.squareFoot \nsquareFoot \nConstants.squareYard \nsquareYard \nConstants.squareMile \nsquareMile \nConstants.acre \nacre \nConstants.cubicMeter \ncubicMeter \nConstants.liter \nliter \nConstants.imperialGallon \nimperialGallon \nConstants.imperialQuart \nimperialQuart \nConstants.imperialPint \nimperialPint \nConstants.imperialFluidOunce \nimperialFluidOunce \nConstants.cubicInch \ncubicInch \nConstants.cubicFoot \ncubicFoot \nConstants.cubicYard \ncubicYard \nConstants.usLiquidGallon \nusLiquidGallon \nConstants.usLiquidQuart \nusLiquidQuart \nConstants.usLiquidPint \nusLiquidPint \nConstants.usFluidOunce \nusFluidOunce \nConstants.bushel \nbushel \nConstants.peck \npeck \nConstants.usDryGallon \nusDryGallon \nConstants.usDryQuart \nusDryQuart \nConstants.usDryPint \nusDryPint \nConstants.kilogram \nkilogram \nConstants.pound \npound \nConstants.longTon \nlongTon \nConstants.shortTon \nshortTon \nConstants.ounce \nounce \nConstants.second \nsecond \nConstants.minute \nminute \nConstants.hour \nhour \nConstants.day \nday \nConstants.week \nweek \nConstants.julianYear \njulianYear \nConstants.mole \nmole \nConstants.gee \ngee \nConstants.newton \nnewton \nConstants.poundForce \npoundForce \nConstants.watt \nwatt \nConstants.electricalHorsepower \nelectricalHorsepower \nConstants.mechanicalHorsepower \nmechanicalHorsepower \nConstants.metricHorsepower \nmetricHorsepower \nConstants.pascal \npascal \nConstants.atmosphere \natmosphere \nConstants.radiansToDegrees \nradiansToDegrees \nConstants.degreesToRadians \ndegreesToRadians"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#meter","title":"Constants.meter","content":"Constants.meter \nmeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#angstrom","title":"Constants.angstrom","content":"Constants.angstrom \nangstrom \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#nanometer","title":"Constants.nanometer","content":"Constants.nanometer \nnanometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#micron","title":"Constants.micron","content":"Constants.micron \nmicron \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#millimeter","title":"Constants.millimeter","content":"Constants.millimeter \nmillimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#centimeter","title":"Constants.centimeter","content":"Constants.centimeter \ncentimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#kilometer","title":"Constants.kilometer","content":"Constants.kilometer \nkilometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#inch","title":"Constants.inch","content":"Constants.inch \ninch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#foot","title":"Constants.foot","content":"Constants.foot \nfoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#yard","title":"Constants.yard","content":"Constants.yard \nyard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#thou","title":"Constants.thou","content":"Constants.thou \nthou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#mile","title":"Constants.mile","content":"Constants.mile \nmile \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#astronomicalUnit","title":"Constants.astronomicalUnit","content":"Constants.astronomicalUnit \nastronomicalUnit \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#lightYear","title":"Constants.lightYear","content":"Constants.lightYear \nlightYear \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#parsec","title":"Constants.parsec","content":"Constants.parsec \nparsec \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cssPixel","title":"Constants.cssPixel","content":"Constants.cssPixel \ncssPixel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#point","title":"Constants.point","content":"Constants.point \npoint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#pica","title":"Constants.pica","content":"Constants.pica \npica \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareInch","title":"Constants.squareInch","content":"Constants.squareInch \nsquareInch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareFoot","title":"Constants.squareFoot","content":"Constants.squareFoot \nsquareFoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareYard","title":"Constants.squareYard","content":"Constants.squareYard \nsquareYard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareMile","title":"Constants.squareMile","content":"Constants.squareMile \nsquareMile \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#acre","title":"Constants.acre","content":"Constants.acre \nacre \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicMeter","title":"Constants.cubicMeter","content":"Constants.cubicMeter \ncubicMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#liter","title":"Constants.liter","content":"Constants.liter \nliter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialGallon","title":"Constants.imperialGallon","content":"Constants.imperialGallon \nimperialGallon \n\n Sourced from \u003Ca href=\u0022https://www.nist.gov/pml/weights-and-measures/publications/nist-handbooks/handbook-44\u0022\u003EUK Weights and Measures Act\u003C/a\u003E. One imperial gallon is equal to\n 4.54609 cubic decimeters (formerly defined as the volume of one kilogram\n of pure water under standard conditions, now equal to 1 liter).\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialQuart","title":"Constants.imperialQuart","content":"Constants.imperialQuart \nimperialQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialPint","title":"Constants.imperialPint","content":"Constants.imperialPint \nimperialPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialFluidOunce","title":"Constants.imperialFluidOunce","content":"Constants.imperialFluidOunce \nimperialFluidOunce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicInch","title":"Constants.cubicInch","content":"Constants.cubicInch \ncubicInch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicFoot","title":"Constants.cubicFoot","content":"Constants.cubicFoot \ncubicFoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicYard","title":"Constants.cubicYard","content":"Constants.cubicYard \ncubicYard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usLiquidGallon","title":"Constants.usLiquidGallon","content":"Constants.usLiquidGallon \nusLiquidGallon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usLiquidQuart","title":"Constants.usLiquidQuart","content":"Constants.usLiquidQuart \nusLiquidQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usLiquidPint","title":"Constants.usLiquidPint","content":"Constants.usLiquidPint \nusLiquidPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usFluidOunce","title":"Constants.usFluidOunce","content":"Constants.usFluidOunce \nusFluidOunce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#bushel","title":"Constants.bushel","content":"Constants.bushel \nbushel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#peck","title":"Constants.peck","content":"Constants.peck \npeck \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usDryGallon","title":"Constants.usDryGallon","content":"Constants.usDryGallon \nusDryGallon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usDryQuart","title":"Constants.usDryQuart","content":"Constants.usDryQuart \nusDryQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usDryPint","title":"Constants.usDryPint","content":"Constants.usDryPint \nusDryPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#kilogram","title":"Constants.kilogram","content":"Constants.kilogram \nkilogram \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#pound","title":"Constants.pound","content":"Constants.pound \npound \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#longTon","title":"Constants.longTon","content":"Constants.longTon \nlongTon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#shortTon","title":"Constants.shortTon","content":"Constants.shortTon \nshortTon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#ounce","title":"Constants.ounce","content":"Constants.ounce \nounce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#second","title":"Constants.second","content":"Constants.second \nsecond \n\n ---- Units of Duration (in Seconds) ----------------------------------------\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#minute","title":"Constants.minute","content":"Constants.minute \nminute \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#hour","title":"Constants.hour","content":"Constants.hour \nhour \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#day","title":"Constants.day","content":"Constants.day \nday \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#week","title":"Constants.week","content":"Constants.week \nweek \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#julianYear","title":"Constants.julianYear","content":"Constants.julianYear \njulianYear \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#mole","title":"Constants.mole","content":"Constants.mole \nmole \n\n ---- Units of substance amount (in Moles) ----------------------------------\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#gee","title":"Constants.gee","content":"Constants.gee \ngee \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#newton","title":"Constants.newton","content":"Constants.newton \nnewton \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#poundForce","title":"Constants.poundForce","content":"Constants.poundForce \npoundForce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#watt","title":"Constants.watt","content":"Constants.watt \nwatt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#electricalHorsepower","title":"Constants.electricalHorsepower","content":"Constants.electricalHorsepower \nelectricalHorsepower \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#mechanicalHorsepower","title":"Constants.mechanicalHorsepower","content":"Constants.mechanicalHorsepower \nmechanicalHorsepower \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#metricHorsepower","title":"Constants.metricHorsepower","content":"Constants.metricHorsepower \nmetricHorsepower \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#pascal","title":"Constants.pascal","content":"Constants.pascal \npascal \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#atmosphere","title":"Constants.atmosphere","content":"Constants.atmosphere \natmosphere \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#radiansToDegrees","title":"Constants.radiansToDegrees","content":"Constants.radiansToDegrees \nradiansToDegrees \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#degreesToRadians","title":"Constants.degreesToRadians","content":"Constants.degreesToRadians \ndegreesToRadians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html","title":"Current","content":"Current \n\n A \u003Ccode\u003ECurrent\u003C/code\u003E value represents an electrical current in amperes.\n  \nCurrent.amperes \namperes \nCurrent.inAmperes \ninAmperes \nCurrent.milliamperes \nmilliamperes \nCurrent.inMilliamperes \ninMilliamperes"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#amperes","title":"Current.amperes","content":"Current.amperes \namperes \n\n Construct a current from a number of amperes.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#inAmperes","title":"Current.inAmperes","content":"Current.inAmperes \ninAmperes \n\n Convert a current to a number of amperes.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#milliamperes","title":"Current.milliamperes","content":"Current.milliamperes \nmilliamperes \n\n Construct a current from a number of milliamperes.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#inMilliamperes","title":"Current.inMilliamperes","content":"Current.inMilliamperes \ninMilliamperes \n\n Convert a current to number of milliamperes.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html","title":"Density","content":"Density \n\n A \u003Ccode\u003EDensity\u003C/code\u003E value represents a density in grams per cubic centimeter, pounds\n per cubic inch, etc. It is stored as a number of kilograms per cubic meter.\n  \nDensity.kilogramsPerCubicMeter \nkilogramsPerCubicMeter \nDensity.inKilogramsPerCubicMeter \ninKilogramsPerCubicMeter \nDensity.gramsPerCubicCentimeter \ngramsPerCubicCentimeter \nDensity.inGramsPerCubicCentimeter \ninGramsPerCubicCentimeter \nDensity.poundsPerCubicInch \npoundsPerCubicInch \nDensity.inPoundsPerCubicInch \ninPoundsPerCubicInch \nDensity.poundsPerCubicFoot \npoundsPerCubicFoot \nDensity.inPoundsPerCubicFoot \ninPoundsPerCubicFoot"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#kilogramsPerCubicMeter","title":"Density.kilogramsPerCubicMeter","content":"Density.kilogramsPerCubicMeter \nkilogramsPerCubicMeter \n\n Construct a density from a number of kilograms per cubic meter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inKilogramsPerCubicMeter","title":"Density.inKilogramsPerCubicMeter","content":"Density.inKilogramsPerCubicMeter \ninKilogramsPerCubicMeter \n\n Convert a density to a number of kilograms per cubic meter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#gramsPerCubicCentimeter","title":"Density.gramsPerCubicCentimeter","content":"Density.gramsPerCubicCentimeter \ngramsPerCubicCentimeter \n\n Construct a density from a number of grams per cubic centimeter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inGramsPerCubicCentimeter","title":"Density.inGramsPerCubicCentimeter","content":"Density.inGramsPerCubicCentimeter \ninGramsPerCubicCentimeter \n\n Convert a density to a number of grams per cubic centimeter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#poundsPerCubicInch","title":"Density.poundsPerCubicInch","content":"Density.poundsPerCubicInch \npoundsPerCubicInch \n\n Construct a density from a number of pounds per cubic inch.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inPoundsPerCubicInch","title":"Density.inPoundsPerCubicInch","content":"Density.inPoundsPerCubicInch \ninPoundsPerCubicInch \n\n Convert a density to a number of pounds per cubic inch.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#poundsPerCubicFoot","title":"Density.poundsPerCubicFoot","content":"Density.poundsPerCubicFoot \npoundsPerCubicFoot \n\n Construct a density from a number of pounds per cubic foot.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inPoundsPerCubicFoot","title":"Density.inPoundsPerCubicFoot","content":"Density.inPoundsPerCubicFoot \ninPoundsPerCubicFoot \n\n Convert a density to a number of pounds per cubic foot.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html","title":"Duration","content":"Duration \n\n  A \u003Ccode\u003EDuration\u003C/code\u003E refers to an elapsed time in seconds, milliseconds, hours etc.,\n as opposed to a specific instant in time (which would generally be represented\n by a \u003Ca href=\u0022https://docs.microsoft.com/dotnet/api/system.datetime\u0022\u003EDateTime\u003C/a\u003E. value). It is stored as a number of seconds.\n \nDuration.seconds \nseconds \nDuration.inSeconds \ninSeconds \nDuration.milliseconds \nmilliseconds \nDuration.inMilliseconds \ninMilliseconds \nDuration.minutes \nminutes \nDuration.inMinutes \ninMinutes \nDuration.hours \nhours \nDuration.inHours \ninHours \nDuration.days \ndays \nDuration.inDays \ninDays \nDuration.weeks \nweeks \nDuration.inWeeks \ninWeeks \nDuration.julianYears \njulianYears \nDuration.inJulianYears \ninJulianYears \nDuration.second \nsecond \nDuration.millisecond \nmillisecond \nDuration.minute \nminute \nDuration.hour \nhour \nDuration.day \nday \nDuration.week \nweek \nDuration.julianYear \njulianYear"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#seconds","title":"Duration.seconds","content":"Duration.seconds \nseconds \n\n Construct a \u003Ccode\u003EDuration\u003C/code\u003E from a given number of seconds.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inSeconds","title":"Duration.inSeconds","content":"Duration.inSeconds \ninSeconds \n\n Convert a \u003Ccode\u003E1\u003C/code\u003E to a value in seconds.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#milliseconds","title":"Duration.milliseconds","content":"Duration.milliseconds \nmilliseconds \n\n Construct a \u003Ccode\u003EDuration\u003C/code\u003E from a given number of milliseconds.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inMilliseconds","title":"Duration.inMilliseconds","content":"Duration.inMilliseconds \ninMilliseconds \n\n Convert a \u003Ccode\u003EDuration\u003C/code\u003E to a value in milliseconds.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#minutes","title":"Duration.minutes","content":"Duration.minutes \nminutes \n\n Construct a \u003Ccode\u003EDuration\u003C/code\u003E from a given number of minutes.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inMinutes","title":"Duration.inMinutes","content":"Duration.inMinutes \ninMinutes \n\n Convert a \u003Ccode\u003EDuration\u003C/code\u003E to a value in minutes.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#hours","title":"Duration.hours","content":"Duration.hours \nhours \n\n Construct a \u003Ccode\u003EDuration\u003C/code\u003E from a given number of hours.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inHours","title":"Duration.inHours","content":"Duration.inHours \ninHours \n\n Convert a \u003Ccode\u003EDuration\u003C/code\u003E to a value in hours.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#days","title":"Duration.days","content":"Duration.days \ndays \n\n Construct a \u003Ccode\u003EDuration\u003C/code\u003E from a given number of days. A day is defined as\n exactly 24 hours or 86400 seconds. Therefore, it is only equal to the length of\n a given calendar day if that calendar day does not include either a leap second\n or any added/removed daylight savings hours.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inDays","title":"Duration.inDays","content":"Duration.inDays \ninDays \n\n Convert a \u003Ccode\u003EDuration\u003C/code\u003E to a value in days.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#weeks","title":"Duration.weeks","content":"Duration.weeks \nweeks \n\n Construct a \u003Ccode\u003EDuration\u003C/code\u003E from a given number of weeks.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inWeeks","title":"Duration.inWeeks","content":"Duration.inWeeks \ninWeeks \n\n Convert a \u003Ccode\u003EDuration\u003C/code\u003E to a value in weeks.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#julianYears","title":"Duration.julianYears","content":"Duration.julianYears \njulianYears \n\n Construct a \u003Ccode\u003EDuration\u003C/code\u003E from a given number of\n \n A Julian year is defined as exactly 365.25 days, the average length of a year in\n the historical Julian calendar. This is 10 minutes and 48 seconds longer than\n a Gregorian year (365.2425 days), which is the average length of a year in the\n modern Gregorian calendar, but the Julian year is a bit easier to remember and\n reason about and has the virtue of being the \u0027year\u0027 value used in the definition\n of a ].\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inJulianYears","title":"Duration.inJulianYears","content":"Duration.inJulianYears \ninJulianYears \n\n Convert a \u003Ccode\u003EDuration\u003C/code\u003E to a value in Julian years.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#second","title":"Duration.second","content":"Duration.second \nsecond \n\n One second\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#millisecond","title":"Duration.millisecond","content":"Duration.millisecond \nmillisecond \n\n One millisecond\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#minute","title":"Duration.minute","content":"Duration.minute \nminute \n\n One minute\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#hour","title":"Duration.hour","content":"Duration.hour \nhour \n\n One hour\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#day","title":"Duration.day","content":"Duration.day \nday \n\n One day\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#week","title":"Duration.week","content":"Duration.week \nweek \n\n One week\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#julianYear","title":"Duration.julianYear","content":"Duration.julianYear \njulianYear \n\n One Julian Year\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html","title":"Energy","content":"Energy \n\n An \u003Ccode\u003EEnergy\u003C/code\u003E value represents an amount of energy (or work) in joules,\n kilowatt hours etc. It is stored as a number of joules.\n  \nEnergy.joules \njoules \nEnergy.inJoules \ninJoules \nEnergy.kilojoules \nkilojoules \nEnergy.inKilojoules \ninKilojoules \nEnergy.megajoules \nmegajoules \nEnergy.inMegajoules \ninMegajoules \nEnergy.kilowattHours \nkilowattHours \nEnergy.inKilowattHours \ninKilowattHours"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#joules","title":"Energy.joules","content":"Energy.joules \njoules \n\n Construct an energy value from a number of joules.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inJoules","title":"Energy.inJoules","content":"Energy.inJoules \ninJoules \n\n Convert an energy value to a number of joules.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#kilojoules","title":"Energy.kilojoules","content":"Energy.kilojoules \nkilojoules \n\n Construct an energy value from a number of kilojoules.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inKilojoules","title":"Energy.inKilojoules","content":"Energy.inKilojoules \ninKilojoules \n\n Convert an energy value to a number of kilojoules.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#megajoules","title":"Energy.megajoules","content":"Energy.megajoules \nmegajoules \n\n Construct an energy value from a number of megajoules.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inMegajoules","title":"Energy.inMegajoules","content":"Energy.inMegajoules \ninMegajoules \n\n Convert an energy value to a number of megajoules.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#kilowattHours","title":"Energy.kilowattHours","content":"Energy.kilowattHours \nkilowattHours \n\u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n Construct an energy value from a number of kilowatt hours.\n    Energy.kilowattHours 1\n    --\u0026gt; Energy.megajoules 3.6\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inKilowattHours","title":"Energy.inKilowattHours","content":"Energy.inKilowattHours \ninKilowattHours \n\n Convert an energy value to a number of kilowatt hours.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html","title":"Float","content":"Float \n \nFloat.almostEqual \nalmostEqual \nFloat.roundFloatTo \nroundFloatTo \nFloat.roundFloat \nroundFloat \nFloat.interpolateFrom \ninterpolateFrom"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#almostEqual","title":"Float.almostEqual","content":"Float.almostEqual \nalmostEqual \n\n Compare two floating point values for equality. Equality testing is done\n based on a tolerance vale specified by \u003Cc\u003EFloat.Epsilon\u003C/c\u003E.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#roundFloatTo","title":"Float.roundFloatTo","content":"Float.roundFloatTo \nroundFloatTo \n\n Round a floating point number to a specified number of digits.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#roundFloat","title":"Float.roundFloat","content":"Float.roundFloat \nroundFloat \n\n Round a floating point number to the number of digits specified by\n \u003Cc\u003EFloat.DigitPrecision\u003C/c\u003E. By default, this rounds a floating point value\n to 10 digits.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#interpolateFrom","title":"Float.interpolateFrom","content":"Float.interpolateFrom \ninterpolateFrom \n\n Interpolate from the first value to the second, based on a parameter\n that ranges from zero to one. Passing a parameter value of zero will\n return the start value and passing a parameter value of one will return\n the end value.\n\n \u003Cexample\u003E\n  \u003Ccode lang=\u0022fsharp\u0022\u003E\n     Float.interpolateFrom 5 10 0\n     // 5\n     Float.interpolateFrom 5 10 1\n     // 10\n     Float.interpolateFrom 5 10 0.6\n     // 8\n \u003C/code\u003E\n\u003C/example\u003E\u003Cexample\u003E\n The end value can be less than the start value:\n \u003Ccode lang=\u0022fsharp\u0022\u003E\n     Float.interpolateFrom 10 5 0.1\n     // 9.5\n \u003C/code\u003E\u003C/example\u003E\u003Cexample\u003E\n Parameter values less than zero or greater than one can be used to\n extrapolate:\n \u003Ccode lang=\u0022fsharp\u0022\u003E\n     Float.interpolateFrom 5 10 1.5\n     // 12.5\n     Float.interpolateFrom 5 10 -0.5\n     // 2.5\n     Float.interpolateFrom 10 5 -0.2\n     // 11\n \u003C/code\u003E\u003C/example\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html","title":"Force","content":"Force \n\n A \u003Ccode\u003EForce\u003C/code\u003E value represents a force in newtons, pounds force etc. It is\n stored as a number of newtons.\n  \nForce.newtons \nnewtons \nForce.inNewtons \ninNewtons \nForce.kilonewtons \nkilonewtons \nForce.inKilonewtons \ninKilonewtons \nForce.meganewtons \nmeganewtons \nForce.inMeganewtons \ninMeganewtons \nForce.pounds \npounds \nForce.inPounds \ninPounds \nForce.kips \nkips \nForce.inKips \ninKips"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#newtons","title":"Force.newtons","content":"Force.newtons \nnewtons \n\n Construct a force value from a number of newtons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inNewtons","title":"Force.inNewtons","content":"Force.inNewtons \ninNewtons \n\n Convert a force value to a number of newtons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#kilonewtons","title":"Force.kilonewtons","content":"Force.kilonewtons \nkilonewtons \n\n Construct a force value from a number of kilonewtons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inKilonewtons","title":"Force.inKilonewtons","content":"Force.inKilonewtons \ninKilonewtons \n\n Convert a force value to a number of kilonewtons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#meganewtons","title":"Force.meganewtons","content":"Force.meganewtons \nmeganewtons \n\n Construct a force value from a number of meganewtons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inMeganewtons","title":"Force.inMeganewtons","content":"Force.inMeganewtons \ninMeganewtons \n\n Convert a force value to a number of meganewtons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#pounds","title":"Force.pounds","content":"Force.pounds \npounds \n\n Construct a force value from a number of pounds force. One pound force is\n the force required to accelerate one pound mass at a rate of one gee.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inPounds","title":"Force.inPounds","content":"Force.inPounds \ninPounds \n\n Convert a force value to a number of pounds force.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#kips","title":"Force.kips","content":"Force.kips \nkips \n\n Construct a force value from a number of kips (kilopounds force).\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n    Force.kips 2\n    --\u0026gt; Force.pounds 2000\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inKips","title":"Force.inKips","content":"Force.inKips \ninKips \n\n Convert a force value to a number of kips.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html","title":"Illuminance","content":"Illuminance \n\u003Ca href=\u0022https://en.wikipedia.org/wiki/Illuminance\u0022\u003EIlluminance\u003C/a\u003E is a\n measure of how much light is striking a surface:\n luminous flux per unit area. It is measured in\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Lux\u0022\u003Elux\u003C/a\u003E \nIlluminance.lux \nlux \nIlluminance.inLux \ninLux \nIlluminance.footCandles \nfootCandles \nIlluminance.inFootCandles \ninFootCandles"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#lux","title":"Illuminance.lux","content":"Illuminance.lux \nlux \n\n Construct an illuminance value from a number of lux. One lux is equal to one\n lumen per square meter. See\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Lux#Illuminance\u0022\u003Ehere\u003C/a\u003E\n for a table of illuminance values in lux for common environments.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#inLux","title":"Illuminance.inLux","content":"Illuminance.inLux \ninLux \n\n Convert an illuminance value to a number of lux.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#footCandles","title":"Illuminance.footCandles","content":"Illuminance.footCandles \nfootCandles \n\n Construct an illuminance value from a number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Foot-candle\u0022\u003Efoot-candles\u003C/a\u003E.\n One foot-candle is equal to one lumen per\n square foot.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#inFootCandles","title":"Illuminance.inFootCandles","content":"Illuminance.inFootCandles \ninFootCandles \n\n Convert an illuminance value to a number of foot-candles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html","title":"Inductance","content":"Inductance \n\n An \u003Ccode\u003EInductance\u003C/code\u003E value represents an electrical inductance in henries.\n  \nInductance.henries \nhenries \nInductance.inHenries \ninHenries \nInductance.millihenries \nmillihenries \nInductance.inMillihenries \ninMillihenries \nInductance.microhenries \nmicrohenries \nInductance.inMicrohenries \ninMicrohenries \nInductance.nanohenries \nnanohenries \nInductance.inNanohenries \ninNanohenries \nInductance.kilohenries \nkilohenries \nInductance.inKilohenries \ninKilohenries"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#henries","title":"Inductance.henries","content":"Inductance.henries \nhenries \n\n Construct an inductance from a number of henries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inHenries","title":"Inductance.inHenries","content":"Inductance.inHenries \ninHenries \n\n Convert an inductance to a number of henries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#millihenries","title":"Inductance.millihenries","content":"Inductance.millihenries \nmillihenries \n\n Construct an inductance from a number of millihenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inMillihenries","title":"Inductance.inMillihenries","content":"Inductance.inMillihenries \ninMillihenries \n\n Convert an inductance to a number of millihenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#microhenries","title":"Inductance.microhenries","content":"Inductance.microhenries \nmicrohenries \n\n Construct an inductance from a number of microhenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inMicrohenries","title":"Inductance.inMicrohenries","content":"Inductance.inMicrohenries \ninMicrohenries \n\n Convert an inductance to a number of microhenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#nanohenries","title":"Inductance.nanohenries","content":"Inductance.nanohenries \nnanohenries \n\n Construct an inductance from a number of nanohenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inNanohenries","title":"Inductance.inNanohenries","content":"Inductance.inNanohenries \ninNanohenries \n\n Convert an inductance to a number of nanohenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#kilohenries","title":"Inductance.kilohenries","content":"Inductance.kilohenries \nkilohenries \n\n Construct an inductance from a number of kilohenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inKilohenries","title":"Inductance.inKilohenries","content":"Inductance.inKilohenries \ninKilohenries \n\n Convert an inductance to a number of kilohenries.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html","title":"Interval","content":"Interval \n\n These functions let you do math with \u003Ccode\u003EInterval\u003C/code\u003E values, following the rules of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Interval_arithmetic\u0022\u003Einterval arithmetic\u003C/a\u003E.\n  \nInterval.unit \nunit \nInterval.from \nfrom \nInterval.fromEndpoints \nfromEndpoints \nInterval.singleton \nsingleton \nInterval.endpoints \nendpoints \nInterval.minValue \nminValue \nInterval.maxValue \nmaxValue \nInterval.midpoint \nmidpoint \nInterval.width \nwidth \nInterval.isSingleton \nisSingleton \nInterval.union \nunion \nInterval.intersection \nintersection \nInterval.negate \nnegate \nInterval.plus \nplus \nInterval.minus \nminus \nInterval.difference \ndifference \nInterval.multiplyBy \nmultiplyBy \nInterval.product \nproduct \nInterval.divideBy \ndivideBy \nInterval.half \nhalf \nInterval.twice \ntwice \nInterval.plusInterval \nplusInterval \nInterval.minusInterval \nminusInterval \nInterval.times \ntimes \nInterval.timesUnitless \ntimesUnitless \nInterval.timesInterval \ntimesInterval \nInterval.timesUnitlessInterval \ntimesUnitlessInterval \nInterval.reciprocal \nreciprocal \nInterval.abs \nabs \nInterval.unsafeSquared \nunsafeSquared \nInterval.squared \nsquared \nInterval.squaredUnitless \nsquaredUnitless \nInterval.unsafeCubed \nunsafeCubed \nInterval.cubed \ncubed \nInterval.cubedUnitless \ncubedUnitless \nInterval.cosIncludesMax \ncosIncludesMax \nInterval.cosIncludesMinMax \ncosIncludesMinMax \nInterval.sinIncludesMinMax \nsinIncludesMinMax \nInterval.sin \nsin \nInterval.cos \ncos \nInterval.interpolate \ninterpolate \nInterval.interpolationParameter \ninterpolationParameter \nInterval.contains \ncontains \nInterval.intersects \nintersects \nInterval.isContainedIn \nisContainedIn \nInterval.hull \nhull \nInterval.hull3 \nhull3 \nInterval.hullN \nhullN \nInterval.hullOf \nhullOf \nInterval.hullOfN \nhullOfN \nInterval.aggregate \naggregate \nInterval.aggregate3 \naggregate3 \nInterval.aggregateN \naggregateN \nInterval.aggregateOf \naggregateOf \nInterval.aggregateOfN \naggregateOfN"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#unit","title":"Interval.unit","content":"Interval.unit \nunit \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#from","title":"Interval.from","content":"Interval.from \nfrom \n\n Construct an interval from two given values.\n\n The values should be given in order, but will be swapped if needed to\n ensure a valid interval is created.\n\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.from (3, 2)\n     --\u0026gt; Interval (2, 3)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#fromEndpoints","title":"Interval.fromEndpoints","content":"Interval.fromEndpoints \nfromEndpoints \n\n Construct an interval from it\u0027s endpoints.\n\n The values should be given in order, but will be swapped if needed to\n ensure a valid interval is created.\n\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.fromEndpoints (3, 2)\n     --\u0026gt; Interval (2, 3)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#singleton","title":"Interval.singleton","content":"Interval.singleton \nsingleton \n\n Construct a zero width interval containing a single value\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#endpoints","title":"Interval.endpoints","content":"Interval.endpoints \nendpoints \n\n Get the endpoints of an interval (its minimum and maximum values) as a\n tuple. The first value will always be less than or equal to the second.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let ( minValue, maxValue ) =\n         Interval.endpoints someInterval\u003C/code\u003E\u003C/pre\u003E\n For any interval,\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.endpoints interval\u003C/code\u003E\u003C/pre\u003E\n is equivalent to (but more efficient than)\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     ( Interval.minValue interval\n     , Interval.maxValue interval\n     )\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#minValue","title":"Interval.minValue","content":"Interval.minValue \nminValue \n\u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n Get the minimum value of an interval.\n     Interval.minValue (Interval.from 1 3)\n     --\u0026gt; 1\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#maxValue","title":"Interval.maxValue","content":"Interval.maxValue \nmaxValue \n\n Get the maximum value of an interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.maxValue (Interval.from 1 3)\n     --\u0026gt; 3\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#midpoint","title":"Interval.midpoint","content":"Interval.midpoint \nmidpoint \n\n Get the midpoint of an interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.midpoint (Interval.from 1 4)\n     --\u0026gt; 2.5\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#width","title":"Interval.width","content":"Interval.width \nwidth \n\n Get the width of an interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.width (Interval.from 1 5)\n     --\u0026gt; 4\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#isSingleton","title":"Interval.isSingleton","content":"Interval.isSingleton \nisSingleton \n\n Check if the interval is a singleton (the minimum and maximum values are the\n same).\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.isSingleton (Interval.from 2 2)\n     --\u0026gt; True\n     Interval.isSingleton (Interval.from 2 3)\n     --\u0026gt; False\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#union","title":"Interval.union","content":"Interval.union \nunion \n\n Construct an interval containing both of the given intervals.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let firstInterval =\n         Interval.from 1 2\n     let secondInterval =\n         Interval.from 3 6\n     let Interval.union firstInterval secondInterval\n     --\u0026gt; Interval.from 1 6\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#intersection","title":"Interval.intersection","content":"Interval.intersection \nintersection \n\n Attempt to construct an interval containing all the values common to both\n given intervals.\n\n If the intervals do not intersect, returns \u003Ccode\u003ENothing\u003C/code\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.intersection\n         (Interval.from 1 3)\n         (Interval.from 2 5)\n     --\u0026gt; Some (Interval.from 2 3)\n     Interval.intersection\n         (Interval.from 1 3)\n         (Interval.from 4 7)\n     --\u0026gt; None\u003C/code\u003E\u003C/pre\u003E\n\n If the two intervals just touch, a singleton interval will be returned:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.intersection\n         (Interval.from 1 3)\n         (Interval.from 3 5)\n     --\u0026gt; Some (Interval.singleton 3)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#negate","title":"Interval.negate","content":"Interval.negate \nnegate \n\n Negate an interval. Note that this will flip the order of the endpoints.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Interval.negate (Interval.from 2 3)\n    --\u0026gt; Interval.from -3 -2\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#plus","title":"Interval.plus","content":"Interval.plus \nplus \n\n Add the given amount to an interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Interval.from -1 5 |\u0026gt; Interval.add 3\n    --\u0026gt; Interval.from 2 8\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#minus","title":"Interval.minus","content":"Interval.minus \nminus \n\n Subtract the given amount from an interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Interval.from -1 5 |\u0026gt; Interval.subtract 3\n    --\u0026gt; Interval.from -4 2\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#difference","title":"Interval.difference","content":"Interval.difference \ndifference \n\n Subtract an interval from the given amount. So if you wanted to compute\n \u003Ccode\u003Einterval - quantity\u003C/code\u003E you would write\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     interval |\u0026gt; Interval.minus quantity\u003C/code\u003E\u003C/pre\u003E\n but if you wanted to compute \u003Ccode\u003Equantity - interval\u003C/code\u003E then you would write\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.difference quantity interval\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#multiplyBy","title":"Interval.multiplyBy","content":"Interval.multiplyBy \nmultiplyBy \n\n Multiply an interval by a given value. Note that this will flip the order\n of the interval\u0027s endpoints if the given value is negative.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.multiplyBy 5 (Interval.from 2 3)\n     --\u0026gt; Interval.from 10 15\n     Interval.multiplyBy -2 (Interval.from 2 3)\n     --\u0026gt; Interval.from -6 -4\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#product","title":"Interval.product","content":"Interval.product \nproduct \n\n Multiply an \u003Ccode\u003EInterval\u003C/code\u003E by a \u003Ccode\u003EQuantity\u003C/code\u003E, for example\n     Interval.product quantity interval\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#divideBy","title":"Interval.divideBy","content":"Interval.divideBy \ndivideBy \n\n Divide an interval by a given value. Note that this will flip the order\n of the interval\u0027s endpoints if the given value is negative.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.divideBy 2 (Interval.from 2 3)\n     --\u0026gt; Interval.from 1 1.5\n     Interval.divideBy -2 (Interval.from 2 3)\n     --\u0026gt; Interval.from -1.5 -1\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#half","title":"Interval.half","content":"Interval.half \nhalf \n\n Shorthand for \u003Ccode\u003EmultiplyBy 0.5\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#twice","title":"Interval.twice","content":"Interval.twice \ntwice \n\n Shorthand for \u003Ccode\u003EmultiplyBy 2\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#plusInterval","title":"Interval.plusInterval","content":"Interval.plusInterval \nplusInterval \n\n Add two intervals together.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.from 5 10\n         |\u0026gt; Interval.plus (Interval.from 2 3)\n     --\u0026gt; Interval.from 7 13\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#minusInterval","title":"Interval.minusInterval","content":"Interval.minusInterval \nminusInterval \n\n Subtract the first interval from the second. This means that \u003Ccode\u003Eminus\u003C/code\u003E makes\n the most sense when using \u003Ccode\u003E|\u0026gt;\u003C/code\u003E:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.from 5 10\n         |\u0026gt; Interval.minus (Interval.from 2 3)\n     --\u0026gt; Interval.from 2 8\u003C/code\u003E\u003C/pre\u003E\n Without the pipe operator, the above would be written as:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.minus (Interval.from 2 3)\n         (Interval.from 5 10)\n     --\u0026gt; Interval.from 2 8\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#times","title":"Interval.times","content":"Interval.times \ntimes \n\n Multiply an \u003Ccode\u003EInterval\u003C/code\u003E by a \u003Ccode\u003EQuantity\u003C/code\u003E, for example\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     interval |\u0026gt; Interval.times quantity\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#timesUnitless","title":"Interval.timesUnitless","content":"Interval.timesUnitless \ntimesUnitless \n\n Multiply an \u003Ccode\u003EInterval\u003C/code\u003E by a unitless \u003Ccode\u003EQuantity\u003C/code\u003E. See the documentation for\n \u003Ccode\u003EQuantity.timesUnitless\u003C/code\u003E for more details.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#timesInterval","title":"Interval.timesInterval","content":"Interval.timesInterval \ntimesInterval \n\n Multiply the two given intervals.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.from 10 12\n         |\u0026gt; Interval.times\n             (Interval.from 5 6)\n     --\u0026gt; Interval.from 50 72\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#timesUnitlessInterval","title":"Interval.timesUnitlessInterval","content":"Interval.timesUnitlessInterval \ntimesUnitlessInterval \n\n Combination of \u003Ccode\u003EQuantity.timesInterval\u003C/code\u003E and \u003Ccode\u003EQuantity.timesUnitless\u003C/code\u003E\n for when one of the intervals in a product is unitless.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#reciprocal","title":"Interval.reciprocal","content":"Interval.reciprocal \nreciprocal \n\n Find the inverse of a unitless interval:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.reciprocal \u0026lt;|\n         Interval.fromEndpoints\n             ( Quantity.float 2\n             , Quantity.float 3\n             )\n     --\u0026gt; Interval.fromEndpoints\n     --\u0026gt;     ( Quantity.float 0.333\n     --\u0026gt;     , Quantity.float 0.500\n     --\u0026gt;     )\u003C/code\u003E\u003C/pre\u003E\n\n Avoid using this function whenever possible, since it\u0027s very easy to get\n infinite intervals as a result:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.reciprocal \u0026lt;|\n         Interval.fromEndpoints\n             ( Quantity.float -1\n             , Quantity.float 2\n             )\n     --\u0026gt; Interval.fromEndpoints\n     --\u0026gt;     ( Quantity.negativeInfinity\n     --\u0026gt;     , Quantity.negativeInfinity\n     --\u0026gt;     )\u003C/code\u003E\u003C/pre\u003E\n\n Since zero is contained in the above interval, the range of possible reciprocals\n ranges from negative to positive infinity!\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#abs","title":"Interval.abs","content":"Interval.abs \nabs \n\n Get the absolute value of an interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.abs \u0026lt;|\n         Interval.fromEndpoints\n             ( Length.meters -3  Length.meters 2 )\n     --\u0026gt; Interval.fromEndpoints\n     --\u0026gt;     (Length.meters 0) (Length.meters 3)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#unsafeSquared","title":"Interval.unsafeSquared","content":"Interval.unsafeSquared \nunsafeSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#squared","title":"Interval.squared","content":"Interval.squared \nsquared \n\n Get the square of an interval.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#squaredUnitless","title":"Interval.squaredUnitless","content":"Interval.squaredUnitless \nsquaredUnitless \n\n Specialized version of \u003Ccode\u003Esquared\u003C/code\u003E for unitless intervals.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#unsafeCubed","title":"Interval.unsafeCubed","content":"Interval.unsafeCubed \nunsafeCubed \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#cubed","title":"Interval.cubed","content":"Interval.cubed \ncubed \n\n Get the cube of an interval.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#cubedUnitless","title":"Interval.cubedUnitless","content":"Interval.cubedUnitless \ncubedUnitless \n\n Specialized version of \u003Ccode\u003Ecubed\u003C/code\u003E for unitless intervals.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#cosIncludesMax","title":"Interval.cosIncludesMax","content":"Interval.cosIncludesMax \ncosIncludesMax \n\n The maximum of \u003Ccode\u003Ecos(x) is x = 2 pi \\* k\u003C/code\u003E for every integer k.\n If \u003Ccode\u003EminValue\u003C/code\u003E and \u003Ccode\u003EmaxValue\u003C/code\u003E are in different branches\n (meaning different values of k), then the interval must pass through\n \u003Ccode\u003E2 pi \\* k\u003C/code\u003E, which means the interval must include the maximum value.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#cosIncludesMinMax","title":"Interval.cosIncludesMinMax","content":"Interval.cosIncludesMinMax \ncosIncludesMinMax \n\u003Ccode\u003Ecos(x \u002B pi) = -cos(x)\u003C/code\u003E, therefore if \u003Ccode\u003Ecos(interval \u002B pi)\u003C/code\u003E includes the maximum,\n that means \u003Ccode\u003Ecos(interval)\u003C/code\u003E includes the minimum.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#sinIncludesMinMax","title":"Interval.sinIncludesMinMax","content":"Interval.sinIncludesMinMax \nsinIncludesMinMax \n\u003Ccode\u003Ecos(x - pi/2) = sin(x)\u003C/code\u003E, therefore if \u003Ccode\u003Ecos(interval - pi/2)\u003C/code\u003E includes\n the maximum/minimum, that means \u003Ccode\u003Esin(interval)\u003C/code\u003E includes the maximum/minimum\n accordingly.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#sin","title":"Interval.sin","content":"Interval.sin \nsin \n\n Get the image of \u003Ccode\u003Esin(x)\u003C/code\u003E applied on the interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.sin (Interval.from 0 (degrees 45))\n     --\u0026gt; Interval.from 0 0.7071\n     Interval.sin (Interval.from 0 pi)\n     --\u0026gt; Interval.from 0 1\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#cos","title":"Interval.cos","content":"Interval.cos \ncos \n\n  Get the image of \u003Ccode\u003Ecos(x)\u003C/code\u003E applied on the interval.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.cos (Interval.from 0 (degrees 45))\n     --\u0026gt; Interval.from 0.7071 1\n     Interval.cos (Interval.from 0 pi)\n     --\u0026gt; Interval.from -1 1\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#interpolate","title":"Interval.interpolate","content":"Interval.interpolate \ninterpolate \n\n Interpolate between an interval\u0027s endpoints based on a parameter value that\n will generally be between 0.0 and 1.0. A value of 0.0 corresponds to the minimum\n value of the interval, a value of 0.5 corresponds to its midpoint and a value of\n 1.0 corresponds to its maximum value:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.interpolate (Interval.from 1 5) 0\n     --\u0026gt; 1\n     Interval.interpolate (Interval.from 1 5) 0.75\n     --\u0026gt; 4\u003C/code\u003E\u003C/pre\u003E\n Values less than 0.0 or greater than 1.0 can be used to extrapolate:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.interpolate (Interval.from 1 5) 1.5\n     --\u0026gt; 7\u003C/code\u003E\u003C/pre\u003E\n Note that because of how \u003Ccode\u003EInterval.from\u003C/code\u003E works, the interpolation is in\n fact from the minimum value to the maximum, _not_ \u0022from the first\n \u003Ccode\u003EInterval.from\u003C/code\u003E argument to the second\u0022:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.interpolate (Interval.from 0 10) 0.2\n     --\u0026gt; 2\n     Interval.interpolate (Interval.from 10 0) 0.2\n     --\u0026gt; 2 // not 8!\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#interpolationParameter","title":"Interval.interpolationParameter","content":"Interval.interpolationParameter \ninterpolationParameter \n\n Given an interval and a given value, determine the corresponding\n interpolation parameter (the parameter that you would pass to\n \u003Ccode\u003EInterval.interpolate\u003C/code\u003E to get the given value):\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.interpolationParameter\n         (Interval.from 10 15)\n         12\n     --\u0026gt; 0.4\u003C/code\u003E\u003C/pre\u003E\n\n The result will be between 0 and 1 if (and only if) the given value is within\n the given interval:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.interpolationParameter\n         (Interval.from 10 15)\n         18\n     --\u0026gt; 1.6\n     Interval.interpolationParameter\n         (Interval.from 10 15)\n         9\n     --\u0026gt; -0.2\u003C/code\u003E\u003C/pre\u003E\n\n This is the inverse of \u003Ccode\u003Einterpolate\u003C/code\u003E; for any non-zero-width \u003Ccode\u003Einterval\u003C/code\u003E,\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.interpolationParameter interval value\n         |\u0026gt; Interval.interpolate interval\u003C/code\u003E\u003C/pre\u003E\n should be equal to the original \u003Ccode\u003Evalue\u003C/code\u003E (within numerical round off).\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#contains","title":"Interval.contains","content":"Interval.contains \ncontains \n\n Test if a value is contained with a particular interval.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#intersects","title":"Interval.intersects","content":"Interval.intersects \nintersects \n\n Check if two intervals touch or overlap (have any values in common).\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.from -5 5\n         |\u0026gt; Interval.intersects (Interval.from 0 10)\n     --\u0026gt; True\n     Interval.from -5 5\n         |\u0026gt; Interval.intersects (Interval.from 10 20)\n     --\u0026gt; False\u003C/code\u003E\u003C/pre\u003Ej\n\n Intervals that just touch each other are considered to intersect (this is\n consistent with \u003Ccode\u003Eintersection\u003C/code\u003E which will return a zero-width interval for the\n intersection of two just-touching intervals):\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.from -5 5\n         |\u0026gt; Interval.intersects (Interval.from 5 10)\n     --\u0026gt; True\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#isContainedIn","title":"Interval.isContainedIn","content":"Interval.isContainedIn \nisContainedIn \n\n Check if the second interval is fully contained in the first.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.from -5 5\n         |\u0026gt; Interval.isContainedIn (Interval.from 0 10)\n     --\u0026gt; False\n     Interval.from -5 5\n         |\u0026gt; Interval.isContainedIn (Interval.from -10 10)\n     --\u0026gt; True\u003C/code\u003E\u003C/pre\u003E\n\n Be careful with the argument order! If not using the \u003Ccode\u003E|\u0026gt;\u003C/code\u003E operator, the second\n example would be written as:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.isContainedIn (Interval.from -10 10)\n         (Interval.from -5 5)\n     --\u0026gt; True\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#hull","title":"Interval.hull","content":"Interval.hull \nhull \n\n Find the interval containing one or more input values:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Interval.hull 5 [ 3; 2; 4 ]\n    --\u0026gt; Interval.from 2 5\u003C/code\u003E\u003C/pre\u003E\n See also \u003Ccode\u003EInterval.hullN\u003C/code\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#hull3","title":"Interval.hull3","content":"Interval.hull3 \nhull3 \n\n Construct an interval containing the three given values;\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.hull3 a b c\u003C/code\u003E\u003C/pre\u003E\n is equivalent to\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.hull a [ b; c ]\u003C/code\u003E\u003C/pre\u003E\n but is more efficient. (If you\u0027re looking for a \u003Ccode\u003EInterval.hull2\u003C/code\u003E function, \u003Ccode\u003EInterval.from\u003C/code\u003E\n should do what you want.)\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#hullN","title":"Interval.hullN","content":"Interval.hullN \nhullN \n\n Attempt to construct an interval containing all _N_ values in the given\n list. If the list is empty, returns \u003Ccode\u003ENothing\u003C/code\u003E. If you know you have at least one\n value, you can use \u003Ccode\u003EInterval.hull\u003C/code\u003E instead.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.hullN [ 2; 1; 3 ]\n     --\u0026gt; Just (Interval.from 1 3)\n     Interval.hullN [ -3 ]\n     --\u0026gt; Just (Interval.singleton -3)\n     Interval.hullN []\n     --\u0026gt; Nothing\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#hullOf","title":"Interval.hullOf","content":"Interval.hullOf \nhullOf \n\n Like \u003Ccode\u003EQuantity.hull\u003C/code\u003E, but lets you work on any kind of item as long as a\n number can be extracted from it. For example, if you had\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     type Person =\n         { Name : string\n           Age : float\n         }\u003C/code\u003E\u003C/pre\u003E\n\n then given some people you could find their range of ages as an \u003Ccode\u003EInterval\u003C/code\u003E\n using\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.hullOf (fun person -\u0026gt; person.Age)\n         firstPerson\n         [ secondPerson\n           thirdPerson\n           fourthPerson\n         ]\u003C/code\u003E\u003C/pre\u003E\n\n See also \u003Ccode\u003EInterval.hullOfN\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#hullOfN","title":"Interval.hullOfN","content":"Interval.hullOfN \nhullOfN \n\n Combination of \u003Ccode\u003EInterval.hullOf\u003C/code\u003E and \u003Ccode\u003EInterval.hullN\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#aggregate","title":"Interval.aggregate","content":"Interval.aggregate \naggregate \n\n Construct an interval containing one or more given intervals:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.aggregate\n         (Interval.singleton 2)\n         [ Interval.singleton 4\n           Interval.singleton 3\n         ]\n     --\u0026gt; Interval.from 2 4\u003C/code\u003E\u003C/pre\u003E\n\n Works much like \u003Ccode\u003EInterval.hull\u003C/code\u003E. See also \u003Ccode\u003EInterval.aggregateN\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#aggregate3","title":"Interval.aggregate3","content":"Interval.aggregate3 \naggregate3 \n\n Special case of \u003Ccode\u003EInterval.aggregate\u003C/code\u003E for the case of three intervals;\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.aggregate3 first second third\u003C/code\u003E\u003C/pre\u003E\n is equivalent to\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Interval.aggregate first [ second; third ]\u003C/code\u003E\u003C/pre\u003E\n but is more efficient. (If you\u0027re looking for an \u003Ccode\u003EInterval.aggregate2\u003C/code\u003E function,\n \u003Ccode\u003EInterval.union\u003C/code\u003E should do what you want.)\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#aggregateN","title":"Interval.aggregateN","content":"Interval.aggregateN \naggregateN \n\n  Attempt to construct an interval containing all of the intervals in the given\n list. If the list is empty, returns \u003Ccode\u003ENone\u003C/code\u003E. If you know you have at least one\n interval, you can use \u003Ccode\u003EInterval.aggregate\u003C/code\u003E instead.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#aggregateOf","title":"Interval.aggregateOf","content":"Interval.aggregateOf \naggregateOf \n\n Like \u003Ccode\u003EInterval.aggregate\u003C/code\u003E], but lets you work on any kind of item as\n long as an interval can be generated from it similar to \u003Ccode\u003EInterval.hullOf\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-intervalmodule.html#aggregateOfN","title":"Interval.aggregateOfN","content":"Interval.aggregateOfN \naggregateOfN \n\n Combination of \u003Ccode\u003EInterval.aggregateOf\u003C/code\u003E and \u003Ccode\u003EInterval.aggregateN\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html","title":"Length","content":"Length \n\n A \u003Ccode\u003ELength\u003C/code\u003E represents a length in meters, feet, centimeters, miles etc. It\n is stored as a number of meters.\n  \nLength.apply \napply \nLength.midpoint \nmidpoint \nLength.meters \nmeters \nLength.inMeters \ninMeters \nLength.angstroms \nangstroms \nLength.inAngstroms \ninAngstroms \nLength.nanometers \nnanometers \nLength.inNanometers \ninNanometers \nLength.microns \nmicrons \nLength.inMicrons \ninMicrons \nLength.millimeters \nmillimeters \nLength.inMillimeters \ninMillimeters \nLength.centimeters \ncentimeters \nLength.inCentimeters \ninCentimeters \nLength.kilometers \nkilometers \nLength.inKilometers \ninKilometers \nLength.thou \nthou \nLength.inThou \ninThou \nLength.inches \ninches \nLength.inInches \ninInches \nLength.feet \nfeet \nLength.inFeet \ninFeet \nLength.yards \nyards \nLength.inYards \ninYards \nLength.miles \nmiles \nLength.inMiles \ninMiles \nLength.cssPixels \ncssPixels \nLength.inCssPixels \ninCssPixels \nLength.points \npoints \nLength.inPoints \ninPoints \nLength.picas \npicas \nLength.inPicas \ninPicas \nLength.astronomicalUnits \nastronomicalUnits \nLength.inAstronomicalUnits \ninAstronomicalUnits \nLength.parsecs \nparsecs \nLength.inParsecs \ninParsecs \nLength.lightYears \nlightYears \nLength.inLightYears \ninLightYears \nLength.nanometer \nnanometer \nLength.micron \nmicron \nLength.millimeter \nmillimeter \nLength.centimeter \ncentimeter \nLength.kilometer \nkilometer \nLength.oneThou \noneThou \nLength.inch \ninch \nLength.foot \nfoot \nLength.yard \nyard \nLength.mile \nmile \nLength.astronomicalUnit \nastronomicalUnit \nLength.parsec \nparsec \nLength.lightYear \nlightYear \nLength.cssPixel \ncssPixel \nLength.point \npoint \nLength.pica \npica"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#apply","title":"Length.apply","content":"Length.apply \napply \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#midpoint","title":"Length.midpoint","content":"Length.midpoint \nmidpoint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#meters","title":"Length.meters","content":"Length.meters \nmeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMeters","title":"Length.inMeters","content":"Length.inMeters \ninMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#angstroms","title":"Length.angstroms","content":"Length.angstroms \nangstroms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inAngstroms","title":"Length.inAngstroms","content":"Length.inAngstroms \ninAngstroms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#nanometers","title":"Length.nanometers","content":"Length.nanometers \nnanometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inNanometers","title":"Length.inNanometers","content":"Length.inNanometers \ninNanometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#microns","title":"Length.microns","content":"Length.microns \nmicrons \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMicrons","title":"Length.inMicrons","content":"Length.inMicrons \ninMicrons \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#millimeters","title":"Length.millimeters","content":"Length.millimeters \nmillimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMillimeters","title":"Length.inMillimeters","content":"Length.inMillimeters \ninMillimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#centimeters","title":"Length.centimeters","content":"Length.centimeters \ncentimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inCentimeters","title":"Length.inCentimeters","content":"Length.inCentimeters \ninCentimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#kilometers","title":"Length.kilometers","content":"Length.kilometers \nkilometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inKilometers","title":"Length.inKilometers","content":"Length.inKilometers \ninKilometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#thou","title":"Length.thou","content":"Length.thou \nthou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inThou","title":"Length.inThou","content":"Length.inThou \ninThou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inches","title":"Length.inches","content":"Length.inches \ninches \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inInches","title":"Length.inInches","content":"Length.inInches \ninInches \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#feet","title":"Length.feet","content":"Length.feet \nfeet \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inFeet","title":"Length.inFeet","content":"Length.inFeet \ninFeet \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#yards","title":"Length.yards","content":"Length.yards \nyards \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inYards","title":"Length.inYards","content":"Length.inYards \ninYards \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#miles","title":"Length.miles","content":"Length.miles \nmiles \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMiles","title":"Length.inMiles","content":"Length.inMiles \ninMiles \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#cssPixels","title":"Length.cssPixels","content":"Length.cssPixels \ncssPixels \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inCssPixels","title":"Length.inCssPixels","content":"Length.inCssPixels \ninCssPixels \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#points","title":"Length.points","content":"Length.points \npoints \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inPoints","title":"Length.inPoints","content":"Length.inPoints \ninPoints \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#picas","title":"Length.picas","content":"Length.picas \npicas \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inPicas","title":"Length.inPicas","content":"Length.inPicas \ninPicas \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#astronomicalUnits","title":"Length.astronomicalUnits","content":"Length.astronomicalUnits \nastronomicalUnits \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inAstronomicalUnits","title":"Length.inAstronomicalUnits","content":"Length.inAstronomicalUnits \ninAstronomicalUnits \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#parsecs","title":"Length.parsecs","content":"Length.parsecs \nparsecs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inParsecs","title":"Length.inParsecs","content":"Length.inParsecs \ninParsecs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#lightYears","title":"Length.lightYears","content":"Length.lightYears \nlightYears \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inLightYears","title":"Length.inLightYears","content":"Length.inLightYears \ninLightYears \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#nanometer","title":"Length.nanometer","content":"Length.nanometer \nnanometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#micron","title":"Length.micron","content":"Length.micron \nmicron \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#millimeter","title":"Length.millimeter","content":"Length.millimeter \nmillimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#centimeter","title":"Length.centimeter","content":"Length.centimeter \ncentimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#kilometer","title":"Length.kilometer","content":"Length.kilometer \nkilometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#oneThou","title":"Length.oneThou","content":"Length.oneThou \noneThou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inch","title":"Length.inch","content":"Length.inch \ninch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#foot","title":"Length.foot","content":"Length.foot \nfoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#yard","title":"Length.yard","content":"Length.yard \nyard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#mile","title":"Length.mile","content":"Length.mile \nmile \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#astronomicalUnit","title":"Length.astronomicalUnit","content":"Length.astronomicalUnit \nastronomicalUnit \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#parsec","title":"Length.parsec","content":"Length.parsec \nparsec \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#lightYear","title":"Length.lightYear","content":"Length.lightYear \nlightYear \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#cssPixel","title":"Length.cssPixel","content":"Length.cssPixel \ncssPixel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#point","title":"Length.point","content":"Length.point \npoint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#pica","title":"Length.pica","content":"Length.pica \npica \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html","title":"Luminance","content":"Luminance \n\u003Ca href=\u0022https://en.wikipedia.org/wiki/Luminance\u0022\u003ELuminance\u003C/a\u003E\n is \u003Ca href=\u0022https://en.wikipedia.org/wiki/Candela_per_square_metre\u0022\u003Eluminous intensity\u003C/a\u003E per\n unit area or equivalently\n \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-illuminance.html\u0022\u003EIlluminance\u003C/a\u003E per\n \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-solidangle.html\u0022\u003ESolidAngle\u003C/a\u003E,\n and is measured in \u003Ca href=\u0022https://en.wikipedia.org/wiki/Candela_per_square_metre\u0022\u003Enits\u003C/a\u003E\n (or, to use standard SI terminology, candelas per square meter\n - the two terms are equivalent).\n  \nLuminance.nits \nnits \nLuminance.inNits \ninNits \nLuminance.footLamberts \nfootLamberts \nLuminance.inFootLamberts \ninFootLamberts"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#nits","title":"Luminance.nits","content":"Luminance.nits \nnits \n\n Construct a luminance value from a number of nits. One nit is equal to one\n \u003Cb\u003Ecandela\u003C/b\u003E per square meter, or equivalently one \u003Cb\u003Elux\u003C/b\u003E per \u003Cb\u003Esteradian\u003C/b\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#inNits","title":"Luminance.inNits","content":"Luminance.inNits \ninNits \n\n Convert a luminance value to a number of nits.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#footLamberts","title":"Luminance.footLamberts","content":"Luminance.footLamberts \nfootLamberts \n\n Construct a luminance value from a number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Foot-lambert\u0022\u003Efoot-lamberts\u003C/a\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#inFootLamberts","title":"Luminance.inFootLamberts","content":"Luminance.inFootLamberts \ninFootLamberts \n\n Convert a luminance value to a number of foot-lamberts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousfluxmodule.html","title":"LuminousFlux","content":"LuminousFlux \n\n A \u003Ccode\u003ELuminousFlux\u003C/code\u003E value represents the total amount of light emitted by a\n light source. You can think of it as roughly \u0022photons per second\u0022, although\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Luminous_flux\u0022\u003Eit\u0027s a bit more complicated than that\u003C/a\u003E.\n Luminous flux is stored in \u003Ca href=\u0022https://en.wikipedia.org/wiki/Lumen_(unit)\u0022\u003Elumens\u003C/a\u003E. It\u0027s often used to describe the\n total output of a light bulb; for example, a 50 watt incandescent bulb and a 6\n watt LED bulb might each have an output of 400 lumens.\n  \nLuminousFlux.lumens \nlumens \nLuminousFlux.inLumens \ninLumens"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousfluxmodule.html#lumens","title":"LuminousFlux.lumens","content":"LuminousFlux.lumens \nlumens \n\n Construct a luminous flux value from a number of lumens. See\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Luminous_flux#Examples\u0022\u003Ehere\u003C/a\u003E\n and \u003Ca href=\u0022https://en.wikipedia.org/wiki/Lumen_(unit)#Lighting\u0022\u003Ehere\u003C/a\u003E\n for the number of lumens emitted by some common light sources.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousfluxmodule.html#inLumens","title":"LuminousFlux.inLumens","content":"LuminousFlux.inLumens \ninLumens \n\n Convert a luminous flux value to a number of lumens.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensitymodule.html","title":"LuminousIntensity","content":"LuminousIntensity \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/Luminous_intensity\u0022\u003ELuminous intensity\u003C/a\u003E\n is a measure of the amount of light produced\n \u003Cb\u003Eluminous flux\u003C/b\u003E per unit \u003Cb\u003Esolid angle\u003C/b\u003E.\n Consider a light bulb that emits light in all directions and a spotlight that\n only emits light in a cone. If both lights had the same luminous flux (same\n total amount of light produced), then the spotlight would have higher luminous\n intensity since its light is concentrated into a smaller solid angle (and the\n light from the spotlight would appear brighter if viewed from the same\n distance).\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n On the other hand, if both lights had the same luminous intensity, then they\n would appear equally bright when viewed from the same distance (something lit by\n the spotlight would appear equally bright as the same object lit by the light\n bulb) but the spotlight would have lower luminous flux since its light covers a\n smaller solid angle.\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n Luminous intensity is measured in \u003Ca href=\u0022https://en.wikipedia.org/wiki/Candela\u0022\u003Ecandelas\u003C/a\u003E.\n \u003C/p\u003E \nLuminousIntensity.candelas \ncandelas \nLuminousIntensity.inCandelas \ninCandelas"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensitymodule.html#candelas","title":"LuminousIntensity.candelas","content":"LuminousIntensity.candelas \ncandelas \n\n Construct a luminous intensity value from a number of candelas. One candela\n is roughly equivalent to the luminous intensity of a single wax candle.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensitymodule.html#inCandelas","title":"LuminousIntensity.inCandelas","content":"LuminousIntensity.inCandelas \ninCandelas \n\n Convert a luminous intensity to a number of candelas.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html","title":"Mass","content":"Mass \n\n A \u003Ccode\u003EMass\u003C/code\u003E represents a mass in kilograms, pounds, metric or imperial tons\n etc. It is stored as a number of kilograms.\n  \nMass.kilograms \nkilograms \nMass.inKilograms \ninKilograms \nMass.grams \ngrams \nMass.inGrams \ninGrams \nMass.pounds \npounds \nMass.inPounds \ninPounds \nMass.ounces \nounces \nMass.inOunces \ninOunces \nMass.metricTons \nmetricTons \nMass.inMetricTons \ninMetricTons \nMass.shortTons \nshortTons \nMass.inShortTons \ninShortTons \nMass.longTons \nlongTons \nMass.inLongTons \ninLongTons \nMass.kilogram \nkilogram \nMass.gram \ngram \nMass.metricTon \nmetricTon \nMass.pound \npound \nMass.ounce \nounce \nMass.longTon \nlongTon \nMass.shortTon \nshortTon"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#kilograms","title":"Mass.kilograms","content":"Mass.kilograms \nkilograms \n\n Construct a mass from a number of kilograms.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inKilograms","title":"Mass.inKilograms","content":"Mass.inKilograms \ninKilograms \n\n Convert a mass to a number of kilograms.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#grams","title":"Mass.grams","content":"Mass.grams \ngrams \n\n Construct a mass from a number of grams.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inGrams","title":"Mass.inGrams","content":"Mass.inGrams \ninGrams \n\n Convert a mass to a number of grams.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#pounds","title":"Mass.pounds","content":"Mass.pounds \npounds \n\n Construct a mass from a number of pounds.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inPounds","title":"Mass.inPounds","content":"Mass.inPounds \ninPounds \n\n Convert a mass to a number of pounds.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#ounces","title":"Mass.ounces","content":"Mass.ounces \nounces \n\n Construct a mass from a number of ounces.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inOunces","title":"Mass.inOunces","content":"Mass.inOunces \ninOunces \n\n Convert a mass to a number of ounces.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n    Mass.pounds 1 |\u0026gt; Mass.inOunces\n    --\u0026gt; 16\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#metricTons","title":"Mass.metricTons","content":"Mass.metricTons \nmetricTons \n\n Construct a mass from a number of \u003Ca href=\u0022https://en.wikipedia.org/wiki/Tonne\u0022\u003Emetric tons\u003C/a\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n    Mass.metricTons 1\n    --\u0026gt; Mass.kilograms 1000\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inMetricTons","title":"Mass.inMetricTons","content":"Mass.inMetricTons \ninMetricTons \n\n Convert a mass to a number of metric tons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#shortTons","title":"Mass.shortTons","content":"Mass.shortTons \nshortTons \n\n Construct a mass from a number of \u003Ca href=\u0022https://en.wikipedia.org/wiki/Short_ton\u0022\u003Eshort tons\u003C/a\u003E. This is the \u0027ton\u0027\n commonly used in the United States.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Mass.shortTons 1\n     --\u0026gt; Mass.pounds 2000\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inShortTons","title":"Mass.inShortTons","content":"Mass.inShortTons \ninShortTons \n\n Convert a mass to a number of short tons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#longTons","title":"Mass.longTons","content":"Mass.longTons \nlongTons \n\n Construct a mass from a number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Long_ton\u0022\u003Elong tons\u003C/a\u003E.\n This is the \u0027ton\u0027 commonly used in the United Kingdom and British Commonwealth.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Mass.longTons 1\n     --\u0026gt; Mass.pounds 2240\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inLongTons","title":"Mass.inLongTons","content":"Mass.inLongTons \ninLongTons \n\n Convert a mass to a number of long tons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#kilogram","title":"Mass.kilogram","content":"Mass.kilogram \nkilogram \n\n One kilogram.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#gram","title":"Mass.gram","content":"Mass.gram \ngram \n\n One gram.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#metricTon","title":"Mass.metricTon","content":"Mass.metricTon \nmetricTon \n\n One metric ton.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#pound","title":"Mass.pound","content":"Mass.pound \npound \n\n One pound.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#ounce","title":"Mass.ounce","content":"Mass.ounce \nounce \n\n One ounce.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#longTon","title":"Mass.longTon","content":"Mass.longTon \nlongTon \n\n One longTon.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#shortTon","title":"Mass.shortTon","content":"Mass.shortTon \nshortTon \n\n One shortTon.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html","title":"Molarity","content":"Molarity \n\n A \u003Ccode\u003EMolarity\u003C/code\u003E value represents a concentration of substance in moles per\n cubic meter, moles per liter, millimoles per liter etc. It is stored as a number\n of moles per cubic meter.\n  \nMolarity.oneMolePerLiter \noneMolePerLiter \nMolarity.oneDecimolePerLiter \noneDecimolePerLiter \nMolarity.molesPerCubicMeter \nmolesPerCubicMeter \nMolarity.inMolesPerCubicMeter \ninMolesPerCubicMeter \nMolarity.molesPerLiter \nmolesPerLiter \nMolarity.inMolesPerLiter \ninMolesPerLiter \nMolarity.decimolesPerLiter \ndecimolesPerLiter \nMolarity.inDecimolesPerLiter \ninDecimolesPerLiter \nMolarity.centimolesPerLiter \ncentimolesPerLiter \nMolarity.inCentimolesPerLiter \ninCentimolesPerLiter \nMolarity.millimolesPerLiter \nmillimolesPerLiter \nMolarity.inMillimolesPerLiter \ninMillimolesPerLiter \nMolarity.micromolesPerLiter \nmicromolesPerLiter \nMolarity.inMicromolesPerLiter \ninMicromolesPerLiter"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#oneMolePerLiter","title":"Molarity.oneMolePerLiter","content":"Molarity.oneMolePerLiter \noneMolePerLiter \n\n One mole per liter, in moles per cubic meter\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#oneDecimolePerLiter","title":"Molarity.oneDecimolePerLiter","content":"Molarity.oneDecimolePerLiter \noneDecimolePerLiter \n\n One decimole per liter, in moles per cubic meter\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#molesPerCubicMeter","title":"Molarity.molesPerCubicMeter","content":"Molarity.molesPerCubicMeter \nmolesPerCubicMeter \n\n Construct a molarity from a number of moles per cubic meter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMolesPerCubicMeter","title":"Molarity.inMolesPerCubicMeter","content":"Molarity.inMolesPerCubicMeter \ninMolesPerCubicMeter \n\n Convert a molarity to a number of moles per cubic meter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#molesPerLiter","title":"Molarity.molesPerLiter","content":"Molarity.molesPerLiter \nmolesPerLiter \n\n Construct a molarity from a number of moles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMolesPerLiter","title":"Molarity.inMolesPerLiter","content":"Molarity.inMolesPerLiter \ninMolesPerLiter \n\n Convert a molarity to a number of moles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#decimolesPerLiter","title":"Molarity.decimolesPerLiter","content":"Molarity.decimolesPerLiter \ndecimolesPerLiter \n\n Construct a molarity from a number of decimoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inDecimolesPerLiter","title":"Molarity.inDecimolesPerLiter","content":"Molarity.inDecimolesPerLiter \ninDecimolesPerLiter \n\n Convert a molarity to a number of decimoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#centimolesPerLiter","title":"Molarity.centimolesPerLiter","content":"Molarity.centimolesPerLiter \ncentimolesPerLiter \n\n Construct a molarity from a number of centimoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inCentimolesPerLiter","title":"Molarity.inCentimolesPerLiter","content":"Molarity.inCentimolesPerLiter \ninCentimolesPerLiter \n\n Convert a molarity to a number of centimoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#millimolesPerLiter","title":"Molarity.millimolesPerLiter","content":"Molarity.millimolesPerLiter \nmillimolesPerLiter \n\n Construct a molarity from a number of millimoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMillimolesPerLiter","title":"Molarity.inMillimolesPerLiter","content":"Molarity.inMillimolesPerLiter \ninMillimolesPerLiter \n\n Convert a molarity to a number of millimoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#micromolesPerLiter","title":"Molarity.micromolesPerLiter","content":"Molarity.micromolesPerLiter \nmicromolesPerLiter \n\n Construct a molarity from a number of micromoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMicromolesPerLiter","title":"Molarity.inMicromolesPerLiter","content":"Molarity.inMicromolesPerLiter \ninMicromolesPerLiter \n\n Convert a molarity to a number of micromoles per liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html","title":"Pixels","content":"Pixels \n\n Although most of the focus of \u003Ccode\u003EMath.Units\u003C/code\u003E is on physical/scientific units,\n it\u0027s often useful to be able to safely convert back and forth between (for\n example) \u003Ccode\u003ELength\u003C/code\u003E values in the real world and on-screen lengths in\n pixels.\n\n \u003Cp class=\u0027fsdocs-para\u0027\u003E\n This module provides a standard \u003Ccode\u003EPixels\u003C/code\u003E units type and basic functions for\n constructing/converting values of type \u003Ccode\u003EQuantity Int Pixels\u003C/code\u003E or\n \u003Ccode\u003EQuantity Float Pixels\u003C/code\u003E, which allows you to do things like represent\n conversions between real-world and on-screen lengths as rates of change.\n This in turn means that all the normal \u003Ccode\u003EQuantity\u003C/code\u003E functions can be\n used to convert between pixels and other units, or even do type-safe math\n directly on pixel values.\n \u003C/p\u003E \nPixels.float \nfloat \nPixels.toFloat \ntoFloat \nPixels.pixel \npixel \nPixels.pixelsPerSecond \npixelsPerSecond \nPixels.inPixelsPerSecond \ninPixelsPerSecond \nPixels.pixelsPerSecondSquared \npixelsPerSecondSquared \nPixels.inPixelsPerSecondSquared \ninPixelsPerSecondSquared \nPixels.squarePixels \nsquarePixels \nPixels.inSquarePixels \ninSquarePixels"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#float","title":"Pixels.float","content":"Pixels.float \nfloat \n\n Construct a quantity representing a floating-point number of on-screen\n pixels:\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n let lineWeight =\n     Pixels.float 1.5\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#toFloat","title":"Pixels.toFloat","content":"Pixels.toFloat \ntoFloat \n\n Convert a floating-point number of pixels back into a plain \u003Ccode\u003EFloat\u003C/code\u003E:\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#pixel","title":"Pixels.pixel","content":"Pixels.pixel \npixel \n\n Shorthand for \u003Ccode\u003EPixels.float 1.\u003C/code\u003E. Can be convenient to use with\n \u003Ccode\u003EQuantity.per\u003C/code\u003E].\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#pixelsPerSecond","title":"Pixels.pixelsPerSecond","content":"Pixels.pixelsPerSecond \npixelsPerSecond \n\n Construct an on-screen speed from a number of pixels per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#inPixelsPerSecond","title":"Pixels.inPixelsPerSecond","content":"Pixels.inPixelsPerSecond \ninPixelsPerSecond \n\n Convert an on-screen speed to a number of pixels per second.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#pixelsPerSecondSquared","title":"Pixels.pixelsPerSecondSquared","content":"Pixels.pixelsPerSecondSquared \npixelsPerSecondSquared \n\n Construct an on-screen acceleration from a number of pixels per second\n squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#inPixelsPerSecondSquared","title":"Pixels.inPixelsPerSecondSquared","content":"Pixels.inPixelsPerSecondSquared \ninPixelsPerSecondSquared \n\n Convert an on-screen acceleration to a number of pixels per second squared.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#squarePixels","title":"Pixels.squarePixels","content":"Pixels.squarePixels \nsquarePixels \n\n Construct an on-screen area from a number of square pixels.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#inSquarePixels","title":"Pixels.inSquarePixels","content":"Pixels.inSquarePixels \ninSquarePixels \n\n Convert an on-screen area to a number of square pixels.\n    area =\n        Pixels.int 1928 |\u003E Quantity.times (Pixels.int 1080)\n    area |\u003E Pixels.inSquarePixels\n    --\u003E 2073600\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html","title":"Power","content":"Power \n\n A \u003Ccode\u003EPower\u003C/code\u003E value represents power in watts or horsepower. It is stored as a\n number of watts.\n \nPower.watts \nwatts \nPower.inWatts \ninWatts \nPower.kilowatts \nkilowatts \nPower.inKilowatts \ninKilowatts \nPower.megawatts \nmegawatts \nPower.inMegawatts \ninMegawatts \nPower.metricHorsepower \nmetricHorsepower \nPower.inMetricHorsepower \ninMetricHorsepower \nPower.mechanicalHorsepower \nmechanicalHorsepower \nPower.inMechanicalHorsepower \ninMechanicalHorsepower \nPower.electricalHorsepower \nelectricalHorsepower \nPower.inElectricalHorsepower \ninElectricalHorsepower"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#watts","title":"Power.watts","content":"Power.watts \nwatts \n\n Construct a \u003Ccode\u003EPower\u003C/code\u003E value from a number of watts.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inWatts","title":"Power.inWatts","content":"Power.inWatts \ninWatts \n\n Convert a \u003Ccode\u003EPower\u003C/code\u003E value to a number of watts.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#kilowatts","title":"Power.kilowatts","content":"Power.kilowatts \nkilowatts \n\n Construct a \u003Ccode\u003EPower\u003C/code\u003E value from a number of kilowatts.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inKilowatts","title":"Power.inKilowatts","content":"Power.inKilowatts \ninKilowatts \n\n Convert a \u003Ccode\u003EPower\u003C/code\u003E value to a number of kilowatts.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#megawatts","title":"Power.megawatts","content":"Power.megawatts \nmegawatts \n\n Construct a \u003Ccode\u003EPower\u003C/code\u003E value from a number of megawatts.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inMegawatts","title":"Power.inMegawatts","content":"Power.inMegawatts \ninMegawatts \n\n Convert a \u003Ccode\u003EPower\u003C/code\u003E value to a number of megawatts.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#metricHorsepower","title":"Power.metricHorsepower","content":"Power.metricHorsepower \nmetricHorsepower \n\n Construct a \u003Ccode\u003EPower\u003C/code\u003E value from an number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Horsepower#Metric_horsepower\u0022\u003Emetric horsepower\u003C/a\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Power.metricHorsepower 1\n     --\u0026gt; Power.watts 735.49875\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inMetricHorsepower","title":"Power.inMetricHorsepower","content":"Power.inMetricHorsepower \ninMetricHorsepower \n\n Convert a \u003Ccode\u003EPower\u003C/code\u003E value to a number of metric horsepower.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#mechanicalHorsepower","title":"Power.mechanicalHorsepower","content":"Power.mechanicalHorsepower \nmechanicalHorsepower \n\n Construct a \u003Ccode\u003EPower\u003C/code\u003E value from an number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Horsepower#Mechanical_horsepower\u0022\u003Emechanical horsepower\u003C/a\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Power.mechanicalHorsepower 1\n     --\u0026gt; Power.watts 745.6998715822702\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inMechanicalHorsepower","title":"Power.inMechanicalHorsepower","content":"Power.inMechanicalHorsepower \ninMechanicalHorsepower \n\n Convert a \u003Ccode\u003EPower\u003C/code\u003E value to a number of mechanical horsepower.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#electricalHorsepower","title":"Power.electricalHorsepower","content":"Power.electricalHorsepower \nelectricalHorsepower \n\n Construct a \u003Ccode\u003EPower\u003C/code\u003E value from an number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Horsepower#Electrical_horsepower\u0022\u003Eelectrical horsepower\u003C/a\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Power.electricalHorsepower 1\n     --\u0026gt; Power.watts 746\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inElectricalHorsepower","title":"Power.inElectricalHorsepower","content":"Power.inElectricalHorsepower \ninElectricalHorsepower \n\n Convert a \u003Ccode\u003EPower\u003C/code\u003E value to a number of electrical horsepower.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html","title":"Pressure","content":"Pressure \n\n A \u003Ccode\u003EPressure\u003C/code\u003E value represents a pressure in kilopascals, pounds per square\n inch, \u003Ca href=\u0022https://en.wikipedia.org/wiki/Atmosphere_(unit)\u0022\u003Eatmospheres\u003C/a\u003E\n etc. It is stored as a number of pascals.\n  \nPressure.pascals \npascals \nPressure.inPascals \ninPascals \nPressure.kilopascals \nkilopascals \nPressure.inKilopascals \ninKilopascals \nPressure.megapascals \nmegapascals \nPressure.inMegapascals \ninMegapascals \nPressure.poundsPerSquareInch \npoundsPerSquareInch \nPressure.inPoundsPerSquareInch \ninPoundsPerSquareInch \nPressure.atmospheres \natmospheres \nPressure.inAtmospheres \ninAtmospheres"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#pascals","title":"Pressure.pascals","content":"Pressure.pascals \npascals \n\n Construct a pressure from a number of pascals.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inPascals","title":"Pressure.inPascals","content":"Pressure.inPascals \ninPascals \n\n Convert a pressure to a number of pascals.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#kilopascals","title":"Pressure.kilopascals","content":"Pressure.kilopascals \nkilopascals \n\n Construct a pressure from a number of kilopascals.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inKilopascals","title":"Pressure.inKilopascals","content":"Pressure.inKilopascals \ninKilopascals \n\n Convert a pressure to a number of kilopascals.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#megapascals","title":"Pressure.megapascals","content":"Pressure.megapascals \nmegapascals \n\n Construct a pressure from a number of megapascals.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inMegapascals","title":"Pressure.inMegapascals","content":"Pressure.inMegapascals \ninMegapascals \n\n Convert a pressure to a number of megapascals.\n \u003Ccategory\u003EMetric\u003C/category\u003E\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#poundsPerSquareInch","title":"Pressure.poundsPerSquareInch","content":"Pressure.poundsPerSquareInch \npoundsPerSquareInch \n\n Construct a pressure from a number of pounds per square inch.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inPoundsPerSquareInch","title":"Pressure.inPoundsPerSquareInch","content":"Pressure.inPoundsPerSquareInch \ninPoundsPerSquareInch \n\n Convert a pressure to a number of pounds per square inch.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#atmospheres","title":"Pressure.atmospheres","content":"Pressure.atmospheres \natmospheres \n\n Construct a pressure from a number of \u003Ca href=\u0022https://en.wikipedia.org/wiki/Atmosphere_(unit)\u0022\u003Eatmospheres\u003C/a\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inAtmospheres","title":"Pressure.inAtmospheres","content":"Pressure.inAtmospheres \ninAtmospheres \n\n Convert a pressure to a number of atmospheres.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html","title":"Quantity","content":"Quantity \n \nQuantity.unitless \nunitless \nQuantity.zero \nzero \nQuantity.zero \nzero \nQuantity.positiveInfinity \npositiveInfinity \nQuantity.positiveInfinity \npositiveInfinity \nQuantity.infinity \ninfinity \nQuantity.infinity \ninfinity \nQuantity.negativeInfinity \nnegativeInfinity \nQuantity.negativeInfinity \nnegativeInfinity \nQuantity.create \ncreate \nQuantity.unwrap \nunwrap \nQuantity.lessThan \nlessThan \nQuantity.greaterThan \ngreaterThan \nQuantity.lessThanOrEqualTo \nlessThanOrEqualTo \nQuantity.greaterThanOrEqualTo \ngreaterThanOrEqualTo \nQuantity.lessThanZero \nlessThanZero \nQuantity.greaterThanZero \ngreaterThanZero \nQuantity.lessThanOrEqualToZero \nlessThanOrEqualToZero \nQuantity.greaterThanOrEqualToZero \ngreaterThanOrEqualToZero \nQuantity.compare \ncompare \nQuantity.equalWithin \nequalWithin \nQuantity.abs \nabs \nQuantity.max \nmax \nQuantity.min \nmin \nQuantity.isInfinite \nisInfinite \nQuantity.isNaN \nisNaN \nQuantity.negate \nnegate \nQuantity.plus \nplus \nQuantity.difference \ndifference \nQuantity.minus \nminus \nQuantity.product \nproduct \nQuantity.times \ntimes \nQuantity.timesUnitless \ntimesUnitless \nQuantity.over \nover \nQuantity.over_ \nover_ \nQuantity.overUnitless \noverUnitless \nQuantity.ratio \nratio \nQuantity.multiplyBy \nmultiplyBy \nQuantity.divideBy \ndivideBy \nQuantity.twice \ntwice \nQuantity.half \nhalf \nQuantity.clamp \nclamp \nQuantity.squared \nsquared \nQuantity.squaredUnitless \nsquaredUnitless \nQuantity.sqrtUnitless \nsqrtUnitless \nQuantity.sqrt \nsqrt \nQuantity.cubed \ncubed \nQuantity.cubedUnitless \ncubedUnitless \nQuantity.unsafeCbrt \nunsafeCbrt \nQuantity.cbrt \ncbrt \nQuantity.cbrtUnitless \ncbrtUnitless \nQuantity.reciprocal \nreciprocal \nQuantity.modBy \nmodBy \nQuantity.remainderBy \nremainderBy \nQuantity.interpolateFrom \ninterpolateFrom \nQuantity.midpoint \nmidpoint \nQuantity.range \nrange \nQuantity.in_ \nin_ \nQuantity.roundTo \nroundTo \nQuantity.round \nround \nQuantity.floor \nfloor \nQuantity.ceil \nceil \nQuantity.truncate \ntruncate \nQuantity.sum \nsum \nQuantity.minimum \nminimum \nQuantity.maximum \nmaximum \nQuantity.minimumBy \nminimumBy \nQuantity.maximumBy \nmaximumBy \nQuantity.sort \nsort \nQuantity.sortBy \nsortBy \nQuantity.rate \nrate \nQuantity.per \nper \nQuantity.at \nat \nQuantity.at_ \nat_ \nQuantity.for_ \nfor_ \nQuantity.inverse \ninverse \nQuantity.rateProduct \nrateProduct"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#unitless","title":"Quantity.unitless","content":"Quantity.unitless \nunitless \n\n Create a unitless quantity. Unitless quantities must use the unitless\n functions in this module to avoid accumulating unit ratios. Using\n the functions within this module maintains the \u003Ccode\u003EUnitless\u003C/code\u003E type.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#zero","title":"Quantity.zero","content":"Quantity.zero \nzero \n\n A generic zero value. This can be treated as a quantity in any\n units type, similar to how \u003Ccode\u003ENone\u003C/code\u003E can be treated as any kind\n of \u003Ccode\u003EOption\u003C/code\u003E type and \u003Ccode\u003E[]\u003C/code\u003E can be treated as any kind of \u003Ccode\u003EList\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#zero","title":"Quantity.zero","content":"Quantity.zero \nzero \n\n A generic zero value. This can be treated as a quantity in any\n units type, similar to how \u003Ccode\u003ENone\u003C/code\u003E can be treated as any kind\n of \u003Ccode\u003EOption\u003C/code\u003E type and \u003Ccode\u003E[]\u003C/code\u003E can be treated as any kind of \u003Ccode\u003EList\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#positiveInfinity","title":"Quantity.positiveInfinity","content":"Quantity.positiveInfinity \npositiveInfinity \n\n A generic positive infinity value.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#positiveInfinity","title":"Quantity.positiveInfinity","content":"Quantity.positiveInfinity \npositiveInfinity \n\n A generic positive infinity value.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#infinity","title":"Quantity.infinity","content":"Quantity.infinity \ninfinity \n\n Alias for \u003Ccode\u003EQuantity.positiveInfinity\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#infinity","title":"Quantity.infinity","content":"Quantity.infinity \ninfinity \n\n Alias for \u003Ccode\u003EQuantity.positiveInfinity\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#negativeInfinity","title":"Quantity.negativeInfinity","content":"Quantity.negativeInfinity \nnegativeInfinity \n\n A generic negative infinity value.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#negativeInfinity","title":"Quantity.negativeInfinity","content":"Quantity.negativeInfinity \nnegativeInfinity \n\n A generic negative infinity value.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#create","title":"Quantity.create","content":"Quantity.create \ncreate \n\n This function allows you to create a quantity of any value and type.\n This should only try to use in library functions. This does however\n let you create units of generic types and types that are compiler\n defined instead of user defined.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#unwrap","title":"Quantity.unwrap","content":"Quantity.unwrap \nunwrap \n\n This function provides access to the floating point value represented by\n the quantity. This should only try to use in library functions.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThan","title":"Quantity.lessThan","content":"Quantity.lessThan \nlessThan \n\n Check if one quantity is less than another. Note the \u003Cb\u003Eargument order!\u003C/b\u003E\u003Cexample\u003E\n  \u003Ccode lang=\u0022fsharp\u0022\u003E\n     let oneMeter =\n         Length.meters 1\n\n     Length.feet 1 |\u0026gt; Quantity.lessThan oneMeter\n     --\u0026gt; True\n\n     // Is the same as:\n     Quantity.lessThan oneMeter (Length.feet 1)\n     --\u0026gt; True\n\n \u003C/code\u003E\n\u003C/example\u003E\u003Cexample\u003E\n  \u003Ccode lang=\u0022fsharp\u0022\u003E\n     List.filter (Quantity.lessThan oneMeter)\n         [ Length.feet 1\n           Length.parsecs 1\n           Length.yards 1\n           Length.lightYears 1\n         ]\n     --\u0026gt; [ Length.feet 1; Length.yards 1 ]\n \u003C/code\u003E\n\u003C/example\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThan","title":"Quantity.greaterThan","content":"Quantity.greaterThan \ngreaterThan \n\n Check if one quantity is greater than another. Note the \u003Cb\u003Eargument order!\u003C/b\u003E\u003Cexample\u003E\n  \u003Ccode lang=\u0022fsharp\u0022\u003E\n    oneMeter =\n        Length.meters 1\n    Length.feet 1 |\u0026gt; Quantity.greaterThan oneMeter\n    // --\u0026gt; False\n\n    // Same as:\n    Quantity.greaterThan oneMeter (Length.feet 1)\n    // --\u0026gt; False\n    List.filter (Quantity.greaterThan oneMeter)\n        [ Length.feet 1\n        , Length.parsecs 1\n        , Length.yards 1\n        , Length.lightYears 1\n        ]\n    --\u0026gt; [ Length.parsecs 1, Length.lightYears 1 ]\n \u003C/code\u003E\n\u003C/example\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThanOrEqualTo","title":"Quantity.lessThanOrEqualTo","content":"Quantity.lessThanOrEqualTo \nlessThanOrEqualTo \n\n Check if one quantity is less than or equal to another. Note the \u003Cb\u003Eargument\n order!\u003C/b\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThanOrEqualTo","title":"Quantity.greaterThanOrEqualTo","content":"Quantity.greaterThanOrEqualTo \ngreaterThanOrEqualTo \n\n Check if one quantity is greater than or equal to another. Note the\n \u003Cb\u003Eargument order!\u003C/b\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThanZero","title":"Quantity.lessThanZero","content":"Quantity.lessThanZero \nlessThanZero \n\n Short form for \u003Ccode\u003EQuantity.lessThan Quantity.zero\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThanZero","title":"Quantity.greaterThanZero","content":"Quantity.greaterThanZero \ngreaterThanZero \n\n Short form for \u003Ccode\u003EQuantity.greaterThan Quantity.zero\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThanOrEqualToZero","title":"Quantity.lessThanOrEqualToZero","content":"Quantity.lessThanOrEqualToZero \nlessThanOrEqualToZero \n\n Short form for \u003Ccode\u003EQuantity.lessThanOrEqualTo Quantity.zero\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThanOrEqualToZero","title":"Quantity.greaterThanOrEqualToZero","content":"Quantity.greaterThanOrEqualToZero \ngreaterThanOrEqualToZero \n\n Short form for \u003Ccode\u003EQuantity.greaterThanOrEqualTo Quantity.zero\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#compare","title":"Quantity.compare","content":"Quantity.compare \ncompare \n\n Compare two quantities, returning an int value indicating whether\n the first is less than, equal to or greater than the second.\n Greater than = 1, Less than = -1, Equal to = 0\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#equalWithin","title":"Quantity.equalWithin","content":"Quantity.equalWithin \nequalWithin \n\n Check if two quantities are equal within a given absolute tolerance. The\n given tolerance must be greater than or equal to zero - if it is negative, then\n the result will always be false.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#abs","title":"Quantity.abs","content":"Quantity.abs \nabs \n\n     Get the absolute value of a quantity.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#max","title":"Quantity.max","content":"Quantity.max \nmax \n\n Find the maximum of two quantities.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#min","title":"Quantity.min","content":"Quantity.min \nmin \n\n Find the minimum of two quantities.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#isInfinite","title":"Quantity.isInfinite","content":"Quantity.isInfinite \nisInfinite \n\n Check if a quantity is positive or negative infinity.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#isNaN","title":"Quantity.isNaN","content":"Quantity.isNaN \nisNaN \n\n Check if a quantity\u0027s underlying value is NaN (not-a-number).\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#negate","title":"Quantity.negate","content":"Quantity.negate \nnegate \n\n Negate a quantity\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#plus","title":"Quantity.plus","content":"Quantity.plus \nplus \n\n Add two quantities.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#difference","title":"Quantity.difference","content":"Quantity.difference \ndifference \n\n Subtract one quantity from another.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#minus","title":"Quantity.minus","content":"Quantity.minus \nminus \n\n An \u0027infix\u0027 version of \u003Ccode\u003Edifference\u003C/code\u003E, intended to be used in\n pipeline form;\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.difference x y\u003C/code\u003E\u003C/pre\u003E\n can be written as\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     x |\u0026gt; Quantity.minus y\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#product","title":"Quantity.product","content":"Quantity.product \nproduct \n\n Multiply two quantities with units types \u003Ccode\u003Eunits1\u003C/code\u003E and \u003Ccode\u003Eunits2\u003C/code\u003E together,\n resulting in a quantity with units type \u003Ccode\u003EProduct units1 units2\u003C/code\u003E.\n This works for any two units types, but one special case is worth pointing out.\n The units type of an [\u003Ccode\u003EArea\u003C/code\u003E](Area) is \u003Ccode\u003ESquareMeters\u003C/code\u003E, which is a type alias for\n \u003Ccode\u003ESquared Meters\u003C/code\u003E, which in turn expands to \u003Ccode\u003EProduct Meters Meters\u003C/code\u003E. This means\n that the product of two \u003Ccode\u003ELength\u003C/code\u003Es does in fact give you an \u003Ccode\u003EArea\u003C/code\u003E:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     // This is the definition of an acre, I kid you not \u0026#128520;\n     Quantity.product (Length.feet 66) (Length.feet 660)\n     --\u0026gt; Area.acres 1\u003C/code\u003E\u003C/pre\u003E\n We can also multiply an \u003Ccode\u003EArea\u003C/code\u003E by a \u003Ccode\u003ELength\u003C/code\u003E to get a \u003Ccode\u003EVolume\u003C/code\u003E:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.product\n         (Area.squareMeters 1)\n         (Length.centimeters 1)\n     --\u0026gt; Volume.liters 10\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#times","title":"Quantity.times","content":"Quantity.times \ntimes \n\n An \u0027infix\u0027 version of \u003Ccode\u003Eproduct\u003C/code\u003E, intended to be used in pipeline\n form;\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.product a b\u003C/code\u003E\u003C/pre\u003E\n can be written as\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     a |\u0026gt; Quantity.times b\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#timesUnitless","title":"Quantity.timesUnitless","content":"Quantity.timesUnitless \ntimesUnitless \n\n If you use \u003Ccode\u003Etimes\u003C/code\u003E) or product to multiply one\n quantity by another \u003Ccode\u003EUnitless\u003C/code\u003E quantity, for example\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     quantity |\u0026gt; Quantity.times unitlessQuantity\u003C/code\u003E\u003C/pre\u003E\n then the result you\u0027ll get will have units type \u003Ccode\u003EProduct units Unitless\u003C/code\u003E. But\n this is silly and not super useful, since the product of \u003Ccode\u003Eunits\u003C/code\u003E and \u003Ccode\u003EUnitless\u003C/code\u003E\n should really just be \u003Ccode\u003Eunits\u003C/code\u003E. That\u0027s what \u003Ccode\u003EtimesUnitless\u003C/code\u003E does - it\u0027s a special\n case of \u003Ccode\u003Etimes\u003C/code\u003E for when you\u0027re multiplying by another unitless quantity, that\n leaves the units alone.\n You can think of \u003Ccode\u003EtimesUnitless\u003C/code\u003E as shorthand for \u003Ccode\u003EtoFloat\u003C/code\u003E and \u003Ccode\u003EmultiplyBy\u003C/code\u003E;\n for \u003Ccode\u003EFloat\u003C/code\u003E-valued quantities,\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     quantity |\u0026gt; Quantity.timesUnitless unitlessQuantity\u003C/code\u003E\u003C/pre\u003E\n is equivalent to\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     quantity\n         |\u0026gt; Quantity.multiplyBy\n             (Quantity.toFloat unitlessQuantity)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#over","title":"Quantity.over","content":"Quantity.over \nover \n\n Divide a quantity in \u003Ccode\u003EProduct units1 units2\u003C/code\u003E by a quantity in \u003Ccode\u003Eunits1\u003C/code\u003E,\n resulting in another quantity in \u003Ccode\u003Eunits2\u003C/code\u003E. For example, the units type of a\n \u003Ccode\u003EForce\u003C/code\u003E is \u003Ccode\u003EProduct Kilograms MetersPerSecondSquared\u003C/code\u003E (mass times acceleration),\n so we could divide a force by a given mass to determine how fast that mass would\n be accelerated by the given force:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Force.newtons 100\n         |\u0026gt; Quantity.over\n             (Mass.kilograms 50)\n     --\u0026gt; Acceleration.metersPerSecondSquared 2\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#over_","title":"Quantity.over_","content":"Quantity.over_ \nover_ \n\n Just like \u003Ccode\u003Eover\u003C/code\u003E but divide by a quantity in \u003Ccode\u003Eunits2\u003C/code\u003E, resulting in another\n quantity in \u003Ccode\u003Eunits1\u003C/code\u003E. For example, we could divide a force by a desired\n acceleration to determine how much mass could be accelerated at that rate:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Force.newtons 100\n         |\u0026gt; Quantity.over_\n             (Acceleration.metersPerSecondSquared 5)\n     --\u0026gt; Mass.kilograms 20\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#overUnitless","title":"Quantity.overUnitless","content":"Quantity.overUnitless \noverUnitless \n\n Similar to \u003Ccode\u003EtimesUnitless\u003C/code\u003E, \u003Ccode\u003EoverUnitless\u003C/code\u003E lets you\n divide one quantity by a second [unitless](#Unitless) quantity without affecting\n the units;\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     quantity |\u0026gt; Quantity.overUnitless unitlessQuantity\u003C/code\u003E\u003C/pre\u003E\n is equivalent to\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     quantity\n         |\u0026gt; Quantity.divideBy\n             (Quantity.toFloat unitlessQuantity)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#ratio","title":"Quantity.ratio","content":"Quantity.ratio \nratio \n\n Find the ratio of two quantities with the same units.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.ratio (Length.miles 1) (Length.yards 1)\n    --\u0026gt; 1760\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#multiplyBy","title":"Quantity.multiplyBy","content":"Quantity.multiplyBy \nmultiplyBy \n\n Scale a \u003Ccode\u003EQuantity\u003C/code\u003E by a \u003Ccode\u003Enumber\u003C/code\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.multiplyBy 1.5 (Duration.hours 1)\n     --\u0026gt; Duration.minutes 90\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#divideBy","title":"Quantity.divideBy","content":"Quantity.divideBy \ndivideBy \n\n Divide a \u003Ccode\u003EQuantity\u003C/code\u003E by a \u003Ccode\u003EFloat\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#twice","title":"Quantity.twice","content":"Quantity.twice \ntwice \n\n Convenient shorthand for \u003Ccode\u003EQuantity.multiplyBy 2\u003C/code\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.twice (Duration.minutes 30)\n    --\u0026gt; Duration.hours 1\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#half","title":"Quantity.half","content":"Quantity.half \nhalf \n\n Convenient shorthand for \u003Ccode\u003EQuantity.multiplyBy 0.5\u003C/code\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.half (Length.meters 1)\n    --\u0026gt; Length.centimeters 50\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#clamp","title":"Quantity.clamp","content":"Quantity.clamp \nclamp \n\n Given a lower and upper bound, clamp a given quantity to within those\n bounds. Say you wanted to clamp an angle to be between \u002B/-30 degrees:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let lowerBound =\n         Angle.degrees -30\n     let upperBound =\n         Angle.degrees 30\n     Quantity.clamp lowerBound upperBound (Angle.degrees 5)\n     --\u0026gt; Angle.degrees 5\n     -- One radian is approximately 57 degrees\n     Quantity.clamp lowerBound upperBound (Angle.radians 1)\n     --\u0026gt; Angle.degrees 30\n     Quantity.clamp lowerBound upperBound (Angle.turns -0.5)\n     --\u0026gt; Angle.degrees -30\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#squared","title":"Quantity.squared","content":"Quantity.squared \nsquared \n\n Square a quantity with some \u003Ccode\u003Eunits\u003C/code\u003E, resulting in a new quantity in\n \u003Ccode\u003ESquared units\u003C/code\u003E:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.squared (Length.meters 5)\n     --\u0026gt; Area.squareMeters 25\n See also Quantity.squaredUnitless.\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#squaredUnitless","title":"Quantity.squaredUnitless","content":"Quantity.squaredUnitless \nsquaredUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sqrtUnitless","title":"Quantity.sqrtUnitless","content":"Quantity.sqrtUnitless \nsqrtUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sqrt","title":"Quantity.sqrt","content":"Quantity.sqrt \nsqrt \n\n Take a quantity in \u003Ccode\u003ESquared units\u003C/code\u003E and return the square root of that\n quantity in plain \u003Ccode\u003Eunits\u003C/code\u003E:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.sqrt (Area.hectares 1)\n     --\u0026gt; Length.meters 100\u003C/code\u003E\u003C/pre\u003E\n Getting fancier, you could write a 2D hypotenuse (magnitude) function that\n worked on \u003Cb\u003Eany\u003C/b\u003E quantity type (length, speed, force...) as\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     hypotenuse :\n         Quantity Float units\n         -\u0026gt; Quantity Float units\n         -\u0026gt; Quantity Float units\n     hypotenuse x y =\n         Quantity.sqrt\n             (Quantity.squared x\n                 |\u0026gt; Quantity.plus\n                     (Quantity.squared y)\n             )\u003C/code\u003E\u003C/pre\u003E\n This works because:\n   - The \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ey\u003C/code\u003E arguments are both in \u003Ccode\u003Eunits\u003C/code\u003E\n   - So each squared item is in \u003Ccode\u003ESquared units\u003C/code\u003E\n   - So the sum is also in \u003Ccode\u003ESquared units\u003C/code\u003E\n   - And calling \u003Ccode\u003Esqrt\u003C/code\u003E on something in \u003Ccode\u003ESquared units\u003C/code\u003E returns a value back in\n     \u003Ccode\u003Eunits\u003C/code\u003E\n See also \u003Ccode\u003EQuantity.sqrtUnitless\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cubed","title":"Quantity.cubed","content":"Quantity.cubed \ncubed \n\n Cube a quantity with some \u003Ccode\u003Eunits\u003C/code\u003E, resulting in a new quantity in\n \u003Ccode\u003ECubed units\u003C/code\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.cubed (Length.meters 5)\n     --\u0026gt; Volume.cubicMeters 125\u003C/code\u003E\u003C/pre\u003E\n See also \u003Ccode\u003EQuantity.cubedUnitless\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cubedUnitless","title":"Quantity.cubedUnitless","content":"Quantity.cubedUnitless \ncubedUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#unsafeCbrt","title":"Quantity.unsafeCbrt","content":"Quantity.unsafeCbrt \nunsafeCbrt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cbrt","title":"Quantity.cbrt","content":"Quantity.cbrt \ncbrt \n\n Take a quantity in \u003Ccode\u003ECubed units\u003C/code\u003E and return the cube root of that\n quantity in plain \u003Ccode\u003Eunits\u003C/code\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.cbrt (Volume.liters 1)\n     --\u0026gt; Length.centimeters 10\u003C/code\u003E\u003C/pre\u003E\n See also \u003Ccode\u003EQuantity.cbrtUnitless\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cbrtUnitless","title":"Quantity.cbrtUnitless","content":"Quantity.cbrtUnitless \ncbrtUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#reciprocal","title":"Quantity.reciprocal","content":"Quantity.reciprocal \nreciprocal \n\n Find the inverse of a unitless quantity.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.reciprocal (Quantity.float 5)\n    --\u0026gt; Quantity.float 0.2\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#modBy","title":"Quantity.modBy","content":"Quantity.modBy \nmodBy \n\n Returns the remainder of the modulus operation.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#remainderBy","title":"Quantity.remainderBy","content":"Quantity.remainderBy \nremainderBy \n\n Returns the remainder of the modulus operation.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#interpolateFrom","title":"Quantity.interpolateFrom","content":"Quantity.interpolateFrom \ninterpolateFrom \n\n Interpolate from the first quantity to the second, based on a parameter that\n ranges from zero to one. Passing a parameter quantity of zero will return the start\n quantity and passing a parameter quantity of one will return the end quantity.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     fiveMeters =\n         Length.meters 5\n     tenMeters =\n         Length.meters 10\n     Quantity.interpolateFrom fiveMeters tenMeters 0\n     --\u0026gt; Length.meters 5\n     Quantity.interpolateFrom fiveMeters tenMeters 1\n     --\u0026gt; Length.meters 10\n     Quantity.interpolateFrom fiveMeters tenMeters 0.6\n     --\u0026gt; Length.meters 8\u003C/code\u003E\u003C/pre\u003E\n The end quantity can be less than the start quantity:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.interpolateFrom tenMeters fiveMeters 0.1\n     --\u0026gt; Length.meters 9.5\u003C/code\u003E\u003C/pre\u003E\n Parameter quantitys less than zero or greater than one can be used to extrapolate:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.interpolateFrom fiveMeters tenMeters 1.5\n     --\u0026gt; Length.meters 12.5\n     Quantity.interpolateFrom fiveMeters tenMeters -0.5\n     --\u0026gt; Length.meters 2.5\n     Quantity.interpolateFrom tenMeters fiveMeters -0.2\n     --\u0026gt; Length.meters 11\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#midpoint","title":"Quantity.midpoint","content":"Quantity.midpoint \nmidpoint \n\n Find the midpoint between two quantities.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.midpoint (Length.meters 5) (Length.meters 10)\n    --\u0026gt; Length.meters 7.5\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#range","title":"Quantity.range","content":"Quantity.range \nrange \n\n Construct a range of evenly-spaced quantitys given a \u003Ccode\u003Estart\u003C/code\u003E quantity, an \u003Ccode\u003Eend\u003C/code\u003E\n quantity and the number of \u003Ccode\u003Esteps\u003C/code\u003E to take from the start to the end. The first\n quantity in the returned list will be equal to \u003Ccode\u003Estart\u003C/code\u003E and the last quantity will be\n equal to \u003Ccode\u003Eend\u003C/code\u003E. Note that the number of returned quantitys will be one greater than\n the number of steps!\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#in_","title":"Quantity.in_","content":"Quantity.in_ \nin_ \n\n Generalized units conversion function that lets you convert to many kinds of\n units not directly supported by \u003Ccode\u003Eelm-units\u003C/code\u003E. The first argument is a function\n that constructs a quantity of the desired Unit System, and the second is the quantity\n to convert. For example,\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Speed.metersPerSecond 5\n         |\u0026gt; Speed.inFeetPerSecond\n     --\u0026gt; 16.4042\u003C/code\u003E\u003C/pre\u003E\n is equivalent to\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Speed.metersPerSecond 5\n         |\u0026gt; Quantity.in_ Speed.feetPerSecond\n     --\u0026gt; 16.4042\u003C/code\u003E\u003C/pre\u003E\n More interestingly, if you wanted to get speed in some weirder unit like\n millimeters per minute (not directly supported by \u003Ccode\u003Eelm-units\u003C/code\u003E), you could do\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Speed.metersPerSecond 5\n         |\u0026gt; Quantity.in_\n             (Length.millimeters\n                 \u0026gt;\u0026gt; Quantity.per (Duration.minutes 1)\n             )\n     --\u0026gt; 300000\u003C/code\u003E\u003C/pre\u003E\n Internally,\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.in_ someUnits someQuantity\u003C/code\u003E\u003C/pre\u003E\n is simply implemented as\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.ratio some(someUnits 1)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#roundTo","title":"Quantity.roundTo","content":"Quantity.roundTo \nroundTo \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#round","title":"Quantity.round","content":"Quantity.round \nround \n\n Round a \u003Ccode\u003EFloat\u003C/code\u003E-valued quantity to the nearest \u003Ccode\u003EInt\u003C/code\u003E. Note that [this may\n not do what you expect](#-int-float-conversion).\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.round (Pixels.pixels 3.5)\n     --\u0026gt; Pixels.pixels 4\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#floor","title":"Quantity.floor","content":"Quantity.floor \nfloor \n\n Round a \u003Ccode\u003EFloat\u003C/code\u003E-valued quantity down to the nearest \u003Ccode\u003EInt\u003C/code\u003E. Note that [this\n may not do what you expect](#-int-float-conversion).\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.floor (Pixels.pixels 2.9)\n     --\u0026gt; Pixels.pixels 2\n     Quantity.floor (Pixels.pixels -2.1)\n     --\u0026gt; Pixels.pixels -3\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#ceil","title":"Quantity.ceil","content":"Quantity.ceil \nceil \n\n Round a \u003Ccode\u003EFloat\u003C/code\u003E-valued quantity up to the nearest \u003Ccode\u003EInt\u003C/code\u003E.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.ceiling (Pixels.pixels 1.2)\n     --\u0026gt; Pixels.pixels 2\n     Quantity.ceiling (Pixels.pixels -2.1)\n     --\u0026gt; Pixels.pixels -2\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#truncate","title":"Quantity.truncate","content":"Quantity.truncate \ntruncate \n\n Round a \u003Ccode\u003EFloat\u003C/code\u003E-valued quantity towards zero.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.truncate (Pixels.pixels -2.8)\n     --\u0026gt; Pixels.pixels -2\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sum","title":"Quantity.sum","content":"Quantity.sum \nsum \n\n Find the sum of a list of quantities.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.sum\n        [ Length.meters 1\n        , Length.centimeters 2\n        , Length.millimeters 3\n        ]\n    --\u0026gt; Length.meters 1.023\n    Quantity.sum []\n    --\u0026gt; Quantity.zero\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#minimum","title":"Quantity.minimum","content":"Quantity.minimum \nminimum \n\n Find the minimum quantity in a list of quantities. Returns \u003Ccode\u003ENone\u003C/code\u003E if the\n list is empty.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.minimum\n        [ Mass.kilograms 1\n        , Mass.pounds 2\n        , Mass.tonnes 3\n        ]\n    --\u0026gt; Some (Mass.pounds 2)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#maximum","title":"Quantity.maximum","content":"Quantity.maximum \nmaximum \n\n Find the maximum quantity in a list of quantities. Returns \u003Ccode\u003ENone\u003C/code\u003E if the\n list is empty.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.maximum\n         [ Mass.kilograms 1\n         , Mass.pounds 2\n         , Mass.tonnes 3\n         ]\n     --\u0026gt; Some (Mass.tonnes 3)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#minimumBy","title":"Quantity.minimumBy","content":"Quantity.minimumBy \nminimumBy \n\n Find the \u0027minimum\u0027 item in a list as measured by some derived \u003Ccode\u003EQuantity\u003C/code\u003E:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let people =\n         [ { Name = \u0026quot;Bob\u0026quot;, Height = Length.meters 1.6 }\n           { Name = \u0026quot;Charlie\u0026quot;, Height = Length.meters 2.0 }\n           { Name = \u0026quot;Alice\u0026quot;, Height = Length.meters 1.8 }\n         ]\n     Quantity.minimumBy (fun person -\u0026gt; person.Height) people\n     --\u0026gt; Some { Name = \u0026quot;Bob\u0026quot;; Height = Length.meters 1.6 }\u003C/code\u003E\u003C/pre\u003E\n If the list is empty, returns \u003Ccode\u003ENone\u003C/code\u003E. If multiple items in the list are tied,\n then the first one is returned.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#maximumBy","title":"Quantity.maximumBy","content":"Quantity.maximumBy \nmaximumBy \n\n Find the \u0027maximum\u0027 item in a list as measured by some derived \u003Ccode\u003EQuantity\u003C/code\u003E:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let people =\n         [ { Name = \u0026quot;Bob\u0026quot;, Height = Length.meters 1.6 }\n           { Name = \u0026quot;Charlie\u0026quot;, Height = Length.meters 2.0 }\n           { Name = \u0026quot;Alice\u0026quot;, Height = Length.meters 1.8 }\n         ]\n     Quantity.maximumBy (fun person -\u0026gt; person.Height) people\n     --\u0026gt; Some { Name = \u0026quot;Charlie\u0026quot;; Height = Length.meters 2.0 }\u003C/code\u003E\u003C/pre\u003E\n If the list is empty, returns \u003Ccode\u003ENone\u003C/code\u003E. If multiple items in the list are tied,\n then the first one is returned.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sort","title":"Quantity.sort","content":"Quantity.sort \nsort \n\n Sort a list of quantities.\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n    Quantity.sort\n        [ Mass.kilograms 1\n          Mass.pounds 2\n          Mass.tonnes 3\n        ]\n    --\u0026gt; [ Mass.pounds 2\n    --\u0026gt;   Mass.kilograms 1\n    --\u0026gt;   Mass.tonnes 3\n    --\u0026gt; ]\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sortBy","title":"Quantity.sortBy","content":"Quantity.sortBy \nsortBy \n\n Sort an arbitrary list of quantitys by a derived \u003Ccode\u003EQuantity\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#rate","title":"Quantity.rate","content":"Quantity.rate \nrate \n\n Construct a rate of change by dividing a dependent quantity (numerator) by\n an independent quantity (denominator):\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let speed =\n         Quantity.rate (Length.miles 1) Duration.minute\n \n     speed |\u0026gt; Speed.inMilesPerHour\n     --\u0026gt; 60\u003C/code\u003E\u003C/pre\u003E\n \n We could directly use our rate of change quantity as a \u003Ccode\u003ESpeed\u003C/code\u003E! That is\n because many built-in quantity types are defined as rates of change, for\n example:\n \u003Cul\u003E\u003Cli\u003E\u003Ccode\u003ESpeed\u003C/code\u003E is \u003Ccode\u003ELength\u003C/code\u003E per \u003Ccode\u003EDuration\u003C/code\u003E\u003C/li\u003E\u003Cli\u003E\u003Ccode\u003EAcceleration\u003C/code\u003E is \u003Ccode\u003ESpeed\u003C/code\u003E per \u003Ccode\u003EDuration\u003C/code\u003E\u003C/li\u003E\u003Cli\u003E\u003Ccode\u003EPressure\u003C/code\u003E is \u003Ccode\u003EForce\u003C/code\u003E per \u003Ccode\u003EArea\u003C/code\u003E\u003C/li\u003E\u003Cli\u003E\u003Ccode\u003EPower\u003C/code\u003E is \u003Ccode\u003EEnergy\u003C/code\u003E per \u003Ccode\u003EDuration\u003C/code\u003E\u003C/li\u003E\u003Cli\u003E\u003Ccode\u003ECurrent\u003C/code\u003E is \u003Ccode\u003ECharge\u003C/code\u003E per \u003Ccode\u003EDuration\u003C/code\u003E\u003C/li\u003E\u003Cli\u003E\u003Ccode\u003EResistance\u003C/code\u003E is \u003Ccode\u003EVoltage\u003C/code\u003E per \u003Ccode\u003ECurrent\u003C/code\u003E\u003C/li\u003E\u003Cli\u003E\u003Ccode\u003EVoltage\u003C/code\u003E is \u003Ccode\u003EPower\u003C/code\u003E per \u003Ccode\u003ECurrent\u003C/code\u003E\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#per","title":"Quantity.per","content":"Quantity.per \nper \n\n \u0027Infix\u0027 version of [\u003Ccode\u003Erate\u003C/code\u003E](#rate), meant to be used in pipeline form;\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.rate distance time\u003C/code\u003E\u003C/pre\u003E\n can be written as\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     distance |\u0026gt; Quantity.per time\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#at","title":"Quantity.at","content":"Quantity.at \nat \n\n Multiply a rate of change by an independent quantity (the denominator in\n the rate) to get a total quantity:\n\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n       Duration.minutes 30\n           |\u0026gt; Quantity.at\n               (Speed.kilometersPerHour 100)\n       --\u0026gt; Length.kilometers 50\u003C/code\u003E\u003C/pre\u003E\n\n Can be useful to define conversion functions from one unit to another, since\n if you define a \u003Ccode\u003Erate\u003C/code\u003E then \u003Ccode\u003EQuantity.at rate\u003C/code\u003E will give you a conversion\n function:\n\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n       let pixelDensity : Rate\u0026lt;Pixels, Meters\u0026gt; =\n           Pixels.pixels 96 |\u0026gt; Quantity.per (Length.inches 1)\n       let lengthToPixels : Length -\u0026gt; Pixels =\n           Quantity.at pixelDensity length\n \n       lengthToPixels (Length.inches 3)\n       --\u0026gt; Pixels.pixels 288\u003C/code\u003E\u003C/pre\u003E\n\n Eagle-eyed readers will note that using partial application you could also\n simply write\n\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let lengthToPixels =\n         Quantity.at pixelDensity\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#at_","title":"Quantity.at_","content":"Quantity.at_ \nat_ \n\n Given a rate and a \u003Cb\u003EDependent\u003C/b\u003E quantity (total quantity), determine the\n necessary amount of the \u003Cb\u003EIndependent\u003C/b\u003E quantity:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Length.kilometers 75\n         |\u0026gt; Quantity.at_\n             (Speed.kilometersPerHour 100)\n     --\u0026gt; Duration.minutes 45\u003C/code\u003E\u003C/pre\u003E\n \n Where \u003Ccode\u003Eat\u003C/code\u003E performs multiplication, \u003Ccode\u003Eat_\u003C/code\u003E performs division - you multiply a\n speed by a duration to get a distance, but you divide a distance by a speed to\n get a duration.\n Similar to \u003Ccode\u003Eat\u003C/code\u003E, \u003Ccode\u003Eat_\u003C/code\u003E can be used to define an _inverse_ conversion function:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let pixelDensity : Rate\u0026lt;Pixels, Meters\u0026gt;\n         Pixels.pixels 96 |\u0026gt; Quantity.per (Length.inches 1)\n \n     let pixelsToLength (pixels: Pixels): Length =\n         Quantity.at_ pixelDensity pixels\n \n     pixelsToLength (Pixels.pixels 48)\n     --\u0026gt; Length.inches 0.5\n \n     Rate\u0026lt;DependentUnits, IndependentUnits\u0026gt;\n     --\u0026gt; Quantity DependentUnits\n     --\u0026gt; Quantity IndependentUnits\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#for_","title":"Quantity.for_","content":"Quantity.for_ \nfor_ \n\n Same as \u003Ccode\u003Eat\u003C/code\u003E but with the argument order flipped, which may read better\n in some cases:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Speed.kilometersPerHour 100\n         |\u0026gt; Quantity.for\n             (Duration.minutes 30)\n     --\u0026gt; Length.kilometers 50\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#inverse","title":"Quantity.inverse","content":"Quantity.inverse \ninverse \n\n Find the inverse of a given rate. May be useful if you are using a rate to\n define a conversion, and want to convert the other way;\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.at (Quantity.inverse rate)\u003C/code\u003E\u003C/pre\u003E\n is equivalent to\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     Quantity.at_ rate\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#rateProduct","title":"Quantity.rateProduct","content":"Quantity.rateProduct \nrateProduct \n\n Multiply two rates of change that \u0027cancel out\u0027 together, resulting in a new\n rate. For example, if you know the real-world speed of an on-screen object and\n the display resolution, then you can get the speed in pixels per second:\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let realWorldSpeed =\n         Speed.metersPerSecond 0.1\n     let resolution =\n         Pixels.float 96 |\u0026gt; Quantity.per Length.inch\n \n     Quantity.rateProduct realWorldSpeed resolution\n     --\u0026gt; Pixels.pixelsPerSecond 377.95\u003C/code\u003E\u003C/pre\u003E\n \n That is, \u0022length per duration\u0022 multiplied by \u0022pixels per length\u0022 gives you\n \u0022pixels per duration\u0022.\n Sometimes you can\u0027t directly multiply two rates to get what you want, in which\n case you may need to use \u003Ccode\u003Einverse\u003C/code\u003E in combination with\n \u003Ccode\u003ErateProduct\u003C/code\u003E. For example, if you know the on-screen speed of some object and\n the display resolution, then you can use those to get the real-world speed:\n\n \u003Cpre\u003E\u003Ccode class=\u0022fsharp language-fsharp\u0022\u003E\n     let pixelSpeed =\n         Pixels.pixelsPerSecond 500\n     let resolution =\n         Pixels.float 96 |\u0026gt; Quantity.per Length.inch\n     Quantity.rateProduct pixelSpeed\n         (Quantity.inverse resolution).Value\n     --\u0026gt; Speed.metersPerSecond 0.1323\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistancemodule.html","title":"Resistance","content":"Resistance \n\n A \u003Ccode\u003EResistance\u003C/code\u003E value represents an electrical resistance in ohms.\n  \nResistance.ohms \nohms \nResistance.inOhms \ninOhms"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistancemodule.html#ohms","title":"Resistance.ohms","content":"Resistance.ohms \nohms \n\n Construct a resistance from a number of ohms.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistancemodule.html#inOhms","title":"Resistance.inOhms","content":"Resistance.inOhms \ninOhms \n\n Convert a resistance to a number of ohms.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html","title":"SolidAngle","content":"SolidAngle \n\u003Ca href=\u0022https://en.wikipedia.org/wiki/Solid_angle\u0022\u003ESolid angle\u003C/a\u003E is a tricky concept\n to explain, but roughly speaking solid angle is for 3D what angle is for 2D. It\n can be used to measure three-dimensional field of view and is stored in\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Steradian\u0022\u003Esteradians\u003C/a\u003E.\n 2D angle can be thought of as how much circumference of the unit circle is\n covered. The unit circle (circle of radius 1) has a circumference of 2\u03C0, and an\n angle in radians corresponds to the corresponding amount of circumference\n covered. So an angle of 2\u03C0 radians covers the entire circumference of the\n circle, \u03C0 radians covers half the circle, \u03C0/2 radians covers a quarter, etc.\n Similarly, 3D solid angle can be thought of as how much surface area of the unit\n sphere is covered. The unit sphere has surface area of 4\u03C0, and a solid angle in\n steradians corresponds to the corresponding amount of surface area covered. So a\n solid angle of 4\u03C0 steradians covers the entire sphere, 2\u03C0 steradians covers half\n the sphere (one hemisphere), etc.\n  \nSolidAngle.steradians \nsteradians \nSolidAngle.inSteradians \ninSteradians \nSolidAngle.spats \nspats \nSolidAngle.inSpats \ninSpats \nSolidAngle.squareDegrees \nsquareDegrees \nSolidAngle.inSquareDegrees \ninSquareDegrees \nSolidAngle.conical \nconical \nSolidAngle.pyramidal \npyramidal"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#steradians","title":"SolidAngle.steradians","content":"SolidAngle.steradians \nsteradians \n\n Construct a solid angle from a number of steradians.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#inSteradians","title":"SolidAngle.inSteradians","content":"SolidAngle.inSteradians \ninSteradians \n\n Convert a solid angle to a number of steradians.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#spats","title":"SolidAngle.spats","content":"SolidAngle.spats \nspats \n\n Construct a solid angle from a number of \u003Ca href=\u0022https://en.wikipedia.org/wiki/Spat_(unit)\u0022\u003Espats\u003C/a\u003E.\n One spat is the 3D\n equivalent of one full turn; in the same way that one turn is the angle that\n covers an entire circle, one spat is the solid angle that covers an entire\n sphere. It\u0027s rare to have solid angles more than one spat, since solid angles\n are usually used to measure what angular fraction of a full sphere something\n covers.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n SolidAngle.spats 1\n --\u0026gt; SolidAngle.steradians (4 * pi)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#inSpats","title":"SolidAngle.inSpats","content":"SolidAngle.inSpats \ninSpats \n\n Convert a solid angle to a number of spats.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n SolidAngle.steradians (2 * pi) |\u0026gt; SolidAngle.inSpats\n --\u0026gt; 0.5\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#squareDegrees","title":"SolidAngle.squareDegrees","content":"SolidAngle.squareDegrees \nsquareDegrees \n\n Construct a solid angle from a number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Square_degree\u0022\u003Esquare degrees\u003C/a\u003E\n One square degree is,\n roughly speaking, the solid angle of a square on the surface of a sphere where\n the square is one degree wide and one degree tall as viewed from the center of\n the sphere.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     SolidAngle.squareDegrees 100\n     -\u0026gt; SolidAngle.steradians 0.03046\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#inSquareDegrees","title":"SolidAngle.inSquareDegrees","content":"SolidAngle.inSquareDegrees \ninSquareDegrees \n\n Convert a solid angle to a number of square degrees.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n    SolidAngle.spats 1 |\u0026gt; SolidAngle.inSquareDegrees\n    --\u0026gt; 41252.96125\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#conical","title":"SolidAngle.conical","content":"SolidAngle.conical \nconical \n\n Find the solid angle of a cone with a given tip angle (the angle between two\n opposite sides of the cone, \u003Cb\u003Enot\u003C/b\u003E the half-angle from the axis of the cone to\n its side). A 1 degree cone has a solid angle of approximately \u03C0/4 square\n degrees, similar to how a circle of diameter 1 has an area of \u03C0/4:\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     SolidAngle.conical (Angle.degrees 1)\n         |\u0026gt; SolidAngle.inSquareDegrees\n     --\u0026gt; 0.78539318\n     pi / 4\n     --\u0026gt; 0.78539816\u003C/code\u003E\u003C/pre\u003E\n A cone with a tip angle of 180 degrees is just a hemisphere:\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     SolidAngle.conical (Angle.degrees 180)\n     --\u0026gt; SolidAngle.spats 0.5\u003C/code\u003E\u003C/pre\u003E\n \u0022Inside out\u0022 cones are also supported, up to 360 degrees (a full sphere):\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     SolidAngle.conical (Angle.degrees 270)\n     --\u0026gt; SolidAngle.spats 0.85355\n     SolidAngle.conical (Angle.degrees 360)\n     --\u0026gt; SolidAngle.spats 1\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#pyramidal","title":"SolidAngle.pyramidal","content":"SolidAngle.pyramidal \npyramidal \n\n Find the solid angle of a rectangular pyramid given the angles between the\n two pairs of sides. A 1 degree by 1 degree pyramid has a solid angle of almost\n exactly 1 square degree:\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     SolidAngle.pyramidal\n         (Angle.degrees 1)\n         (Angle.degrees 1)\n     --\u0026gt; SolidAngle.squareDegrees 0.9999746\u003C/code\u003E\u003C/pre\u003E\n In general, the solid angle of a pyramid that is \u003Cb\u003En\u003C/b\u003E degrees wide by \u003Cb\u003Em\u003C/b\u003E degrees\n tall is (for relatively small values of \u003Cb\u003En\u003C/b\u003E and \u003Cb\u003Em\u003C/b\u003E) approximately \u003Cb\u003Enm\u003C/b\u003E square\n degrees:\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     SolidAngle.pyramidal\n         (Angle.degrees 10)\n         (Angle.degrees 10)\n     --\u0026gt; SolidAngle.squareDegrees 99.7474\n     SolidAngle.pyramidal\n         (Angle.degrees 60)\n         (Angle.degrees 30)\n     --\u0026gt; SolidAngle.squareDegrees 1704.08\u003C/code\u003E\u003C/pre\u003E\n A pyramid that is 180 degrees by 180 degrees covers an entire hemisphere:\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     SolidAngle.pyramidal\n         (Angle.degrees 180)\n         (Angle.degrees 180)\n     --\u0026gt; SolidAngle.spats 0.5\u003C/code\u003E\u003C/pre\u003E\n \u0022Inside out\u0022 pyramids greater than 180 degrees are not supported and will be\n treated as the corresponding \u0022normal\u0022 pyramid (an angle of 240 degrees will be\n treated as 120 degrees, an angle of 330 degrees will be treated as 30 degrees,\n etc.).\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html","title":"Speed","content":"Speed \n\n A \u003Ccode\u003ESpeed\u003C/code\u003E value represents a speed in meters per second, miles per hour etc.\n It is stored as a number of meters per second.\n  \nSpeed.metersPerSecond \nmetersPerSecond \nSpeed.inMetersPerSecond \ninMetersPerSecond \nSpeed.feetPerSecond \nfeetPerSecond \nSpeed.inFeetPerSecond \ninFeetPerSecond \nSpeed.kilometersPerHour \nkilometersPerHour \nSpeed.inKilometersPerHour \ninKilometersPerHour \nSpeed.milesPerHour \nmilesPerHour \nSpeed.inMilesPerHour \ninMilesPerHour"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#metersPerSecond","title":"Speed.metersPerSecond","content":"Speed.metersPerSecond \nmetersPerSecond \n\n Construct a speed from a number of meters per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inMetersPerSecond","title":"Speed.inMetersPerSecond","content":"Speed.inMetersPerSecond \ninMetersPerSecond \n\n Convert a speed to a number of meters per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#feetPerSecond","title":"Speed.feetPerSecond","content":"Speed.feetPerSecond \nfeetPerSecond \n\n Construct a speed from a number of feet per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inFeetPerSecond","title":"Speed.inFeetPerSecond","content":"Speed.inFeetPerSecond \ninFeetPerSecond \n\n Convert a speed to a number of feet per second.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#kilometersPerHour","title":"Speed.kilometersPerHour","content":"Speed.kilometersPerHour \nkilometersPerHour \n\n Construct a speed from a number of kilometers per hour.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inKilometersPerHour","title":"Speed.inKilometersPerHour","content":"Speed.inKilometersPerHour \ninKilometersPerHour \n\n Convert a speed to a number of kilometers per hour.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#milesPerHour","title":"Speed.milesPerHour","content":"Speed.milesPerHour \nmilesPerHour \n\n Construct a speed from a number of miles per hour.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inMilesPerHour","title":"Speed.inMilesPerHour","content":"Speed.inMilesPerHour \ninMilesPerHour \n\n Convert a speed to a number of miles per hour.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html","title":"SubstanceAmount","content":"SubstanceAmount \n\n A \u003Ccode\u003ESubstanceAmount\u003C/code\u003E value represents a substance amount in\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Mole_(unit)\u0022\u003Emoles\u003C/a\u003E.\n  \nSubstanceAmount.moles \nmoles \nSubstanceAmount.inMoles \ninMoles \nSubstanceAmount.picomoles \npicomoles \nSubstanceAmount.inPicomoles \ninPicomoles \nSubstanceAmount.nanomoles \nnanomoles \nSubstanceAmount.inNanomoles \ninNanomoles \nSubstanceAmount.micromoles \nmicromoles \nSubstanceAmount.inMicromoles \ninMicromoles \nSubstanceAmount.millimoles \nmillimoles \nSubstanceAmount.inMillimoles \ninMillimoles \nSubstanceAmount.centimoles \ncentimoles \nSubstanceAmount.inCentimoles \ninCentimoles \nSubstanceAmount.decimoles \ndecimoles \nSubstanceAmount.inDecimoles \ninDecimoles \nSubstanceAmount.kilomoles \nkilomoles \nSubstanceAmount.inKilomoles \ninKilomoles \nSubstanceAmount.megamoles \nmegamoles \nSubstanceAmount.inMegamoles \ninMegamoles \nSubstanceAmount.gigamoles \ngigamoles \nSubstanceAmount.inGigamoles \ninGigamoles"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#moles","title":"SubstanceAmount.moles","content":"SubstanceAmount.moles \nmoles \n\n Construct a substance amount from a number of moles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMoles","title":"SubstanceAmount.inMoles","content":"SubstanceAmount.inMoles \ninMoles \n\n Convert a substance amount to a number of moles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#picomoles","title":"SubstanceAmount.picomoles","content":"SubstanceAmount.picomoles \npicomoles \n\n Construct a substance amount from a number of picomoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inPicomoles","title":"SubstanceAmount.inPicomoles","content":"SubstanceAmount.inPicomoles \ninPicomoles \n\n Convert a substance amount to a number of picomoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#nanomoles","title":"SubstanceAmount.nanomoles","content":"SubstanceAmount.nanomoles \nnanomoles \n\n Construct a substance amount from a number of nanomoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inNanomoles","title":"SubstanceAmount.inNanomoles","content":"SubstanceAmount.inNanomoles \ninNanomoles \n\n Convert a substance amount to a number of nanomoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#micromoles","title":"SubstanceAmount.micromoles","content":"SubstanceAmount.micromoles \nmicromoles \n\n Construct a substance amount from a number of micromoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMicromoles","title":"SubstanceAmount.inMicromoles","content":"SubstanceAmount.inMicromoles \ninMicromoles \n\n Convert a substance amount to a number of micromoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#millimoles","title":"SubstanceAmount.millimoles","content":"SubstanceAmount.millimoles \nmillimoles \n\n Construct a substance amount from a number of millimoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMillimoles","title":"SubstanceAmount.inMillimoles","content":"SubstanceAmount.inMillimoles \ninMillimoles \n\n Convert a substance amount to a number of millimoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#centimoles","title":"SubstanceAmount.centimoles","content":"SubstanceAmount.centimoles \ncentimoles \n\n Construct a substance amount from a number of centimoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inCentimoles","title":"SubstanceAmount.inCentimoles","content":"SubstanceAmount.inCentimoles \ninCentimoles \n\n Convert a substance amount to a number of centimoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#decimoles","title":"SubstanceAmount.decimoles","content":"SubstanceAmount.decimoles \ndecimoles \n\n Construct a substance amount from a number of decimoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inDecimoles","title":"SubstanceAmount.inDecimoles","content":"SubstanceAmount.inDecimoles \ninDecimoles \n\n Convert a substance amount to a number of decimoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#kilomoles","title":"SubstanceAmount.kilomoles","content":"SubstanceAmount.kilomoles \nkilomoles \n\n Construct a substance amount from a number of kilomoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inKilomoles","title":"SubstanceAmount.inKilomoles","content":"SubstanceAmount.inKilomoles \ninKilomoles \n\n Convert a substance amount to a number of kilomoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#megamoles","title":"SubstanceAmount.megamoles","content":"SubstanceAmount.megamoles \nmegamoles \n\n Construct a substance amount from a number of megamoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMegamoles","title":"SubstanceAmount.inMegamoles","content":"SubstanceAmount.inMegamoles \ninMegamoles \n\n Convert a substance amount to a number of megamoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#gigamoles","title":"SubstanceAmount.gigamoles","content":"SubstanceAmount.gigamoles \ngigamoles \n\n Construct a substance amount from a number of gigamoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inGigamoles","title":"SubstanceAmount.inGigamoles","content":"SubstanceAmount.inGigamoles \ninGigamoles \n\n Convert a substance amount to a number of gigamoles.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html","title":"Temperature","content":"Temperature \n\n Unlike other modules in \u003Ccode\u003EMath.Units\u003C/code\u003E, this module contains two different\n primary types:\n \u003Cul\u003E\u003Cli\u003E\u003Cdescription\u003E\n  \u003Cc\u003ETemperature\u003C/c\u003E, which is not actually a \u003Cc\u003EQuantity\u003C/c\u003E since temperatures don\u0027t\n     really act like normal quantities. For example, it doesn\u0027t make sense to\n     add two temperatures or find the ratio between them.\n \u003C/description\u003E\u003C/li\u003E\u003Cli\u003E\u003Cdescription\u003E\n  \u003Cc\u003ETemperatureDelta\u003C/c\u003E, which represents the difference between two temperatures. A \u003Cc\u003ETemperatureDelta\u003C/c\u003E\u003Ci\u003Eis\u003C/i\u003E a \u003Cc\u003EQuantity\u003C/c\u003E since it does make sense to add two deltas to get a net\n     delta, find the ratio between two deltas (one rise in temperature might be\n     twice as much as another rise in temperature), etc.\n \u003C/description\u003E\u003C/li\u003E\u003C/ul\u003E \nTemperature.kelvins \nkelvins \nTemperature.inKelvins \ninKelvins \nTemperature.degreesCelsius \ndegreesCelsius \nTemperature.inDegreesCelsius \ninDegreesCelsius \nTemperature.degreesFahrenheit \ndegreesFahrenheit \nTemperature.inDegreesFahrenheit \ninDegreesFahrenheit \nTemperature.absoluteZero \nabsoluteZero \nTemperature.celsiusDegrees \ncelsiusDegrees \nTemperature.inCelsiusDegrees \ninCelsiusDegrees \nTemperature.fahrenheitDegrees \nfahrenheitDegrees \nTemperature.inFahrenheitDegrees \ninFahrenheitDegrees \nTemperature.celsiusDegree \ncelsiusDegree \nTemperature.fahrenheitDegree \nfahrenheitDegree \nTemperature.lessThan \nlessThan \nTemperature.lessThanOrEqualTo \nlessThanOrEqualTo \nTemperature.greaterThan \ngreaterThan \nTemperature.greaterThanOrEqualTo \ngreaterThanOrEqualTo \nTemperature.plus \nplus \nTemperature.clamp \nclamp \nTemperature.round \nround \nTemperature.abs \nabs \nTemperature.min \nmin \nTemperature.max \nmax \nTemperature.minimum \nminimum \nTemperature.maximum \nmaximum \nTemperature.sort \nsort \nTemperature.sortBy \nsortBy"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#kelvins","title":"Temperature.kelvins","content":"Temperature.kelvins \nkelvins \n\n Construct a temperature from a number of\n \u003Ca href=\u0022https://en.wikipedia.org/wiki/Kelvin\u0022\u003Ekelvins\u003C/a\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inKelvins","title":"Temperature.inKelvins","content":"Temperature.inKelvins \ninKelvins \n\n Convert a temperature to a number of kelvins.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#degreesCelsius","title":"Temperature.degreesCelsius","content":"Temperature.degreesCelsius \ndegreesCelsius \n\n Construct a temperature from a number of degrees Celsius.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inDegreesCelsius","title":"Temperature.inDegreesCelsius","content":"Temperature.inDegreesCelsius \ninDegreesCelsius \n\n Convert a temperature to a number of degrees Celsius.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#degreesFahrenheit","title":"Temperature.degreesFahrenheit","content":"Temperature.degreesFahrenheit \ndegreesFahrenheit \n\n Construct a temperature from a number of degrees Fahrenheit.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inDegreesFahrenheit","title":"Temperature.inDegreesFahrenheit","content":"Temperature.inDegreesFahrenheit \ninDegreesFahrenheit \n\n Convert a temperature to a number of degrees Fahrenheit.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#absoluteZero","title":"Temperature.absoluteZero","content":"Temperature.absoluteZero \nabsoluteZero \n\u003Ca href=\u0022https://en.wikipedia.org/wiki/Absolute_zero\u0022\u003EAbsolute zero\u003C/a\u003E,\n equal to zero kelvins or -273.15 degrees Celsius.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#celsiusDegrees","title":"Temperature.celsiusDegrees","content":"Temperature.celsiusDegrees \ncelsiusDegrees \n\n Construct a temperature delta from a number of Celsius degrees.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inCelsiusDegrees","title":"Temperature.inCelsiusDegrees","content":"Temperature.inCelsiusDegrees \ninCelsiusDegrees \n\n Convert a temperature delta to a number of Celsius degrees.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#fahrenheitDegrees","title":"Temperature.fahrenheitDegrees","content":"Temperature.fahrenheitDegrees \nfahrenheitDegrees \n\n Construct a temperature delta from a number of Fahrenheit degrees.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inFahrenheitDegrees","title":"Temperature.inFahrenheitDegrees","content":"Temperature.inFahrenheitDegrees \ninFahrenheitDegrees \n\n Convert a temperature delta to a number of Fahrenheit degrees.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#celsiusDegree","title":"Temperature.celsiusDegree","content":"Temperature.celsiusDegree \ncelsiusDegree \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#fahrenheitDegree","title":"Temperature.fahrenheitDegree","content":"Temperature.fahrenheitDegree \nfahrenheitDegree \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#lessThan","title":"Temperature.lessThan","content":"Temperature.lessThan \nlessThan \n\n This is meant to be used with pipe operators.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Temperature.inDegreesCelsius 10.\n     |\u0026gt; Temperature.greaterThan (Temperature.inDegreesCelsius 15.)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#lessThanOrEqualTo","title":"Temperature.lessThanOrEqualTo","content":"Temperature.lessThanOrEqualTo \nlessThanOrEqualTo \n\n This is meant to be used with pipe operators.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Temperature.inDegreesCelsius 10.\n     |\u0026gt; Temperature.greaterThanOrEqualTo (Temperature.inDegreesCelsius 15.)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#greaterThan","title":"Temperature.greaterThan","content":"Temperature.greaterThan \ngreaterThan \n\n This is meant to be used with pipe operators.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Temperature.inDegreesCelsius 30.\n     |\u0026gt; Temperature.greaterThan (Temperature.inDegreesCelsius 15.)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#greaterThanOrEqualTo","title":"Temperature.greaterThanOrEqualTo","content":"Temperature.greaterThanOrEqualTo \ngreaterThanOrEqualTo \n\n This is meant to be used with pipe operators.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Temperature.inDegreesCelsius 30.\n     |\u0026gt; Temperature.greaterThan (Temperature.inDegreesCelsius 15.)\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#plus","title":"Temperature.plus","content":"Temperature.plus \nplus \n\n This is meant to be used with pipe operators.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Temperature.inDegreesCelsius 20.\n     |\u0026gt; Temperature.plus (Temperature.celsiusDegrees 35.)\n     --\u0026gt; Temperature.inDegreesCelsius 55.\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#clamp","title":"Temperature.clamp","content":"Temperature.clamp \nclamp \n\n Given a lower and upper bound, clamp a given temperature to within those\n bounds.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#round","title":"Temperature.round","content":"Temperature.round \nround \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#abs","title":"Temperature.abs","content":"Temperature.abs \nabs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#min","title":"Temperature.min","content":"Temperature.min \nmin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#max","title":"Temperature.max","content":"Temperature.max \nmax \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#minimum","title":"Temperature.minimum","content":"Temperature.minimum \nminimum \n\n Find the minimum of a list of temperatures. Returns \u003Ccode\u003ENothing\u003C/code\u003E if the list\n is empty.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#maximum","title":"Temperature.maximum","content":"Temperature.maximum \nmaximum \n\n Find the maximum of a list of temperatures. Returns \u003Ccode\u003ENothing\u003C/code\u003E if the list\n is empty.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#sort","title":"Temperature.sort","content":"Temperature.sort \nsort \n\n Sort a list of temperatures from lowest to highest.\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Temperature.sort\n         [ Temperature.degreesCelsius 20\n           Temperature.kelvins 300\n           Temperature.degreesFahrenheit 74\n         ]\n     --\u0026gt; [ Temperature.degreesCelsius 20\n     --\u0026gt;   Temperature.degreesFahrenheit 74\n     --\u0026gt;   Temperature.kelvins 300\n     --\u0026gt; ]\u003C/code\u003E\u003C/pre\u003E"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#sortBy","title":"Temperature.sortBy","content":"Temperature.sortBy \nsortBy \n\n Sort an arbitrary list of values by a derived \u003Ccode\u003ETemperature\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltagemodule.html","title":"Voltage","content":"Voltage \n\n A \u003Ccode\u003EVoltage\u003C/code\u003E value represents a voltage (electric potential difference, if\n we\u0027re being picky) in volts.\n  \nVoltage.volts \nvolts \nVoltage.inVolts \ninVolts"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltagemodule.html#volts","title":"Voltage.volts","content":"Voltage.volts \nvolts \n\n Construct a voltage from a number of volts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltagemodule.html#inVolts","title":"Voltage.inVolts","content":"Voltage.inVolts \ninVolts \n\n Convert a voltage to a number of volts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html","title":"Volume","content":"Volume \n\n A \u003Ccode\u003EVolume\u003C/code\u003E represents a volume in cubic meters, cubic feet, liters, US\n liquid gallons, imperial fluid ounces etc. It is stored as a number of cubic\n meters.\n  \nVolume.cubicMeters \ncubicMeters \nVolume.inCubicMeters \ninCubicMeters \nVolume.milliliters \nmilliliters \nVolume.inMilliliters \ninMilliliters \nVolume.cubicCentimeters \ncubicCentimeters \nVolume.inCubicCentimeters \ninCubicCentimeters \nVolume.liters \nliters \nVolume.inLiters \ninLiters \nVolume.cubicInches \ncubicInches \nVolume.inCubicInches \ninCubicInches \nVolume.cubicFeet \ncubicFeet \nVolume.inCubicFeet \ninCubicFeet \nVolume.cubicYards \ncubicYards \nVolume.inCubicYards \ninCubicYards \nVolume.usLiquidGallons \nusLiquidGallons \nVolume.inUsLiquidGallons \ninUsLiquidGallons \nVolume.usDryGallons \nusDryGallons \nVolume.inUsDryGallons \ninUsDryGallons \nVolume.imperialGallons \nimperialGallons \nVolume.inImperialGallons \ninImperialGallons \nVolume.usLiquidQuarts \nusLiquidQuarts \nVolume.inUsLiquidQuarts \ninUsLiquidQuarts \nVolume.usDryQuarts \nusDryQuarts \nVolume.inUsDryQuarts \ninUsDryQuarts \nVolume.imperialQuarts \nimperialQuarts \nVolume.inImperialQuarts \ninImperialQuarts \nVolume.usLiquidPints \nusLiquidPints \nVolume.inUsLiquidPints \ninUsLiquidPints \nVolume.usDryPints \nusDryPints \nVolume.inUsDryPints \ninUsDryPints \nVolume.imperialPints \nimperialPints \nVolume.inImperialPints \ninImperialPints \nVolume.usFluidOunces \nusFluidOunces \nVolume.inUsFluidOunces \ninUsFluidOunces \nVolume.imperialFluidOunces \nimperialFluidOunces \nVolume.inImperialFluidOunces \ninImperialFluidOunces \nVolume.cubicMeter \ncubicMeter \nVolume.milliliter \nmilliliter \nVolume.cubicCentimeter \ncubicCentimeter \nVolume.liter \nliter \nVolume.cubicInch \ncubicInch \nVolume.cubicFoot \ncubicFoot \nVolume.cubicYard \ncubicYard \nVolume.usLiquidGallon \nusLiquidGallon \nVolume.usDryGallon \nusDryGallon \nVolume.imperialGallon \nimperialGallon \nVolume.usLiquidQuart \nusLiquidQuart \nVolume.usDryQuart \nusDryQuart \nVolume.imperialQuart \nimperialQuart \nVolume.usLiquidPint \nusLiquidPint \nVolume.usDryPint \nusDryPint \nVolume.imperialPint \nimperialPint \nVolume.usFluidOunce \nusFluidOunce \nVolume.imperialFluidOunce \nimperialFluidOunce"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicMeters","title":"Volume.cubicMeters","content":"Volume.cubicMeters \ncubicMeters \n\n Construct a volume from a number of cubic meters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicMeters","title":"Volume.inCubicMeters","content":"Volume.inCubicMeters \ninCubicMeters \n\n Convert a volume to a number of cubic meters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#milliliters","title":"Volume.milliliters","content":"Volume.milliliters \nmilliliters \n\n Construct a volume from a number of milliliters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inMilliliters","title":"Volume.inMilliliters","content":"Volume.inMilliliters \ninMilliliters \n\n Convert a volume to a number of milliliters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicCentimeters","title":"Volume.cubicCentimeters","content":"Volume.cubicCentimeters \ncubicCentimeters \n\n Construct a volume from a number of cubic centimeters.\n Alias for \u003Ccode\u003Emilliliters\u003C/code\u003E.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicCentimeters","title":"Volume.inCubicCentimeters","content":"Volume.inCubicCentimeters \ninCubicCentimeters \n\n Convert a volume to a number of cubic centimeters.\n Alias for \u003Ccode\u003EinMilliliters\u003C/code\u003E.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#liters","title":"Volume.liters","content":"Volume.liters \nliters \n\n Construct a volume from a number of liters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inLiters","title":"Volume.inLiters","content":"Volume.inLiters \ninLiters \n\n Convert a volume to a number of liters.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicInches","title":"Volume.cubicInches","content":"Volume.cubicInches \ncubicInches \n\n Construct a volume from a number of cubic inches.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicInches","title":"Volume.inCubicInches","content":"Volume.inCubicInches \ninCubicInches \n\n Convert a volume to a number of cubic inches.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicFeet","title":"Volume.cubicFeet","content":"Volume.cubicFeet \ncubicFeet \n\n Construct a volume from a number of cubic feet.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicFeet","title":"Volume.inCubicFeet","content":"Volume.inCubicFeet \ninCubicFeet \n\n Convert a volume to a number of cubic feet.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicYards","title":"Volume.cubicYards","content":"Volume.cubicYards \ncubicYards \n\n Construct a volume from a number of cubic yards.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicYards","title":"Volume.inCubicYards","content":"Volume.inCubicYards \ninCubicYards \n\n Convert a volume to a number of cubic yards.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidGallons","title":"Volume.usLiquidGallons","content":"Volume.usLiquidGallons \nusLiquidGallons \n\n Construct a volume from a number of U.S. liquid gallon.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsLiquidGallons","title":"Volume.inUsLiquidGallons","content":"Volume.inUsLiquidGallons \ninUsLiquidGallons \n\n Convert a volume to a number of U.S. liquid gallons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryGallons","title":"Volume.usDryGallons","content":"Volume.usDryGallons \nusDryGallons \n\n Construct a volume from a number of U.S. dry gallons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsDryGallons","title":"Volume.inUsDryGallons","content":"Volume.inUsDryGallons \ninUsDryGallons \n\n Convert a volume to a number of U.S. dry gallons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialGallons","title":"Volume.imperialGallons","content":"Volume.imperialGallons \nimperialGallons \n\n Construct a volume from a number of imperial gallons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialGallons","title":"Volume.inImperialGallons","content":"Volume.inImperialGallons \ninImperialGallons \n\n Convert a volume to a number of imperial gallons.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidQuarts","title":"Volume.usLiquidQuarts","content":"Volume.usLiquidQuarts \nusLiquidQuarts \n\n Construct a volume from a number of U.S. liquid quarts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsLiquidQuarts","title":"Volume.inUsLiquidQuarts","content":"Volume.inUsLiquidQuarts \ninUsLiquidQuarts \n\n Convert a volume to a number of U.S. liquid quarts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryQuarts","title":"Volume.usDryQuarts","content":"Volume.usDryQuarts \nusDryQuarts \n\n Construct a volume from a number of U.S. dry quarts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsDryQuarts","title":"Volume.inUsDryQuarts","content":"Volume.inUsDryQuarts \ninUsDryQuarts \n\n Convert a volume to a number of U.S. dry quarts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialQuarts","title":"Volume.imperialQuarts","content":"Volume.imperialQuarts \nimperialQuarts \n\n Construct a volume from a number of imperial quarts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialQuarts","title":"Volume.inImperialQuarts","content":"Volume.inImperialQuarts \ninImperialQuarts \n\n Convert a volume to a number of imperial quarts.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidPints","title":"Volume.usLiquidPints","content":"Volume.usLiquidPints \nusLiquidPints \n\n Construct a volume from a number of U.S. liquid pints.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsLiquidPints","title":"Volume.inUsLiquidPints","content":"Volume.inUsLiquidPints \ninUsLiquidPints \n\n Convert a volume to a number of U.S. liquid pints.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryPints","title":"Volume.usDryPints","content":"Volume.usDryPints \nusDryPints \n\n Construct a volume from a number of U.S. dry pints.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsDryPints","title":"Volume.inUsDryPints","content":"Volume.inUsDryPints \ninUsDryPints \n\n Convert a volume to a number of U.S. dry pints.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialPints","title":"Volume.imperialPints","content":"Volume.imperialPints \nimperialPints \n\n Construct a volume from a number of imperial pints.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialPints","title":"Volume.inImperialPints","content":"Volume.inImperialPints \ninImperialPints \n\n Convert a volume to a number of imperial pints.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usFluidOunces","title":"Volume.usFluidOunces","content":"Volume.usFluidOunces \nusFluidOunces \n\n Construct a volume from a number of U.S. fluid ounces.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsFluidOunces","title":"Volume.inUsFluidOunces","content":"Volume.inUsFluidOunces \ninUsFluidOunces \n\n Convert a volume to a number of U.S. fluid ounces.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialFluidOunces","title":"Volume.imperialFluidOunces","content":"Volume.imperialFluidOunces \nimperialFluidOunces \n\n Construct a volume from a number of imperial fluid ounces.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialFluidOunces","title":"Volume.inImperialFluidOunces","content":"Volume.inImperialFluidOunces \ninImperialFluidOunces \n\n Convert a volume to a number of imperial fluid ounces.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicMeter","title":"Volume.cubicMeter","content":"Volume.cubicMeter \ncubicMeter \n\n One cubic meter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#milliliter","title":"Volume.milliliter","content":"Volume.milliliter \nmilliliter \n\n One milliliter meter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicCentimeter","title":"Volume.cubicCentimeter","content":"Volume.cubicCentimeter \ncubicCentimeter \n\n One cubic centimeter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#liter","title":"Volume.liter","content":"Volume.liter \nliter \n\n One liter.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicInch","title":"Volume.cubicInch","content":"Volume.cubicInch \ncubicInch \n\n One cubic inch.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicFoot","title":"Volume.cubicFoot","content":"Volume.cubicFoot \ncubicFoot \n\n One cubic foot.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicYard","title":"Volume.cubicYard","content":"Volume.cubicYard \ncubicYard \n\n One cubic yard.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidGallon","title":"Volume.usLiquidGallon","content":"Volume.usLiquidGallon \nusLiquidGallon \n\n One US liquid gallon.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryGallon","title":"Volume.usDryGallon","content":"Volume.usDryGallon \nusDryGallon \n\n One US dry gallon.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialGallon","title":"Volume.imperialGallon","content":"Volume.imperialGallon \nimperialGallon \n\n One imperial gallon.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidQuart","title":"Volume.usLiquidQuart","content":"Volume.usLiquidQuart \nusLiquidQuart \n\n One liquid quart.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryQuart","title":"Volume.usDryQuart","content":"Volume.usDryQuart \nusDryQuart \n\n One US dry quart.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialQuart","title":"Volume.imperialQuart","content":"Volume.imperialQuart \nimperialQuart \n\n One imperial quart.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidPint","title":"Volume.usLiquidPint","content":"Volume.usLiquidPint \nusLiquidPint \n\n One US liquid pint.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryPint","title":"Volume.usDryPint","content":"Volume.usDryPint \nusDryPint \n\n One US dry pint.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialPint","title":"Volume.imperialPint","content":"Volume.imperialPint \nimperialPint \n\n One imperial pint.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usFluidOunce","title":"Volume.usFluidOunce","content":"Volume.usFluidOunce \nusFluidOunce \n\n One US fluid ounce.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialFluidOunce","title":"Volume.imperialFluidOunce","content":"Volume.imperialFluidOunce \nimperialFluidOunce \n\n One imperial fluid ounce.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-acceleration.html","title":"Acceleration","content":"Acceleration \n \nAcceleration.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-acceleration.html#Value","title":"Acceleration.Value","content":"Acceleration.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-amperes.html","title":"Amperes","content":"Amperes \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angle.html","title":"Angle","content":"Angle \n \nAngle.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angle.html#Value","title":"Angle.Value","content":"Angle.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularacceleration.html","title":"AngularAcceleration","content":"AngularAcceleration \n \nAngularAcceleration.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularacceleration.html#Value","title":"AngularAcceleration.Value","content":"AngularAcceleration.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeed.html","title":"AngularSpeed","content":"AngularSpeed \n \nAngularSpeed.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeed.html#Value","title":"AngularSpeed.Value","content":"AngularSpeed.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-area.html","title":"Area","content":"Area \n \nArea.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-area.html#Value","title":"Area.Value","content":"Area.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-candelas.html","title":"Candelas","content":"Candelas \n\u003Ca href=\u0022https://en.wikipedia.org/wiki/Candela\u0022\u003ECandelas\u003C/a\u003E\n are a measure of \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-luminousintensity.html\u0022\u003ELuminousIntensity\u003C/a\u003E\n measured in \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-lumens.html\u0022\u003ELumens\u003C/a\u003E per\n \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-steradians.html\u0022\u003ESteradians\u003C/a\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitance.html","title":"Capacitance","content":"Capacitance \n \nCapacitance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitance.html#Value","title":"Capacitance.Value","content":"Capacitance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-celsiusdegrees.html","title":"CelsiusDegrees","content":"CelsiusDegrees \n \nCelsiusDegrees.CelsiusDegrees \nCelsiusDegrees"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-celsiusdegrees.html#CelsiusDegrees","title":"CelsiusDegrees.CelsiusDegrees","content":"CelsiusDegrees.CelsiusDegrees \nCelsiusDegrees \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-charge.html","title":"Charge","content":"Charge \n \nCharge.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-charge.html#Value","title":"Charge.Value","content":"Charge.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-coulombs.html","title":"Coulombs","content":"Coulombs \n \nCoulombs.Coulombs \nCoulombs"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-coulombs.html#Coulombs","title":"Coulombs.Coulombs","content":"Coulombs.Coulombs \nCoulombs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-cubed-1.html","title":"Cubed\u003C\u0027Units\u003E","content":"Cubed\u003C\u0027Units\u003E \n\n Represents a units type that is the cube of some other units type; for\n example, \u003Ccode\u003EMeters\u003C/code\u003E is one units type (the units type of a \u003Ccode\u003ELength\u003C/code\u003E) and\n \u003Ccode\u003ECubed Meters\u003C/code\u003E is another (the units type of an \u003Ccode\u003EVolume\u003C/code\u003E). See the\n \u003Ccode\u003EQuantity.cubed\u003C/code\u003E and \u003Ccode\u003EQuantity.cbrt\u003C/code\u003E functions for examples of\n use.\n This is a special case of the \u003Ccode\u003EProduct\u003C/code\u003E units type.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-cubicmeters.html","title":"CubicMeters","content":"CubicMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-current.html","title":"Current","content":"Current \n \nCurrent.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-current.html#Value","title":"Current.Value","content":"Current.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-density.html","title":"Density","content":"Density \n \nDensity.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-density.html#Value","title":"Density.Value","content":"Density.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-duration.html","title":"Duration","content":"Duration \n \nDuration.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-duration.html#Value","title":"Duration.Value","content":"Duration.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energy.html","title":"Energy","content":"Energy \n \nEnergy.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energy.html#Value","title":"Energy.Value","content":"Energy.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-farads.html","title":"Farads","content":"Farads \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html","title":"Float","content":"Float \n\n A static class providing added features to the floating point number class.\n  \nFloat.Epsilon \nEpsilon \nFloat.MinNormal \nMinNormal \nFloat.DigitPrecision \nDigitPrecision"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html#Epsilon","title":"Float.Epsilon","content":"Float.Epsilon \nEpsilon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html#MinNormal","title":"Float.MinNormal","content":"Float.MinNormal \nMinNormal \n\n The smallest number that a 64-bit floating point number can accurately\n represent. Values lower than this may not have the expected results in\n some operations. This number is needed to handle the special case of\n trying to compare two numbers that are really close to zero.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html#DigitPrecision","title":"Float.DigitPrecision","content":"Float.DigitPrecision \nDigitPrecision \n\n The number of digits (in base 10) that are used for approximate equality tests.\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-force.html","title":"Force","content":"Force \n \nForce.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-force.html#Value","title":"Force.Value","content":"Force.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-henries.html","title":"Henries","content":"Henries \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminance.html","title":"Illuminance","content":"Illuminance \n \nIlluminance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminance.html#Value","title":"Illuminance.Value","content":"Illuminance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductance.html","title":"Inductance","content":"Inductance \n \nInductance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductance.html#Value","title":"Inductance.Value","content":"Inductance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval-1.html","title":"Interval\u003C\u0027Units\u003E","content":"Interval\u003C\u0027Units\u003E \n\n A finite, closed interval with a minimum and maximum number. This can\n represent an interval of any type.\n\n For example...\n \u003Cpre\u003E\u003Ccode class=\u0022\u0022\u003E\n     Interval float\n     Interval int\n     Interval Angle\u003C/code\u003E\u003C/pre\u003E \nInterval\u003C\u0027Units\u003E.Interval \nInterval"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval-1.html#Interval","title":"Interval\u003C\u0027Units\u003E.Interval","content":"Interval\u003C\u0027Units\u003E.Interval \nInterval \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-joules.html","title":"Joules","content":"Joules \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-kilograms.html","title":"Kilograms","content":"Kilograms \n \nKilograms.Kilograms \nKilograms"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-kilograms.html#Kilograms","title":"Kilograms.Kilograms","content":"Kilograms.Kilograms \nKilograms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-kilogramspercubicmeter.html","title":"KilogramsPerCubicMeter","content":"KilogramsPerCubicMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-length.html","title":"Length","content":"Length \n \nLength.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-length.html#Value","title":"Length.Value","content":"Length.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lumens.html","title":"Lumens","content":"Lumens \n \nLumens.Lumens \nLumens"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lumens.html#Lumens","title":"Lumens.Lumens","content":"Lumens.Lumens \nLumens \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminance.html","title":"Luminance","content":"Luminance \n \nLuminance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminance.html#Value","title":"Luminance.Value","content":"Luminance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousflux.html","title":"LuminousFlux","content":"LuminousFlux \n \nLuminousFlux.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousflux.html#Value","title":"LuminousFlux.Value","content":"LuminousFlux.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensity.html","title":"LuminousIntensity","content":"LuminousIntensity \n \nLuminousIntensity.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensity.html#Value","title":"LuminousIntensity.Value","content":"LuminousIntensity.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lux.html","title":"Lux","content":"Lux \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-mass.html","title":"Mass","content":"Mass \n \nMass.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-mass.html#Value","title":"Mass.Value","content":"Mass.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meters.html","title":"Meters","content":"Meters \n \nMeters.Meters \nMeters"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meters.html#Meters","title":"Meters.Meters","content":"Meters.Meters \nMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meterspersecond.html","title":"MetersPerSecond","content":"MetersPerSecond \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meterspersecondsquared.html","title":"MetersPerSecondSquared","content":"MetersPerSecondSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molarity.html","title":"Molarity","content":"Molarity \n \nMolarity.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molarity.html#Value","title":"Molarity.Value","content":"Molarity.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-moles.html","title":"Moles","content":"Moles \n \nMoles.Moles \nMoles"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-moles.html#Moles","title":"Moles.Moles","content":"Moles.Moles \nMoles \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molespercubicmeter.html","title":"MolesPerCubicMeter","content":"MolesPerCubicMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-newtons.html","title":"Newtons","content":"Newtons \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-nits.html","title":"Nits","content":"Nits \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-ohms.html","title":"Ohms","content":"Ohms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pascals.html","title":"Pascals","content":"Pascals \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percent.html","title":"Percent","content":"Percent \n\n A percentage value. The default range for percentages is 0 to 1 but can also be given in the range 0 to 100.\n \nPercent.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percent.html#Value","title":"Percent.Value","content":"Percent.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percentage.html","title":"Percentage","content":"Percentage \n \nPercentage.Percentage \nPercentage"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percentage.html#Percentage","title":"Percentage.Percentage","content":"Percentage.Percentage \nPercentage \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixel.html","title":"Pixel","content":"Pixel \n \nPixel.Pixel \nPixel"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixel.html#Pixel","title":"Pixel.Pixel","content":"Pixel.Pixel \nPixel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixels.html","title":"Pixels","content":"Pixels \n \nPixels.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixels.html#Value","title":"Pixels.Value","content":"Pixels.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelspersecond.html","title":"PixelsPerSecond","content":"PixelsPerSecond \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelspersecondsquared.html","title":"PixelsPerSecondSquared","content":"PixelsPerSecondSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-power.html","title":"Power","content":"Power \n \nPower.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-power.html#Value","title":"Power.Value","content":"Power.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressure.html","title":"Pressure","content":"Pressure \n \nPressure.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressure.html#Value","title":"Pressure.Value","content":"Pressure.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-product-2.html","title":"Product\u003C\u0027Unit1, \u0027Unit2\u003E","content":"Product\u003C\u0027Unit1, \u0027Unit2\u003E \n\n Represents a units type that is the product of two other units types. This\n is a more general form of \u003Ccode\u003ESquared\u003C/code\u003E or \u003Ccode\u003ECubed\u003C/code\u003E. See\n \u003Ca href=\u0022https://docs.microsoft.com/dotnet/api/math.units.quantity.product\u0022\u003EQuantity.product\u003C/a\u003E,\n \u003Ca href=\u0022https://docs.microsoft.com/dotnet/api/math.units.quantity.times\u0022\u003EQuantity.times\u003C/a\u003E,\n \u003Ca href=\u0022https://docs.microsoft.com/dotnet/api/math.units.quantity.over\u0022\u003EQuantity.over\u003C/a\u003E and\n \u003Ca href=\u0022https://docs.microsoft.com/dotnet/api/math.units.quantity.over_\u0022\u003EQuantity.over_\u003C/a\u003E for how it can be used.\n  \nProduct\u003C\u0027Unit1, \u0027Unit2\u003E.Product \nProduct"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-product-2.html#Product","title":"Product\u003C\u0027Unit1, \u0027Unit2\u003E.Product","content":"Product\u003C\u0027Unit1, \u0027Unit2\u003E.Product \nProduct \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html","title":"Quantity\u003C\u0027Units\u003E","content":"Quantity\u003C\u0027Units\u003E \n\n A \u003Ccode\u003EQuantity\u003C/code\u003E is effectively a \u003Ccode\u003Enumber\u003C/code\u003E (an \u003Ccode\u003EInt\u003C/code\u003E or \u003Ccode\u003EFloat\u003C/code\u003E) tagged with a\n \u003Ccode\u003Eunits\u003C/code\u003E type. So a\n     Quantity Float Meters\n is a \u003Ccode\u003EFloat\u003C/code\u003E number of \u003Ccode\u003EMeters\u003C/code\u003E and a\n     Quantity Int Pixels\n is an \u003Ccode\u003EInt\u003C/code\u003E number of \u003Ccode\u003EPixels\u003C/code\u003E. When compiling with \u003Ccode\u003Eelm make --optimize\u003C/code\u003E the\n \u003Ccode\u003EQuantity\u003C/code\u003E wrapper type will be compiled away, so the runtime performance should\n be comparable to using a raw \u003Ccode\u003EFloat\u003C/code\u003E or \u003Ccode\u003EInt\u003C/code\u003E.\n  \nQuantity\u003C\u0027Units\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nQuantity\u003C\u0027Units\u003E.Comparison \nComparison \nQuantity\u003C\u0027Units\u003E.Equals \nEquals \nQuantity\u003C\u0027Units\u003E.LessThan \nLessThan \nQuantity\u003C\u0027Units\u003E.Value \nValue \nQuantity\u003C\u0027Units\u003E.Abs \nAbs \nQuantity\u003C\u0027Units\u003E.Ceiling \nCeiling \nQuantity\u003C\u0027Units\u003E.Floor \nFloor \nQuantity\u003C\u0027Units\u003E.Max \nMax \nQuantity\u003C\u0027Units\u003E.Min \nMin \nQuantity\u003C\u0027Units\u003E.Round \nRound \nQuantity\u003C\u0027Units\u003E.Sqrt \nSqrt \nQuantity\u003C\u0027Units\u003E.Truncate \nTruncate \nQuantity\u003C\u0027Units\u003E.(\u002B) \n(\u002B) \nQuantity\u003C\u0027Units\u003E.(/) \n(/) \nQuantity\u003C\u0027Units\u003E.(/) \n(/) \nQuantity\u003C\u0027Units\u003E.(/) \n(/) \nQuantity\u003C\u0027Units\u003E.(%) \n(%) \nQuantity\u003C\u0027Units\u003E.(*) \n(*) \nQuantity\u003C\u0027Units\u003E.(*) \n(*) \nQuantity\u003C\u0027Units\u003E.(*) \n(*) \nQuantity\u003C\u0027Units\u003E.(-) \n(-) \nQuantity\u003C\u0027Units\u003E.(~-) \n(~-)"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#\u0060\u0060.ctor\u0060\u0060","title":"Quantity\u003C\u0027Units\u003E.\u0060\u0060.ctor\u0060\u0060","content":"Quantity\u003C\u0027Units\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Comparison","title":"Quantity\u003C\u0027Units\u003E.Comparison","content":"Quantity\u003C\u0027Units\u003E.Comparison \nComparison \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Equals","title":"Quantity\u003C\u0027Units\u003E.Equals","content":"Quantity\u003C\u0027Units\u003E.Equals \nEquals \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#LessThan","title":"Quantity\u003C\u0027Units\u003E.LessThan","content":"Quantity\u003C\u0027Units\u003E.LessThan \nLessThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Value","title":"Quantity\u003C\u0027Units\u003E.Value","content":"Quantity\u003C\u0027Units\u003E.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Abs","title":"Quantity\u003C\u0027Units\u003E.Abs","content":"Quantity\u003C\u0027Units\u003E.Abs \nAbs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Ceiling","title":"Quantity\u003C\u0027Units\u003E.Ceiling","content":"Quantity\u003C\u0027Units\u003E.Ceiling \nCeiling \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Floor","title":"Quantity\u003C\u0027Units\u003E.Floor","content":"Quantity\u003C\u0027Units\u003E.Floor \nFloor \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Max","title":"Quantity\u003C\u0027Units\u003E.Max","content":"Quantity\u003C\u0027Units\u003E.Max \nMax \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Min","title":"Quantity\u003C\u0027Units\u003E.Min","content":"Quantity\u003C\u0027Units\u003E.Min \nMin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Round","title":"Quantity\u003C\u0027Units\u003E.Round","content":"Quantity\u003C\u0027Units\u003E.Round \nRound \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Sqrt","title":"Quantity\u003C\u0027Units\u003E.Sqrt","content":"Quantity\u003C\u0027Units\u003E.Sqrt \nSqrt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Truncate","title":"Quantity\u003C\u0027Units\u003E.Truncate","content":"Quantity\u003C\u0027Units\u003E.Truncate \nTruncate \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(\u002B)","title":"Quantity\u003C\u0027Units\u003E.(\u002B)","content":"Quantity\u003C\u0027Units\u003E.(\u002B) \n(\u002B) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(/)","title":"Quantity\u003C\u0027Units\u003E.(/)","content":"Quantity\u003C\u0027Units\u003E.(/) \n(/) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(/)","title":"Quantity\u003C\u0027Units\u003E.(/)","content":"Quantity\u003C\u0027Units\u003E.(/) \n(/) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(/)","title":"Quantity\u003C\u0027Units\u003E.(/)","content":"Quantity\u003C\u0027Units\u003E.(/) \n(/) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(%)","title":"Quantity\u003C\u0027Units\u003E.(%)","content":"Quantity\u003C\u0027Units\u003E.(%) \n(%) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(*)","title":"Quantity\u003C\u0027Units\u003E.(*)","content":"Quantity\u003C\u0027Units\u003E.(*) \n(*) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(*)","title":"Quantity\u003C\u0027Units\u003E.(*)","content":"Quantity\u003C\u0027Units\u003E.(*) \n(*) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(*)","title":"Quantity\u003C\u0027Units\u003E.(*)","content":"Quantity\u003C\u0027Units\u003E.(*) \n(*) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(-)","title":"Quantity\u003C\u0027Units\u003E.(-)","content":"Quantity\u003C\u0027Units\u003E.(-) \n(-) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#(~-)","title":"Quantity\u003C\u0027Units\u003E.(~-)","content":"Quantity\u003C\u0027Units\u003E.(~-) \n(~-) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radians.html","title":"Radians","content":"Radians \n \nRadians.Radians \nRadians"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radians.html#Radians","title":"Radians.Radians","content":"Radians.Radians \nRadians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radianspersecond.html","title":"RadiansPerSecond","content":"RadiansPerSecond \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radianspersecondsquared.html","title":"RadiansPerSecondSquared","content":"RadiansPerSecondSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-rate-2.html","title":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E","content":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E \n\n Represents the units type of a rate or quotient such as a speed (\u003Ccode\u003ERate\n Meters Seconds\u003C/code\u003E) or a pressure (\u003Ccode\u003ERate Newtons SquareMeters\u003C/code\u003E).\n  \nRate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E.Rate \nRate"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-rate-2.html#Rate","title":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E.Rate","content":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E.Rate \nRate \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistance.html","title":"Resistance","content":"Resistance \n \nResistance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistance.html#Value","title":"Resistance.Value","content":"Resistance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-seconds.html","title":"Seconds","content":"Seconds \n \nSeconds.Seconds \nSeconds"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-seconds.html#Seconds","title":"Seconds.Seconds","content":"Seconds.Seconds \nSeconds \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidangle.html","title":"SolidAngle","content":"SolidAngle \n \nSolidAngle.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidangle.html#Value","title":"SolidAngle.Value","content":"SolidAngle.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speed.html","title":"Speed","content":"Speed \n \nSpeed.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speed.html#Value","title":"Speed.Value","content":"Speed.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-squaremeters.html","title":"SquareMeters","content":"SquareMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-squarepixels.html","title":"SquarePixels","content":"SquarePixels \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-squared-1.html","title":"Squared\u003C\u0027Units\u003E","content":"Squared\u003C\u0027Units\u003E \n\n Represents a units type that is the square of some other units type; for\n example, \u003Ccode\u003EMeters\u003C/code\u003E is one units type (the units type of a \u003Ccode\u003ELength\u003C/code\u003E) and\n \u003Ccode\u003ESquared Meters\u003C/code\u003E is another (the units type of an \u003Ccode\u003EArea\u003C/code\u003E). See the\n \u003Ca href=\u0022https://docs.microsoft.com/dotnet/api/math.units.quantity.squared\u0022\u003Esquared\u003C/a\u003E and [\u003Ccode\u003Esqrt\u003C/code\u003E](#sqrt)\n \u003Ca href=\u0022https://docs.microsoft.com/dotnet/api/math.units.quantity.sqrt\u0022\u003Esqrt\u003C/a\u003E\n functions for examples of use. This is a special case of the \u003Ccode\u003EProduct\u003C/code\u003E units type.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-steradians.html","title":"Steradians","content":"Steradians \n \nSteradians.Steradians \nSteradians"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-steradians.html#Steradians","title":"Steradians.Steradians","content":"Steradians.Steradians \nSteradians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamount.html","title":"SubstanceAmount","content":"SubstanceAmount \n \nSubstanceAmount.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamount.html#Value","title":"SubstanceAmount.Value","content":"SubstanceAmount.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html","title":"Temperature","content":"Temperature \n \nTemperature.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTemperature.Comparison \nComparison \nTemperature.Equals \nEquals \nTemperature.LessThan \nLessThan \nTemperature.Value \nValue \nTemperature.Abs \nAbs \nTemperature.Ceiling \nCeiling \nTemperature.Floor \nFloor \nTemperature.Max \nMax \nTemperature.Min \nMin \nTemperature.Round \nRound \nTemperature.Sqrt \nSqrt \nTemperature.Truncate \nTruncate \nTemperature.(\u002B) \n(\u002B) \nTemperature.(\u002B) \n(\u002B) \nTemperature.(-) \n(-)"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#\u0060\u0060.ctor\u0060\u0060","title":"Temperature.\u0060\u0060.ctor\u0060\u0060","content":"Temperature.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Comparison","title":"Temperature.Comparison","content":"Temperature.Comparison \nComparison \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Equals","title":"Temperature.Equals","content":"Temperature.Equals \nEquals \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#LessThan","title":"Temperature.LessThan","content":"Temperature.LessThan \nLessThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Value","title":"Temperature.Value","content":"Temperature.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Abs","title":"Temperature.Abs","content":"Temperature.Abs \nAbs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Ceiling","title":"Temperature.Ceiling","content":"Temperature.Ceiling \nCeiling \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Floor","title":"Temperature.Floor","content":"Temperature.Floor \nFloor \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Max","title":"Temperature.Max","content":"Temperature.Max \nMax \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Min","title":"Temperature.Min","content":"Temperature.Min \nMin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Round","title":"Temperature.Round","content":"Temperature.Round \nRound \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Sqrt","title":"Temperature.Sqrt","content":"Temperature.Sqrt \nSqrt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Truncate","title":"Temperature.Truncate","content":"Temperature.Truncate \nTruncate \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#(\u002B)","title":"Temperature.(\u002B)","content":"Temperature.(\u002B) \n(\u002B) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#(\u002B)","title":"Temperature.(\u002B)","content":"Temperature.(\u002B) \n(\u002B) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#(-)","title":"Temperature.(-)","content":"Temperature.(-) \n(-) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturedelta.html","title":"TemperatureDelta","content":"TemperatureDelta \n \nTemperatureDelta.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturedelta.html#Value","title":"TemperatureDelta.Value","content":"TemperatureDelta.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-unitless.html","title":"Unitless","content":"Unitless \n\n A special units type representing \u0027no units\u0027. A \u003Ccode\u003EQuantity Unitless\u003C/code\u003E\n value is interchangeable with a simple \u003Ccode\u003Efloat\u003C/code\u003E.\n A generic number that doesn\u0027t undergo any type mutation.\n  \nUnitless.Unitless \nUnitless"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-unitless.html#Unitless","title":"Unitless.Unitless","content":"Unitless.Unitless \nUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltage.html","title":"Voltage","content":"Voltage \n \nVoltage.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltage.html#Value","title":"Voltage.Value","content":"Voltage.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volts.html","title":"Volts","content":"Volts \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volume.html","title":"Volume","content":"Volume \n \nVolume.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volume.html#Value","title":"Volume.Value","content":"Volume.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-watts.html","title":"Watts","content":"Watts \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-arb.html","title":"Arb","content":"Arb \n \nArb.float \nfloat \nArb.floatBetween \nfloatBetween \nArb.quantity \nquantity \nArb.temperature \ntemperature \nArb.interval \ninterval"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-arb.html#float","title":"Arb.float","content":"Arb.float \nfloat \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-arb.html#floatBetween","title":"Arb.floatBetween","content":"Arb.floatBetween \nfloatBetween \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-arb.html#quantity","title":"Arb.quantity","content":"Arb.quantity \nquantity \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-arb.html#temperature","title":"Arb.temperature","content":"Arb.temperature \ntemperature \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-arb.html#interval","title":"Arb.interval","content":"Arb.interval \ninterval \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html","title":"Gen","content":"Gen \n\n Fuzz testing generator for components created in the \u003Ccode\u003EMath.Units\u003C/code\u003E module.\n  \nGen.ArbGeometry \nArbGeometry \nGen.rand \nrand \nGen.intBetween \nintBetween \nGen.floatBetween \nfloatBetween \nGen.zeroToOneFloat \nzeroToOneFloat \nGen.float \nfloat \nGen.positiveFloat \npositiveFloat \nGen.quantity \nquantity \nGen.temperature \ntemperature \nGen.positiveQuantity \npositiveQuantity \nGen.quantityBetween \nquantityBetween \nGen.interval \ninterval"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#rand","title":"Gen.rand","content":"Gen.rand \nrand \n\n Generates a random floating point number from [0.0, 1.0], not including\n 1.0.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#intBetween","title":"Gen.intBetween","content":"Gen.intBetween \nintBetween \n\n Generate a random integer value in the range [low, high] inclusive of\n both the lower and upper limit.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#floatBetween","title":"Gen.floatBetween","content":"Gen.floatBetween \nfloatBetween \n\n Generate a random float value in the range [low, high] inclusive of\n both the lower and upper limit.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#zeroToOneFloat","title":"Gen.zeroToOneFloat","content":"Gen.zeroToOneFloat \nzeroToOneFloat \n\n Generate a float between [0. and 1.]\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#float","title":"Gen.float","content":"Gen.float \nfloat \n\n Generates a normal floating point number. This function excludes certain\n values from being generated as a float. The following are not included\n when generating a float: \u003Ccode\u003E-infinity\u003C/code\u003E, \u003Ccode\u003Einfinity\u003C/code\u003E, and \u003Ccode\u003ENaN\u003C/code\u003E.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#positiveFloat","title":"Gen.positiveFloat","content":"Gen.positiveFloat \npositiveFloat \n\n Generate a floating point number int the range [0, infinity]. This\n generates \u003Ccode\u003E0.\u003C/code\u003E values and other positive floating point numbers.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#quantity","title":"Gen.quantity","content":"Gen.quantity \nquantity \n\n Generate a random \u003Ccode\u003EQuantity\u003C/code\u003E value.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#temperature","title":"Gen.temperature","content":"Gen.temperature \ntemperature \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#positiveQuantity","title":"Gen.positiveQuantity","content":"Gen.positiveQuantity \npositiveQuantity \n\n Generate a \u003Ccode\u003EPositive\u0026lt;Length\u0026gt;\u003C/code\u003E values. This is a type safe way of\n generating and enforcing positive \u003Ccode\u003ELength\u003C/code\u003E values.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#quantityBetween","title":"Gen.quantityBetween","content":"Gen.quantityBetween \nquantityBetween \n\n Generate a random quantity value within a given range.\n "},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen.html#interval","title":"Gen.interval","content":"Gen.interval \ninterval \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen-arbgeometry.html","title":"ArbGeometry","content":"ArbGeometry \n \nArbGeometry.Float \nFloat \nArbGeometry.Interval \nInterval \nArbGeometry.Quantity \nQuantity \nArbGeometry.Register \nRegister \nArbGeometry.Temperature \nTemperature \nArbGeometry.ZeroToOneFloat \nZeroToOneFloat"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen-arbgeometry.html#Float","title":"ArbGeometry.Float","content":"ArbGeometry.Float \nFloat \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen-arbgeometry.html#Interval","title":"ArbGeometry.Interval","content":"ArbGeometry.Interval \nInterval \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen-arbgeometry.html#Quantity","title":"ArbGeometry.Quantity","content":"ArbGeometry.Quantity \nQuantity \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen-arbgeometry.html#Register","title":"ArbGeometry.Register","content":"ArbGeometry.Register \nRegister \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen-arbgeometry.html#Temperature","title":"ArbGeometry.Temperature","content":"ArbGeometry.Temperature \nTemperature \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-gen-arbgeometry.html#ZeroToOneFloat","title":"ArbGeometry.ZeroToOneFloat","content":"ArbGeometry.ZeroToOneFloat \nZeroToOneFloat \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-operators.html","title":"Operators","content":"Operators \n \nOperators.(.=.) \n(.=.) \nOperators.(.==.) \n(.==.) \nOperators.(.\u003E.) \n(.\u003E.) \nOperators.(.\u003E=.) \n(.\u003E=.) \nOperators.(.\u003C.) \n(.\u003C.) \nOperators.(.\u003C=.) \n(.\u003C=.)"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-operators.html#(.=.)","title":"Operators.(.=.)","content":"Operators.(.=.) \n(.=.) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-operators.html#(.==.)","title":"Operators.(.==.)","content":"Operators.(.==.) \n(.==.) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-operators.html#(.\u003E.)","title":"Operators.(.\u003E.)","content":"Operators.(.\u003E.) \n(.\u003E.) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-operators.html#(.\u003E=.)","title":"Operators.(.\u003E=.)","content":"Operators.(.\u003E=.) \n(.\u003E=.) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-operators.html#(.\u003C.)","title":"Operators.(.\u003C.)","content":"Operators.(.\u003C.) \n(.\u003C.) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-operators.html#(.\u003C=.)","title":"Operators.(.\u003C=.)","content":"Operators.(.\u003C=.) \n(.\u003C=.) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html","title":"Test","content":"Test \n \nTest.pass \npass \nTest.fail \nfail \nTest.isFalse \nisFalse \nTest.isTrue \nisTrue \nTest.forAll \nforAll \nTest.equal \nequal \nTest.almostEqual \nalmostEqual \nTest.lessThan \nlessThan \nTest.lessThanOrEqualTo \nlessThanOrEqualTo \nTest.greaterThan \ngreaterThan \nTest.greaterThanOrEqualTo \ngreaterThanOrEqualTo \nTest.all \nall \nTest.unaryOperator \nunaryOperator \nTest.binaryOperator \nbinaryOperator"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#pass","title":"Test.pass","content":"Test.pass \npass \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#fail","title":"Test.fail","content":"Test.fail \nfail \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#isFalse","title":"Test.isFalse","content":"Test.isFalse \nisFalse \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#isTrue","title":"Test.isTrue","content":"Test.isTrue \nisTrue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#forAll","title":"Test.forAll","content":"Test.forAll \nforAll \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#equal","title":"Test.equal","content":"Test.equal \nequal \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#almostEqual","title":"Test.almostEqual","content":"Test.almostEqual \nalmostEqual \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#lessThan","title":"Test.lessThan","content":"Test.lessThan \nlessThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#lessThanOrEqualTo","title":"Test.lessThanOrEqualTo","content":"Test.lessThanOrEqualTo \nlessThanOrEqualTo \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#greaterThan","title":"Test.greaterThan","content":"Test.greaterThan \ngreaterThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#greaterThanOrEqualTo","title":"Test.greaterThanOrEqualTo","content":"Test.greaterThanOrEqualTo \ngreaterThanOrEqualTo \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#all","title":"Test.all","content":"Test.all \nall \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#unaryOperator","title":"Test.unaryOperator","content":"Test.unaryOperator \nunaryOperator \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-test.html#binaryOperator","title":"Test.binaryOperator","content":"Test.binaryOperator \nbinaryOperator \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-positive-1.html","title":"\u0027a Positive","content":"\u0027a Positive \n \n\u0027a Positive.Positive \nPositive"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-positive-1.html#Positive","title":"\u0027a Positive.Positive","content":"\u0027a Positive.Positive \nPositive \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-testdefines.html","title":"TestDefines","content":"TestDefines \n \nTestDefines.TestDefines \nTestDefines"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-testdefines.html#TestDefines","title":"TestDefines.TestDefines","content":"TestDefines.TestDefines \nTestDefines \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-testspace.html","title":"TestSpace","content":"TestSpace \n \nTestSpace.TestSpace \nTestSpace"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-testspace.html#TestSpace","title":"TestSpace.TestSpace","content":"TestSpace.TestSpace \nTestSpace \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-zerotoone-1.html","title":"\u0027a ZeroToOne","content":"\u0027a ZeroToOne \n \n\u0027a ZeroToOne.ZeroToOne \nZeroToOne"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-test-zerotoone-1.html#ZeroToOne","title":"\u0027a ZeroToOne.ZeroToOne","content":"\u0027a ZeroToOne.ZeroToOne \nZeroToOne \n"},{"uri":"https://evelios.github.io/Math.Units/digit-precision.html","title":"Digit Precision","content":"(**\n\n---\ntitle: Digit Precision\ncategory: Tutorials\ncategoryindex: 1\nindex: 1\n---\n\n[floating point equality]: https://floating-point-gui.de/errors/comparison/\n[f# float]: https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0\n\n*)\n(*** hide ***)\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\ntype Cartesian = Cartesian\n\n(**\n# Digit Precision\n\nThis library provides equality operators \u0060lhs = rhs\u0060 for many of the data\nstructures. The savvy among you may have noticed that all the data structures\nare also storing float numbers. Comparing [floating point equality] is no easy\ntask. Due to floating point rounding errors when numbers are being stored, and\nwith many calculations (especially trig functions), the output numbers may be\nslightly different than you would expect.\n\nWe can show this with an example. We would expect the following to be true\n*)\n\n1. = (0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nChecking the returned value from the right hand side we see that we are getting\nthe value \u00601.0\u0060. So what\u0027s going on?\n*)\n\n(0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nWell, with a little investigation, we can see that we aren\u0027t getting exactly\n\u00601.0\u0060. We are getting ever so slightly less than \u00601.0\u0060.\n*)\n\n((0.3 * 3.) \u002B 0.1) - 1.\n(*** include-it ***)\n\n(**\nComparing datastructures that use floating point numbers can sometimes be a sign\nof bad code code design, but this is not always the case. So when you are\nlooking to do equality comparison, this library provides the ability to do\napproximate equality comparison on floating point numbers and data structures\nlike points and vectors.\n*)\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)\n\n(**\nYou can change the precision that floating point operations are performed at. The\ndefault precision is a digit precision of 10. If we were looking a higher level\nof precision, you can change the digit precision to be something more fitting of\nyour needs. In this example, we can make that equality check fail by increasing\nthe precision we are requiring for this operation.\n*)\n\n// Increasing the equality precision to make this check fail\nFloat.DigitPrecision \u003C- 17\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)"},{"uri":"https://evelios.github.io/Math.Units/angle.html","title":"Angle","content":"(**\n---\ntitle: Angle\ncategory: Modules\ncategoryindex: 2\nindex: 1\n---\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\nopen System\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Builders\n*)\n\nAngle.degrees 120.\n\nAngle.radians (Math.PI / 3.)\n\n(**\n# Accessors\n*)\n\nAngle.inDegrees Angle.halfPi\n\nAngle.inRadians Angle.halfPi\n\n(**\n# Trigonometry\n*)\n\nAngle.sin Angle.pi\nAngle.cos Angle.pi\nAngle.tan Angle.pi\n\nAngle.asin (1. / 2.)\nAngle.acos (1. / 2.)\nAngle.atan (1. / 2.)\n\n(**\n# Constants\n\n| Function                 | Value               |\n|--------------------------|---------------------|\n| \u0060Angle.zero\u0060             | 0                   |\n| \u0060Angle.pi\u0060               | $ \\pi $             |\n| \u0060Angle.twoPi\u0060            | $ 2 \\pi $           |\n| \u0060Angle.piOverTwo\u0060        | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.halfPi\u0060           | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.radiansToDegrees\u0060 | $ \\frac{180}{\\pi} $ |\n| \u0060Angle.degreesToRadians\u0060 | $ \\frac{\\pi}{180} $ |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example          | Function |\n|----------|--------|--------|-------------|------------------|----------|\n| -        | Angle  |        | Angle       | \u0060-length\u0060        | \u0060Angle.neg\u0060 |\n| \u002B        | Angle  | Angle  | Angle       | \u0060lhs \u002B rhs\u0060      | \u0060Angle.plus\u0060 |\n| -        | Angle  | Angle  | Angle       | \u0060lhs - rhs\u0060      | \u0060Angle.minus\u0060 |\n| *        | Angle  | float  | Angle       | \u0060lhs * 0.5\u0060      | \u0060Angle.times\u0060 |\n| *        | float  | Angle  | Angle       | \u00600.5 * rhs\u0060      | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n| /        | Angle  | float  | Angle       | \u0060lhs / 4.\u0060       | \u0060Angle.dividedBy\u0060 |\n| /        | Angle  | Angle  | float       | \u0060lhs / rhs\u0060      | None |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n*)"},{"uri":"https://evelios.github.io/Math.Units/quantity.html","title":"Quantity","content":"(**\n\n---\ntitle: Quantity\ncategory: Tutorials\ncategoryindex: 1\nindex: 4\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n\n@docs Quantity\n\n# Unit Systems\n\nThe \u003Cc\u003ESquared\u003C/c\u003E, \u003Cc\u003ECubed\u003C/c\u003E, \u0060Product\u0060 and \u0060Rate\u0060 units types allow you to build up\nand work with composite units in a fairly flexible way.\n\n@docs Squared, Cubed, Product, Rate\n\n# Constants\n\n@docs zero, infinity, positiveInfinity, negativeInfinity\n\n# Comparison\n\n@docs lessThan, greaterThan, lessThanOrEqualTo, greaterThanOrEqualTo\n@docs lessThanZero, greaterThanZero, lessThanOrEqualToZero, greaterThanOrEqualToZero\n@docs compare, equalWithin, max, min, isNaN, isInfinite\n\n# Arithmetic\n\n@docs negate, abs, plus, difference, minus, multiplyBy, divideBy, twice, half, ratio, squared, sqrt, cubed, cbrt\n\n## Unitless quantities\n\nSome specialized arithmetic functions for working with [unitless](#Unitless)\nquantities. \u0060squaredUnitless\u0060, \u0060sqrtUnitless\u0060, \u0060cubedUnitless\u0060 and\n\u0060cbrtUnitless\u0060 all behave just like their non-\u0060Unitless\u0060 versions but return a\n\u0060Unitless\u0060 result (instead of for example something meaningless like \u0060Squared\nUnitless\u0060).\n\n@docs squaredUnitless, sqrtUnitless, cubedUnitless, cbrtUnitless, reciprocal\n\n## Working with products\n\n@docs product, times, timesUnitless, over, over_, overUnitless\n\n## Working with rates\n\n@docs rate, per, at, at_, for, inverse, rateProduct\n\n## Modular arithmetic\n\n\u0060modBy\u0060 and \u0060remainderBy\u0060 behave just like the [\u0060modBy\u0060](https://package.elm-lang.org/packages/elm/core/latest/Basics#modBy)\nand [\u0060remainderBy\u0060](https://package.elm-lang.org/packages/elm/core/latest/Basics#remainderBy)\nfunctions from Elm\u0027s built-in \u0060Basics\u0060 module, but work on \u0060Quantity\u0060 values\ninstead of raw \u0060Int\u0060s. \u0060fractionalModBy\u0060 and \u0060fractionalRemainderBy\u0060 have the\nsame behaviour but extended to \u0060Float\u0060-valued quantities.\n    import Pixels exposing (pixels)\n    import Length exposing (meters, centimeters)\n    Quantity.modBy (pixels 4) (pixels 11)\n    --\u003E pixels 3\n    Quantity.fractionalModBy (meters 0.5)\n        (centimeters 162.3)\n    --\u003E centimeters 12.3\n    \n@docs modBy, fractionalModBy, remainderBy, fractionalRemainderBy\n\n## Miscellaneous\n\n@docs clamp, interpolateFrom, midpoint, range, in_\n\n# \u0060Int\u0060/\u0060Float\u0060 conversion\n\nThese functions only really make sense for quantities in units like pixels,\ncents or game tiles where an \u0060Int\u0060 number of units is meaningful. For quantities\nlike \u0060Length\u0060 or \u0060Duration\u0060, it doesn\u0027t really make sense to round to an \u0060Int\u0060\nvalue since the underyling base unit is pretty arbitrary - should \u0060round\u0060ing a\n\u0060Duration\u0060 give you an \u0060Int\u0060 number of seconds, milliseconds, or something else?\n(The actual behavior is that quantities will generally get rounded to the\nnearest SI base unit, since that is how they are stored internally - for\nexample, \u0060Length\u0060 values will get rounded to the nearest meter regardless of\nwhether they were constructed from a number of meters, centimeters, inches or\nlight years.)\n\n@docs round, floor, ceiling, truncate, toFloatQuantity\n\n# List functions\n\nThese functions act just like the corresponding functions in the built-in \u0060List\u0060\nmodule (or, int the case of \u0060minimumBy\u0060 and \u0060maximumBy\u0060, the \u0060List.Extra\u0060 module\nfrom \u0060elm-community/list-extra\u0060). They\u0027re necessary because the built-in\n\u0060List.sum\u0060 only supports \u0060List Int\u0060 and \u0060List Float\u0060, and the remaining\nfunctions only support built-in \u0060comparable\u0060 types like \u0060Int\u0060, \u0060Float\u0060, \u0060String\u0060\nand tuples.\n\n@docs sum, minimum, maximum, minimumBy, maximumBy, sort, sortBy\n\n# Unitless quantities\n\nIt is sometimes useful to be able to represent _unitless_ quantities, especially\nwhen working with generic code (in most other cases, it is likely simpler and\neasier to just use \u0060Int\u0060 or \u0060Float\u0060 values directly). All the conversions in\nthis section simply wrap or unwrap a \u0060Float\u0060 or \u0060Int\u0060 value into a \u0060Quantity\u0060\nvalue, and so should get compiled away entirely when using \u0060elm make\n--optimize\u0060.\n\n@docs Unitless, int, toInt, float, toFloat\n\n# Unsafe conversions\n\nThese functions are equivalent to directly constructing or unwrapping \u0060Quantity\u0060\nvalues, and generally shouldn\u0027t be used outside of some specialized situations\nthat can come up when authoring packages that use \u0060elm-units\u0060.\n@docs unsafe, unwrap\n\n\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs       | Rhs       | Return Type | Example          | Function |\n|----------|-----------|-----------|-------------|------------------|----------|\n| -        | Quantity  |           | Quantity    | \u0060-quantity\u0060      | [Quantity.negate](../reference/math-units-quantitymodule.html#negate) |\n| \u002B        | Quantity  | Quantity  | Quantity    | \u0060lhs \u002B rhs\u0060      | \u0060Quantity.plus\u0060 |\n| -        | Quantity  | Quantity  | Quantity    | \u0060lhs - rhs\u0060      | \u0060Quantity.difference\u0060 |\n| *        | Quantity  | Quantity  | Quantity    | \u0060lhs * rhs\u0060      | \u0060Quantity.product\u0060 \u0026 \u0060Quantity.times\u0060 |\n| *        | Quantity  | float     | Quantity    | \u0060lhs * 0.5\u0060      | \u0060Quantity.multiplyBy\u0060 |\n| *        | float     | Quantity  | Quantity    | \u00600.5 * rhs\u0060      | \u0060Quantity.multiplyBy\u0060 |\n| /        | Quantity  | Quantity  | float       | \u0060lhs / rhs\u0060      | \u0060Quantity.ratio\u0060 |\n| /        | Quantity  | float     | Quantity    | \u0060lhs / 4.\u0060       | \u0060Quantity.dividedBy\u0060 |\n\n*)\n\n(**\n\n| Operator | Lhs       | Return Type | Example          | Function |\n|----------|-----------|-------------|------------------|----------|\n| abs      | Quantity  | Quantity    | \u0060-length\u0060        | \u0060Quantity.abs\u0060 |\n| min      | Quantity  | Quantity    | \u0060lhs \u002B rhs\u0060      | \u0060Quantity.min\u0060 |\n| max      | Quantity  | Quantity    | \u0060lhs - rhs\u0060      | \u0060Quantity.max\u0060 |\n| sqrt     | Quantity\u003C\u0027Units\u003E  | Quantity\u003C\u0027Units Squared\u003E  | \u0060lhs * 0.5\u0060      | \u0060Quantity.sqrt\u0060 |\n| floor    | Quantity  | Quantity    | \u00600.5 * rhs\u0060      | \u0060Quantity.floor\u0060 |\n| ceil     | Quantity  | Length      | \u0060angle / length\u0060 | \u0060Quantity.ceil\u0060 |\n| round    | Quantity  | Quantity      | \u0060length / angle\u0060 | \u0060Quantity.round\u0060 |\n| truncate | Quantity  | Quantity    | \u0060lhs / 4.\u0060       | \u0060Quantity.truncate\u0060 |\n\n*)"},{"uri":"https://evelios.github.io/Math.Units/index.html","title":"Math.Units Package","content":"(**\n\n---\ntitle: Math.Units Package\n---\n\nThis package is a port and extension of the framework [elm-units](https://package.elm-lang.org/packages/ianmackenzie/elm-units/latest/).\nHuge thanks to [@ianmackenzie](https://github.com/ianmackenzie) for creating the original package and writing much of\nthe original documentation.\n\nNote: This framework is currently in __alpha__ development.\n\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen System\n\n(** *)\n\n(**\nTo use this framework you include the package through the namespace\n*)\n\nopen Math.Units\n\n(**\n# Math.Units\n\n_Release notes for 2.0 are [here](https://github.com/ianmackenzie/elm-units/releases/tag/2.0.0)._\n\n[Math.Units](./reference/math-units.html) is useful if you want to store, pass around, convert between,\ncompare, or do arithmetic on:\n\n- Durations (seconds, milliseconds, hours...)\n- Angles (degrees, radians, turns...)\n- Lengths (meters, feet, inches, miles, light years...)\n- Temperatures (Celsius, Fahrenheit, kelvins)\n- Pixels (whole or partial)\n- Speeds (pixels per second, miles per hour...) or any other rate of change\n- Any of the other built-in quantity types: areas, accelerations, masses,\n  forces, pressures, currents, voltages...\n- Or even values in your own custom units, such as \u0027number of tiles\u0027 in a\n  tile-based game\n\nIt is aimed especially at engineering/scientific/technical applications but is\ndesigned to be generic enough to work well for other fields such as games and\nfinance. The core of the package consists of a generic \u0060Quantity\u0060 type and\nmany concrete types such as \u0060Length\u0060, \u0060Angle\u0060, \u0060Duration\u0060, \u0060Temperature\u0060, and\n\u0060Speed\u0060, which you can use to add some nice type safety to data types and\nfunction signatures:\n*)\n\ntype Camera =\n    { fieldOfView: Angle\n      shutterSpeed: Duration\n      minimumOperatingTemperature: Temperature }\n\nlet canOperateAt (temperature: Temperature) (camera: Camera) : bool =\n    temperature\n    |\u003E Temperature.greaterThan camera.minimumOperatingTemperature\n\n(**\nYou can construct values of these types from any units you want, using provided\nfunctions such as:\n\n__Hint: hover over the function names to see the type values__\n*)\n\nLength.feet\nLength.meters\nDuration.seconds\nAngle.degrees\nTemperature.degreesFahrenheit\n\n\n(**\nYou can later convert back to plain numeric values, also in any units you want\n(which do not have to be the same units used when initially constructing the\nvalue!):\n*)\n\nLength.inCentimeters\nLength.inMiles\nDuration.inHours\nAngle.inRadians\nTemperature.inDegreesCelsius\n\n(**\nThis means that (among other things!) you can use these functions to do simple\nunit conversions:\n*)\n\nDuration.hours 3. |\u003E Duration.inSeconds\n(*** include-it ***)\n\nLength.feet 10. |\u003E Length.inMeters\n(*** include-it ***)\n\nSpeed.milesPerHour 60. |\u003E Speed.inMetersPerSecond\n(*** include-it ***)\n\nTemperature.degreesCelsius 30.\n|\u003E Temperature.inDegreesFahrenheit\n(*** include-it ***)\n\n(**\nAdditionally, types like \u0060Length\u0060 are actually type aliases of the form\n\u0060Quantity number units\u0060 (\u0060Length\u0060 is \u0060Quantity Float Meters\u0060, for example,\nmeaning that it is internally stored as a number of meters), and there are\nmany generic functions which let you work directly with any kind of \u0060Quantity\u0060\nvalues:\n*)\n\nLength.feet 3.\n|\u003E Quantity.lessThan (Length.meters 1.)\n(*** include-it ***)\n\nDuration.hours 2.\n|\u003E Quantity.plus (Duration.minutes 30.)\n|\u003E Duration.inSeconds\n(*** include-it ***)\n\n// Some functions can actually convert between units!\n// Multiplying two Length values gives you an Area\nLength.centimeters 60.\n|\u003E Quantity.times (Length.centimeters 80.)\n(*** include-it ***)\n\nQuantity.sort [ Angle.radians 1.\n                Angle.degrees 10.\n                Angle.turns 0.5 ]\n(*** include-it ***)\n\n(**\nUltimately, what this does is let you pass around and manipulate \u0060Length\u0060,\n\u0060Duration\u0060 or \u0060Temperature\u0060 etc. values without having to worry about units.\nWhen you initially construct a \u0060Length\u0060, you need to specify what units you\u0027re\nusing, but once that is done you can:\n\n- Store the length inside a data structure\n- Pass it around between different functions\n- Compare it to other lengths\n- Add and subtract it to other lengths\n- Multiply it by another length to get an area, or divide by a duration to\n  get a speed\n\n...and much more, all without having to care about units at all. All\ncalculations will be done in an internally consistent way, and when you finally\nneed to actually display a value on screen or encode to JSON, you can extract\nthe final result in whatever units you want.\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Fundamentals](#fundamentals)\n  - [The \u0060Quantity\u0060 type](#the-quantity-type)\n  - [Basic arithmetic and comparison](#basic-arithmetic-and-comparison)\n  - [Multiplication and division](#multiplication-and-division)\n  - [Argument order](#argument-order)\n  - [Custom functions](#custom-functions)\n  - [Custom units](#custom-units)\n  - [Understanding quantity types](#understanding-quantity-types)\n- [Getting help](#getting-help)\n- [API](#api)\n- [Climate action](#climate-action)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nAssuming you have [installed dotnet](https://dotnet.microsoft.com/en-us/download) and\nstarted a new project, you can install \u0060Math.Units\u0060 by running\n\n    [Lang=sh]\n    dotnet add package Math.Units\n\nin a command prompt inside your project directory.\n\n## Usage\n\n### Fundamentals\n\nTo take code that currently uses raw \u0060float\u0060 values and convert it to using\n\u0060Math.Units\u0060 types, there are three basic steps:\n\n- Wherever you store a \u0060float\u0060, such as in your model or in a message, switch\n  to storing a \u0060Duration\u0060 or \u0060Angle\u0060 or \u0060Temperature\u0060 etc. value instead.\n- Whenever you _have_ a \u0060Float\u0060 (from an external package, JSON decoder etc.),\n  use a function such as \u0060Duration.seconds\u0060, \u0060Angle.degrees\u0060 or\n  \u0060Temperature.degreesFahrenheit\u0060 to turn it into a type-safe value.\n- Whenever you _need_ a \u0060float\u0060 (to pass to an external package, encode as\n  JSON etc.), use a function such as \u0060Duration.inMilliseconds\u0060,\n  \u0060Angle.inRadians\u0060 or \u0060Temperature.inDegreesCelsius\u0060 to extract the value in\n  whatever units you want.\n- Where you do math with \u0060Float\u0060 values, switch to using \u0060Quantity\u0060 functions\n  like \u0060Quantity.plus\u0060 or \u0060Quantity.greaterThan\u0060. If this becomes impractical,\n  there are [other approaches](#custom-functions).\n\n### The Quantity type\n\nAll values produced by this package (with the exception of \u0060Temperature\u0060, which\nis a bit of a special case) are actually values of type \u0060Quantity\u0060, roughly\ndefined as...\n*)\n\ntype Quantity\u003C\u0027Units\u003E(quantity: float) =\n    member this.Value = quantity\n\n\n(** For example, \u0060Length\u0060 is defined as *)\ntype Meters = Meters\ntype Length = Quantity\u003CMeters\u003E\n\n(**\nThis means that a \u0060Length\u0060 is internally stored as a \u0060float\u0060 number of \u0060Meters\u0060,\nbut the choice of internal units can mostly be treated as an implementation\ndetail.\n\nHaving a common \u0060Quantity\u0060 type means that it is possible to define generic\narithmetic and comparison operations that work on any kind of quantity; read on!\n\n### Basic arithmetic and comparison\n\nYou can do basic math with \u0060Quantity\u0060 values:\n*)\n\n// 6 feet 3 inches, converted to meters\nLength.feet 6.\n|\u003E Quantity.plus (Length.inches 3.)\n|\u003E Length.inMeters\n(*** include-it ***)\n\nDuration.hours 1.\n|\u003E Quantity.minus (Duration.minutes 15.)\n|\u003E Duration.inMinutes\n(*** include-it ***)\n\n// pi radians plus 45 degrees is 5/8 of a full turn\nQuantity.sum [ Angle.radians Math.PI\n               Angle.degrees 45. ]\n|\u003E Angle.inTurns\n(*** include-it ***)\n\n\n(** \u0060Quantity\u0060 values can be compared/sorted: *)\n\nLength.meters 1.\n|\u003E Quantity.greaterThan (Length.feet 3.)\n(*** include-it ***)\n\nQuantity.compare (Length.meters 1.) (Length.feet 3.)\n(*** include-it ***)\n\nQuantity.max (Length.meters 1.) (Length.feet 3.)\n(*** include-it ***)\n\nQuantity.maximum [ Length.meters 1.\n                   Length.feet 3. ]\n(*** include-it ***)\n\nQuantity.sort [ Length.meters 1.\n                Length.feet 3. ]\n(*** include-it ***)\n\n\n(**\n### Multiplication and division\n\nThere are actually three different \u0027families\u0027 of multiplication and division\nfunctions in the \u0060Quantity\u0060 module, used in different contexts:\n\n- \u0060multiplyBy\u0060 and \u0060divideBy\u0060 are used to multiply (scale) or divide a\n  \u0060Quantity\u0060 by a plain \u0060Int\u0060 or \u0060Float\u0060, with \u0060twice\u0060 and \u0060half\u0060 for the common\n  cases of multiplying or dividing by 2\n- \u0060product\u0060, \u0060times\u0060, \u0060over\u0060 and \u0060over_\u0060 are used to work with quantities that\n  are products of other quantities:\n  - multiply a \u0060Length\u0060 by another \u0060Length\u0060 to get an \u0060Area\u0060\n  - multiply an \u0060Area\u0060 by a \u0060Length\u0060 to get a \u0060Volume\u0060\n  - multiply a \u0060Mass\u0060 by an \u0060Acceleration\u0060 to get a \u0060Force\u0060\n  - divide a \u0060Volume\u0060 by an \u0060Area\u0060 to get a \u0060Length\u0060\n  - divide a \u0060Force\u0060 by a \u0060Mass\u0060 to get an \u0060Acceleration\u0060\n- \u0060rate\u0060, \u0060per\u0060, \u0060at\u0060, \u0060at_\u0060 and \u0060for\u0060 are used to work with rates of change:\n  - divide \u0060Length\u0060 by \u0060Duration\u0060 to get \u0060Speed\u0060\n  - multiply \u0060Speed\u0060 by \u0060Duration\u0060 to get \u0060Length\u0060\n  - divide \u0060Length\u0060 by \u0060Speed\u0060 to get \u0060Duration\u0060\n- And one bonus fourth function: \u0060ratio\u0060, used to divide two quantities with\n  the same units to get a plain \u0060Float\u0060 value\n\nFor example, to calculate the area of a triangle:\n*)\n\n// Area of a triangle with base of 2 feet and\n// height of 8 inches\nlet baseSize = Length.feet 2.\nlet height = Length.inches 8.\n\nQuantity.half (Quantity.product baseSize height)\n|\u003E Area.inSquareInches\n(*** include-it ***)\n\n(** Comprehensive support is provided for working with rates of change: *)\n\n// How fast are we going if we travel 30 meters in\n// 2 seconds?\nlet speed =\n    Length.meters 30.\n    |\u003E Quantity.per (Duration.seconds 2.)\n// How far do we go if we travel for 2 minutes\n// at that speed?\nDuration.minutes 2. // duration\n|\u003E Quantity.at speed // length per duration\n|\u003E Length.inKilometers // gives us a length!\n(*** include-it ***)\n\n// How long will it take to travel 20 km\n// if we\u0027re driving at 60 mph?\nLength.kilometers 20.\n|\u003E Quantity.at_ (Speed.milesPerHour 60.)\n|\u003E Duration.inMinutes\n(*** include-it ***)\n\n// How fast is \u0022a mile a minute\u0022, in kilometers per hour?\nLength.miles 1.\n|\u003E Quantity.per (Duration.minutes 1.)\n|\u003E Speed.inKilometersPerHour\n(*** include-it ***)\n\n// Reverse engineer the speed of light from defined\n// lengths/durations (the speed of light is \u0027one light\n// year per year\u0027)\nlet speedOfLight =\n    Length.lightYears 1.\n    |\u003E Quantity.per (Duration.julianYears 1.)\n\nspeedOfLight |\u003E Speed.inMetersPerSecond\n(*** include-it ***)\n\n// One astronomical unit is the (average) distance from the\n// Sun to the Earth. Roughly how long does it take light to\n// reach the Earth from the Sun?\nLength.astronomicalUnits 1.\n|\u003E Quantity.at_ speedOfLight\n|\u003E Duration.inMinutes\n(*** include-it ***)\n\n(**\nNote that the various functions above are not restricted to speed (length per\nunit time) - any units work:\n*)\n\nlet pixelDensity =\n    Pixels.float 96.\n    |\u003E Quantity.per (Length.inches 1.)\n\nLength.centimeters 3. // length\n|\u003E Quantity.at pixelDensity // pixels per length\n|\u003E Pixels.toFloat // gives us pixels!\n(*** include-it ***)\n\n(**\n\n### Argument order\n\nNote that several functions like \u0060Quantity.minus\u0060 and \u0060Quantity.lessThan\u0060 (and\ntheir \u0060Temperature\u0060 equivalents) that mimic binary operators like \u0060-\u0060 and \u0060\u003C\u0060\n\u0022take the second argument first\u0022; for example,\n\n*)\n\n(*** hide ***)\n\nlet x = Quantity.unitless 0.\nlet y = Quantity.unitless 1.\n\n(** *)\n\nQuantity.lessThan x y\n\n(**\nmeans \u0060y \u003C x\u0060, _not_ \u0060x \u003C y\u0060. This is done for a couple of reasons. First, so\nthat use with \u0060|\u003E\u0060 works naturally; for example,\n*)\n\nx |\u003E Quantity.lessThan y\n\n(*** hide ***)\n\nlet a, b, c =\n    Quantity.unitless 0., Quantity.unitless 1., Quantity.unitless 2.\n\n(**\n_does_ mean \u0060x \u003C y\u0060. The \u0027reversed\u0027 argument order also means that things like\n*)\n\nList.map (Quantity.minus x) [ a; b; c ]\n\n(** will work as expected - it will result in *)\n\n[ a - x, b - x, c - x ]\n\n(** instead of *)\n\n[ x - a, x - b, x - c ]\n\n(**\nwhich is what you would get if \u0060Quantity.minus\u0060 took arguments in the \u0027normal\u0027\norder.\n\nThere are, however, several functions that take arguments in \u0027normal\u0027 order, for\nexample:\n\n- \u0060Quantity.difference\u0060 (compare to \u0060minus\u0060)\n- \u0060Quantity.product\u0060 (compare to \u0060times\u0060)\n- \u0060Quantity.rate\u0060 (compare to \u0060per\u0060)\n- \u0060Quantity.ratio\u0060\n- \u0060Quantity.compare\u0060\n\nIn general the function names try to match how you would use them in English;\nyou would say \u0022the difference of \u0060a\u0060 and \u0060b\u0060\u0022 (and so \u0060Quantity.difference a b\u0060)\nbut \u0022\u0060a\u0060 minus \u0060b\u0060\u0022 (and so \u0060a |\u003E Quantity.minus b\u0060).\n\n### Custom Functions\n\nSome calculations cannot be expressed using the built-in \u0060Quantity\u0060 functions.\nTake kinetic energy \u0060E_k = 1/2 * m * v^2\u0060, for example - the \u0060Math.Units\u0060 type\nsystem is not sophisticated enough to work out the units properly. Instead,\nyou\u0027d need to create a custom function like\n\n*)\n\nlet kineticEnergy (m: Mass) (v: Speed) : Energy =\n    Quantity.create (0.5 * m.Value * v.Value * v.Value)\n\n(**\nIn the _implementation_ of \u0060kineticEnergy\u0060, you\u0027re working with raw \u0060Float\u0060\nvalues so you need to be careful to make sure the units actually do work out.\n(The values will be in [SI units][https://en.wikipedia.org/wiki/International_System_of_Units]\n- meters, seconds etc.) Once the function has been implemented, though, it \ncan be used in a completely type-safe way - callers can supply arguments \nusing whatever units they have, and extract results in whatever units they want:\n[6]: \n*)\n\nkineticEnergy (Mass.shortTons 1.5) (Speed.milesPerHour 60.)\n|\u003E Energy.inKilowattHours\n(*** include-it ***)\n\n(**\n### Custom Units\n\n\u0060Math.Units\u0060 defines many standard Unit Systems, but you can easily define your\nown! See [CustomUnits][#CustomUnits] for an example.\n\n### Understanding quantity types\n\nThe same quantity type can often be expressed in multiple different ways. Take\nthe \u0060Volume\u0060 type as an example. It is an alias for\n*)\n\nQuantity\u003CCubicMeters\u003E\n\n(** but expanding the \u0060CubicMeters\u0060 type alias, this is equivalent to *)\n\nQuantity\u003CMeters Cubed\u003E\n\n(** which expands further to *)\n\nQuantity\u003CProduct\u003CProduct\u003CMeters, Meters\u003E, Meters\u003E\u003E\n\n(** which could also be written as *)\n\nQuantity\u003CProduct\u003CMeters Squared, Meters\u003E\u003E\n\n(** or even *)\n\nQuantity\u003CProduct\u003CSquareMeters, Meters\u003E\u003E\n\n(**\nand you may see any one of these forms pop up in compiler error messages.\n\n## API\n\n[Full API documentation][reference/math-units.html] is available.\n\n## Climate action\n\nThis is a message from Ian Mackenzie but as the maintainer of this package I\nbelieve in this mantra and will follow through with his wishes on giving\npriority to issues regarding climate action.\n\nI would like for the projects I work on to be as helpful as possible in\naddressing the climate crisis. If\n\n- you are working on a project that helps address the climate crisis (clean\n  energy, public transit, reforestation, sustainable agriculture etc.) either as\n  an individual, as part of an non-profit organization or even as part of a\n  for-profit company, and\n- there is a new feature you would find helpful for that work (or a bug you need\n  fixed) in any of my open-source projects, then\n\nplease [open a new issue](https://github.com/evelios/Math.Units/issues),\ndescribe briefly what you\u0027re working on and I will treat that issue as high\npriority.\n\n## Contributing\n\nYes please! One of the best ways to contribute is to add a module for a new\nquantity type; I\u0027ll add a proper CONTRIBUTING.md at some point, but some\nbrief guidelines in the meantime:\n\n- Open a pull request by forking this repository, creating a new branch in\n  your fork, making all changes in that branch, then opening a pull request\n  from that branch.\n- Git commit messages should follow [the seven rules of a great Git commit\n  message][https://chris.beams.io/posts/git-commit/#seven-rules], although I\u0027m not strict about the 50 or 72 character rules.\n\n## License\n\n[elm-units BSD-3-Clause \u00A9 Ian Mackenzie][https://github.com/ianmackenzie/elm-units/blob/master/LICENSE]\n[Math.Units BSD-3-Clause \u00A9 Thomas Waters][https://github.com/evelios/Math.Unitsrblob/master/LICENSE]\n*)"},{"uri":"https://evelios.github.io/Math.Units/length.html","title":"Lengths","content":"(**\n\n---\ntitle: Lengths\ncategory: Modules\ncategoryindex: 2\nindex: 2\n---\n\n[digit precision]: digit-precision.html\n\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\n\n(***)\n\n(*** hide ***)\ntype Cartesian = Cartesian\n\n(**\n\n# Builders and Accessors (Units)\n\n| Builder                  | Accessor                   | Length                                    |\n|--------------------------|----------------------------|-------------------------------------------|\n| __Metric__               |                            |                                           |\n| Length.angstroms         | Length.inAngstroms         | $$ 1 * 10^{-10} \\, Meters $$              |\n| Length.nanometers        | Length.inNanometers        | $$ 1 * 10^9 \\, Meters $$                  |\n| Length.microns           | Length.inMicrons           | $$ 1 * 10^{-6} \\, Meters $$               |\n| Length.millimeters       | Length.inMillimeters       | $$ 0.001 \\, Meters $$                     |\n| Length.centimeters       | Length.inCentimeters       | $$ 0.01 \\, Meters $$                      |\n| Length.kilometers        | Length.inKilometers        | $$ 1000 \\, Meters $$                      |\n| __Imperial__             |                            |                                           |\n| Length.inch              | Length.inInches            | $$ 0.0254 \\, Meters $$                    |\n| Length.feet              | Length.inFeet              | $$ 12 \\, Inches $$                        |\n| Length.yards             | Length.inYards             | $$ 3 \\, Feet $$                           |\n| Length.thou              | Length.inThou              | $$ 0.001 \\, Inches $$                     |\n| Length.miles             | Length.inMiles             | $$ 5280 \\, Feet $$                        |\n| __Astronomical Units__   |                            |                                           |\n| Length.astronomicalUnits | Length.inAstronomicalUnits | $$ \\approx 1.50 * 10^{11} \\, Meters $$    |\n| Length.lightYears        | Length.inLightYears        | $$ \\approx 9.46 * 10^{15} \\, Meters $$    |\n| Length.parsecs           | Length.inParsecs           | $$ 648000 \\pi \\, Astronomical \\, Units $$ |\n| __Digital__              |                            |                                           |\n| Length.cssPixels         | Length.inCssPixels         | $$ \\frac{1}{96} \\, Inches $$              |\n| Length.points            | Length.inPoints            | $$ \\frac{1}{72} \\, Inches $$              |\n| Length.picas             | Length.inPicas             | $$ \\frac{1}{6} \\, Inches $$               |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example           | Function |\n|----------|--------|--------|-------------|-------------      |----------|\n| -        | Length |        | Length      | \u0060-length\u0060         | \u0060Length2D.neg\u0060 |\n| \u002B        | Length | Length | Length      | \u0060lhs \u002B rhs\u0060       | \u0060Length2D.plus\u0060 |\n| -        | Length | Length | Length      | \u0060lhs - rhs\u0060       | \u0060Length2D.minus\u0060 |\n| *        | Length | float  | Length      | \u0060lhs * 0.5\u0060       | \u0060Length2D.times\u0060 |\n| *        | float  | Length | Length      | \u00600.5 * rhs\u0060       | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n| /        | Length | float  | Length      | \u0060lhs / 4.\u0060        | \u0060Length2D.dividedBy\u0060 |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n*)\n\n(**\n# Math\n*)\n\nlet length = Length.meters 10.\n\nLength.squared length\n(*** include-it ***)\n\nlet lengthSquared = Length.meters 3. * Length.meters 12.\n\nLength.sqrt lengthSquared\n(*** include-it ***)\n\nLength.twice length = 2. * length\n\nLength.half length = 0.5 * length\nLength.half length = length / 2.\n\n(** Round to the nearest 10th digit. You can read more about [digit precision] *)\n\nLength.round (Length.meters 0.123456789123456789)\n(*** include-it ***)\n\nLength.roundTo 3 (Length.meters 0.11111)\n(*** include-it ***)\n\nLength.min (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.max (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.sum [ Length.meters 1.; Length.meters 2. ]\n(*** include-it ***)\n\n\n(**\n# Unsafe Operations\n*)\n\n(*** include-it ***)"},{"uri":"https://evelios.github.io/Math.Units/interval.html","title":"Interval","content":"(**\n---\ntitle: Interval\ncategory: Modules\ncategoryindex: 2\nindex: 3\n---\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\n// open Math.Units\n\n\ntype Cartesian = Cartesian\n(***)"}]