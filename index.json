[{"uri":"https://evelios.github.io/Math.Units/angle.html","title":"Angle","content":"(**\n---\ntitle: Angle\ncategory: Modules\ncategoryindex: 2\nindex: 1\n---\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\nopen System\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Builders\n*)\n\nAngle.degrees 120.\n\nAngle.radians (Math.PI / 3.)\n\n(**\n# Accessors\n*)\n\nAngle.inDegrees Angle.halfPi\n\nAngle.inRadians Angle.halfPi\n\n(**\n# Trigonometry\n*)\n\nAngle.sin Angle.pi\nAngle.cos Angle.pi\nAngle.tan Angle.pi\n\nAngle.asin (1. / 2.)\nAngle.acos (1. / 2.)\nAngle.atan (1. / 2.)\n\n(**\n# Constants\n\n| Function                 | Value               |\n|--------------------------|---------------------|\n| \u0060Angle.zero\u0060             | 0                   |\n| \u0060Angle.pi\u0060               | $ \\pi $             |\n| \u0060Angle.twoPi\u0060            | $ 2 \\pi $           |\n| \u0060Angle.piOverTwo\u0060        | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.halfPi\u0060           | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.radiansToDegrees\u0060 | $ \\frac{180}{\\pi} $ |\n| \u0060Angle.degreesToRadians\u0060 | $ \\frac{\\pi}{180} $ |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example          | Function |\n|----------|--------|--------|-------------|------------------|----------|\n| -        | Angle  |        | Angle       | \u0060-length\u0060        | \u0060Angle.neg\u0060 |\n| \u002B        | Angle  | Angle  | Angle       | \u0060lhs \u002B rhs\u0060      | \u0060Angle.plus\u0060 |\n| -        | Angle  | Angle  | Angle       | \u0060lhs - rhs\u0060      | \u0060Angle.minus\u0060 |\n| *        | Angle  | float  | Angle       | \u0060lhs * 0.5\u0060      | \u0060Angle.times\u0060 |\n| *        | float  | Angle  | Angle       | \u00600.5 * rhs\u0060      | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n| /        | Angle  | float  | Angle       | \u0060lhs / 4.\u0060       | \u0060Angle.dividedBy\u0060 |\n| /        | Angle  | Angle  | float       | \u0060lhs / rhs\u0060      | None |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n*)"},{"uri":"https://evelios.github.io/Math.Units/interval.html","title":"Interval","content":"(**\n---\ntitle: Interval\ncategory: Modules\ncategoryindex: 2\nindex: 3\n---\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\n// open Math.Units\n\n\ntype Cartesian = Cartesian\n(***)"},{"uri":"https://evelios.github.io/Math.Units/digit-precision.html","title":"Digit Precision","content":"(**\n\n---\ntitle: Digit Precision\ncategory: Tutorials\ncategoryindex: 1\nindex: 1\n---\n\n[floating point equality]: https://floating-point-gui.de/errors/comparison/\n[f# float]: https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0\n\n*)\n(*** hide ***)\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\ntype Cartesian = Cartesian\n\n(**\n# Digit Precision\n\nThis library provides equality operators \u0060lhs = rhs\u0060 for many of the data\nstructures. The savvy among you may have noticed that all the data structures\nare also storing float numbers. Comparing [floating point equality] is no easy\ntask. Due to floating point rounding errors when numbers are being stored, and\nwith many calculations (especially trig functions), the output numbers may be\nslightly different than you would expect.\n\nWe can show this with an example. We would expect the following to be true\n*)\n\n1. = (0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nChecking the returned value from the right hand side we see that we are getting\nthe value \u00601.0\u0060. So what\u0027s going on?\n*)\n\n(0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nWell, with a little investigation, we can see that we aren\u0027t getting exactly\n\u00601.0\u0060. We are getting ever so slightly less than \u00601.0\u0060.\n*)\n\n((0.3 * 3.) \u002B 0.1) - 1.\n(*** include-it ***)\n\n(**\nComparing datastructures that use floating point numbers can sometimes be a sign\nof bad code code design, but this is not always the case. So when you are\nlooking to do equality comparison, this library provides the ability to do\napproximate equality comparison on floating point numbers and data structures\nlike points and vectors.\n*)\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)\n\n(**\nYou can change the precision that floating point operations are performed at. The\ndefault precision is a digit precision of 10. If we were looking a higher level\nof precision, you can change the digit precision to be something more fitting of\nyour needs. In this example, we can make that equality check fail by increasing\nthe precision we are requiring for this operation.\n*)\n\n// Increasing the equality precision to make this check fail\nFloat.DigitPrecision \u003C- 17\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)"},{"uri":"https://evelios.github.io/Math.Units/length.html","title":"Lengths","content":"(**\n\n---\ntitle: Lengths\ncategory: Modules\ncategoryindex: 2\nindex: 2\n---\n\n[digit precision]: digit-precision.html\n\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\n\n(***)\n\n(*** hide ***)\ntype Cartesian = Cartesian\n\n(**\n\n# Builders and Accessors (Units)\n\n| Builder                  | Accessor                   | Length                                    |\n|--------------------------|----------------------------|-------------------------------------------|\n| __Metric__               |                            |                                           |\n| Length.angstroms         | Length.inAngstroms         | $$ 1 * 10^{-10} \\, Meters $$              |\n| Length.nanometers        | Length.inNanometers        | $$ 1 * 10^9 \\, Meters $$                  |\n| Length.microns           | Length.inMicrons           | $$ 1 * 10^{-6} \\, Meters $$               |\n| Length.millimeters       | Length.inMillimeters       | $$ 0.001 \\, Meters $$                     |\n| Length.centimeters       | Length.inCentimeters       | $$ 0.01 \\, Meters $$                      |\n| Length.kilometers        | Length.inKilometers        | $$ 1000 \\, Meters $$                      |\n| __Imperial__             |                            |                                           |\n| Length.inch              | Length.inInches            | $$ 0.0254 \\, Meters $$                    |\n| Length.feet              | Length.inFeet              | $$ 12 \\, Inches $$                        |\n| Length.yards             | Length.inYards             | $$ 3 \\, Feet $$                           |\n| Length.thou              | Length.inThou              | $$ 0.001 \\, Inches $$                     |\n| Length.miles             | Length.inMiles             | $$ 5280 \\, Feet $$                        |\n| __Astronomical Units__   |                            |                                           |\n| Length.astronomicalUnits | Length.inAstronomicalUnits | $$ \\approx 1.50 * 10^{11} \\, Meters $$    |\n| Length.lightYears        | Length.inLightYears        | $$ \\approx 9.46 * 10^{15} \\, Meters $$    |\n| Length.parsecs           | Length.inParsecs           | $$ 648000 \\pi \\, Astronomical \\, Units $$ |\n| __Digital__              |                            |                                           |\n| Length.cssPixels         | Length.inCssPixels         | $$ \\frac{1}{96} \\, Inches $$              |\n| Length.points            | Length.inPoints            | $$ \\frac{1}{72} \\, Inches $$              |\n| Length.picas             | Length.inPicas             | $$ \\frac{1}{6} \\, Inches $$               |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example           | Function |\n|----------|--------|--------|-------------|-------------      |----------|\n| -        | Length |        | Length      | \u0060-length\u0060         | \u0060Length2D.neg\u0060 |\n| \u002B        | Length | Length | Length      | \u0060lhs \u002B rhs\u0060       | \u0060Length2D.plus\u0060 |\n| -        | Length | Length | Length      | \u0060lhs - rhs\u0060       | \u0060Length2D.minus\u0060 |\n| *        | Length | float  | Length      | \u0060lhs * 0.5\u0060       | \u0060Length2D.times\u0060 |\n| *        | float  | Length | Length      | \u00600.5 * rhs\u0060       | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n| /        | Length | float  | Length      | \u0060lhs / 4.\u0060        | \u0060Length2D.dividedBy\u0060 |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n*)\n\n(**\n# Math\n*)\n\nlet length = Length.meters 10.\n\nLength.squared length\n(*** include-it ***)\n\nlet lengthSquared = Length.meters 3. * Length.meters 12.\n\nLength.sqrt lengthSquared\n(*** include-it ***)\n\nLength.twice length = 2. * length\n\nLength.half length = 0.5 * length\nLength.half length = length / 2.\n\n(** Round to the nearest 10th digit. You can read more about [digit precision] *)\n\nLength.round (Length.meters 0.123456789123456789)\n(*** include-it ***)\n\nLength.roundTo 3 (Length.meters 0.11111)\n(*** include-it ***)\n\nLength.min (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.max (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.sum [ Length.meters 1.; Length.meters 2. ]\n(*** include-it ***)\n\n\n(**\n# Unsafe Operations\n*)\n\n(*** include-it ***)"},{"uri":"https://evelios.github.io/Math.Units/quantity.html","title":"Quantity","content":"(**\n\n---\ntitle: Quantity\ncategory: Tutorials\ncategoryindex: 1\nindex: 4\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen Math.Units\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n\n@docs Quantity\n\n# Unit types\n\nThe \u003Cc\u003ESquared\u003C/c\u003E, \u003Cc\u003ECubed\u003C/c\u003E, \u0060Product\u0060 and \u0060Rate\u0060 units types allow you to build up\nand work with composite units in a fairly flexible way.\n\n@docs Squared, Cubed, Product, Rate\n\n# Constants\n\n@docs zero, infinity, positiveInfinity, negativeInfinity\n\n# Comparison\n\n@docs lessThan, greaterThan, lessThanOrEqualTo, greaterThanOrEqualTo\n@docs lessThanZero, greaterThanZero, lessThanOrEqualToZero, greaterThanOrEqualToZero\n@docs compare, equalWithin, max, min, isNaN, isInfinite\n\n# Arithmetic\n\n@docs negate, abs, plus, difference, minus, multiplyBy, divideBy, twice, half, ratio, squared, sqrt, cubed, cbrt\n\n## Unitless quantities\n\nSome specialized arithmetic functions for working with [unitless](#Unitless)\nquantities. \u0060squaredUnitless\u0060, \u0060sqrtUnitless\u0060, \u0060cubedUnitless\u0060 and\n\u0060cbrtUnitless\u0060 all behave just like their non-\u0060Unitless\u0060 versions but return a\n\u0060Unitless\u0060 result (instead of for example something meaningless like \u0060Squared\nUnitless\u0060).\n\n@docs squaredUnitless, sqrtUnitless, cubedUnitless, cbrtUnitless, reciprocal\n\n## Working with products\n\n@docs product, times, timesUnitless, over, over_, overUnitless\n\n## Working with rates\n\n@docs rate, per, at, at_, for, inverse, rateProduct\n\n## Modular arithmetic\n\n\u0060modBy\u0060 and \u0060remainderBy\u0060 behave just like the [\u0060modBy\u0060](https://package.elm-lang.org/packages/elm/core/latest/Basics#modBy)\nand [\u0060remainderBy\u0060](https://package.elm-lang.org/packages/elm/core/latest/Basics#remainderBy)\nfunctions from Elm\u0027s built-in \u0060Basics\u0060 module, but work on \u0060Quantity\u0060 values\ninstead of raw \u0060Int\u0060s. \u0060fractionalModBy\u0060 and \u0060fractionalRemainderBy\u0060 have the\nsame behaviour but extended to \u0060Float\u0060-valued quantities.\n    import Pixels exposing (pixels)\n    import Length exposing (meters, centimeters)\n    Quantity.modBy (pixels 4) (pixels 11)\n    --\u003E pixels 3\n    Quantity.fractionalModBy (meters 0.5)\n        (centimeters 162.3)\n    --\u003E centimeters 12.3\n    \n@docs modBy, fractionalModBy, remainderBy, fractionalRemainderBy\n\n## Miscellaneous\n\n@docs clamp, interpolateFrom, midpoint, range, in_\n\n# \u0060Int\u0060/\u0060Float\u0060 conversion\n\nThese functions only really make sense for quantities in units like pixels,\ncents or game tiles where an \u0060Int\u0060 number of units is meaningful. For quantities\nlike \u0060Length\u0060 or \u0060Duration\u0060, it doesn\u0027t really make sense to round to an \u0060Int\u0060\nvalue since the underyling base unit is pretty arbitrary - should \u0060round\u0060ing a\n\u0060Duration\u0060 give you an \u0060Int\u0060 number of seconds, milliseconds, or something else?\n(The actual behavior is that quantities will generally get rounded to the\nnearest SI base unit, since that is how they are stored internally - for\nexample, \u0060Length\u0060 values will get rounded to the nearest meter regardless of\nwhether they were constructed from a number of meters, centimeters, inches or\nlight years.)\n\n@docs round, floor, ceiling, truncate, toFloatQuantity\n\n# List functions\n\nThese functions act just like the corresponding functions in the built-in \u0060List\u0060\nmodule (or, int the case of \u0060minimumBy\u0060 and \u0060maximumBy\u0060, the \u0060List.Extra\u0060 module\nfrom \u0060elm-community/list-extra\u0060). They\u0027re necessary because the built-in\n\u0060List.sum\u0060 only supports \u0060List Int\u0060 and \u0060List Float\u0060, and the remaining\nfunctions only support built-in \u0060comparable\u0060 types like \u0060Int\u0060, \u0060Float\u0060, \u0060String\u0060\nand tuples.\n\n@docs sum, minimum, maximum, minimumBy, maximumBy, sort, sortBy\n\n# Unitless quantities\n\nIt is sometimes useful to be able to represent _unitless_ quantities, especially\nwhen working with generic code (in most other cases, it is likely simpler and\neasier to just use \u0060Int\u0060 or \u0060Float\u0060 values directly). All the conversions in\nthis section simply wrap or unwrap a \u0060Float\u0060 or \u0060Int\u0060 value into a \u0060Quantity\u0060\nvalue, and so should get compiled away entirely when using \u0060elm make\n--optimize\u0060.\n\n@docs Unitless, int, toInt, float, toFloat\n\n# Unsafe conversions\n\nThese functions are equivalent to directly constructing or unwrapping \u0060Quantity\u0060\nvalues, and generally shouldn\u0027t be used outside of some specialized situations\nthat can come up when authoring packages that use \u0060elm-units\u0060.\n@docs unsafe, unwrap\n\n\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs       | Rhs       | Return Type | Example          | Function |\n|----------|-----------|-----------|-------------|------------------|----------|\n| -        | Quantity  |           | Quantity    | \u0060-quantity\u0060      | [Quantity.negate](../reference/math-units-quantitymodule.html#negate) |\n| \u002B        | Quantity  | Quantity  | Quantity    | \u0060lhs \u002B rhs\u0060      | \u0060Quantity.plus\u0060 |\n| -        | Quantity  | Quantity  | Quantity    | \u0060lhs - rhs\u0060      | \u0060Quantity.difference\u0060 |\n| *        | Quantity  | Quantity  | Quantity    | \u0060lhs * rhs\u0060      | \u0060Quantity.product\u0060 \u0026 \u0060Quantity.times\u0060 |\n| *        | Quantity  | float     | Quantity    | \u0060lhs * 0.5\u0060      | \u0060Quantity.multiplyBy\u0060 |\n| *        | float     | Quantity  | Quantity    | \u00600.5 * rhs\u0060      | \u0060Quantity.multiplyBy\u0060 |\n| /        | Quantity  | Quantity  | float       | \u0060lhs / rhs\u0060      | \u0060Quantity.ratio\u0060 |\n| /        | Quantity  | float     | Quantity    | \u0060lhs / 4.\u0060       | \u0060Quantity.dividedBy\u0060 |\n\n*)\n\n(**\n\n| Operator | Lhs       | Return Type | Example          | Function |\n|----------|-----------|-------------|------------------|----------|\n| abs      | Quantity  | Quantity    | \u0060-length\u0060        | \u0060Quantity.abs\u0060 |\n| min      | Quantity  | Quantity    | \u0060lhs \u002B rhs\u0060      | \u0060Quantity.min\u0060 |\n| max      | Quantity  | Quantity    | \u0060lhs - rhs\u0060      | \u0060Quantity.max\u0060 |\n| sqrt     | Quantity\u003C\u0027Units\u003E  | Quantity\u003C\u0027Units Squared\u003E  | \u0060lhs * 0.5\u0060      | \u0060Quantity.sqrt\u0060 |\n| floor    | Quantity  | Quantity    | \u00600.5 * rhs\u0060      | \u0060Quantity.floor\u0060 |\n| ceil     | Quantity  | Length      | \u0060angle / length\u0060 | \u0060Quantity.ceil\u0060 |\n| round    | Quantity  | Quantity      | \u0060length / angle\u0060 | \u0060Quantity.round\u0060 |\n| truncate | Quantity  | Quantity    | \u0060lhs / 4.\u0060       | \u0060Quantity.truncate\u0060 |\n\n*)"},{"uri":"https://evelios.github.io/Math.Units/index.html","title":"FSharp Geometry Package","content":"(**\n\n---\ntitle: FSharp Geometry Package\n---\n\nThis package is a port and extension of the framework [elm-units](https://package.elm-lang.org/packages/ianmackenzie/elm-units/latest/).\nHuge thanks to [@ianmackenzie](https://github.com/ianmackenzie) for creating the original package and writing much of\nthe original documentation.\n\nNote: This framework is currently in __alpha__ development.\n\n*)\n(*** hide ***)\n\n#r \u0022../Math.Units/bin/Release/net6.0/Math.Units.dll\u0022\n\nopen System\n\n(** *)\n\n(**\nTo use this framework you include the package through the namespace\n*)\n\nopen Math.Units\n\n(**\n# Math.Units\n\n_Release notes for 2.0 are [here](https://github.com/ianmackenzie/elm-units/releases/tag/2.0.0)._\n\n[Math.Units](./reference/math-units.html) is useful if you want to store, pass around, convert between,\ncompare, or do arithmetic on:\n\n- Durations (seconds, milliseconds, hours...)\n- Angles (degrees, radians, turns...)\n- Lengths (meters, feet, inches, miles, light years...)\n- Temperatures (Celsius, Fahrenheit, kelvins)\n- Pixels (whole or partial)\n- Speeds (pixels per second, miles per hour...) or any other rate of change\n- Any of the other built-in quantity types: areas, accelerations, masses,\n  forces, pressures, currents, voltages...\n- Or even values in your own custom units, such as \u0027number of tiles\u0027 in a\n  tile-based game\n\nIt is aimed especially at engineering/scientific/technical applications but is\ndesigned to be generic enough to work well for other fields such as games and\nfinance. The core of the package consists of a generic \u0060Quantity\u0060 type and\nmany concrete types such as \u0060Length\u0060, \u0060Angle\u0060, \u0060Duration\u0060, \u0060Temperature\u0060, and\n\u0060Speed\u0060, which you can use to add some nice type safety to data types and\nfunction signatures:\n*)\n\ntype Camera =\n    { fieldOfView: Angle\n      shutterSpeed: Duration\n      minimumOperatingTemperature: Temperature }\n\nlet canOperateAt (temperature: Temperature) (camera: Camera) : bool =\n    temperature\n    |\u003E Temperature.greaterThan camera.minimumOperatingTemperature\n\n(**\nYou can construct values of these types from any units you want, using provided\nfunctions such as:\n\n__Hint: hover over the function names to see the type values__\n*)\n\nLength.feet\nLength.meters\nDuration.seconds\nAngle.degrees\nTemperature.degreesFahrenheit\n\n\n(**\nYou can later convert back to plain numeric values, also in any units you want\n(which do not have to be the same units used when initially constructing the\nvalue!):\n*)\n\nLength.inCentimeters\nLength.inMiles\nDuration.inHours\nAngle.inRadians\nTemperature.inDegreesCelsius\n\n(**\nThis means that (among other things!) you can use these functions to do simple\nunit conversions:\n*)\n\nDuration.hours 3. |\u003E Duration.inSeconds\n(*** include-it ***)\n\nLength.feet 10. |\u003E Length.inMeters\n(*** include-it ***)\n\nSpeed.milesPerHour 60. |\u003E Speed.inMetersPerSecond\n(*** include-it ***)\n\nTemperature.degreesCelsius 30.\n|\u003E Temperature.inDegreesFahrenheit\n(*** include-it ***)\n\n(**\nAdditionally, types like \u0060Length\u0060 are actually type aliases of the form\n\u0060Quantity number units\u0060 (\u0060Length\u0060 is \u0060Quantity Float Meters\u0060, for example,\nmeaning that it is internally stored as a number of meters), and there are\nmany generic functions which let you work directly with any kind of \u0060Quantity\u0060\nvalues:\n*)\n\nLength.feet 3.\n|\u003E Quantity.lessThan (Length.meters 1.)\n(*** include-it ***)\n\nDuration.hours 2.\n|\u003E Quantity.plus (Duration.minutes 30.)\n|\u003E Duration.inSeconds\n(*** include-it ***)\n\n// Some functions can actually convert between units!\n// Multiplying two Length values gives you an Area\nLength.centimeters 60.\n|\u003E Quantity.times (Length.centimeters 80.)\n(*** include-it ***)\n\nQuantity.sort [ Angle.radians 1.\n                Angle.degrees 10.\n                Angle.turns 0.5 ]\n(*** include-it ***)\n\n(**\nUltimately, what this does is let you pass around and manipulate \u0060Length\u0060,\n\u0060Duration\u0060 or \u0060Temperature\u0060 etc. values without having to worry about units.\nWhen you initially construct a \u0060Length\u0060, you need to specify what units you\u0027re\nusing, but once that is done you can:\n\n- Store the length inside a data structure\n- Pass it around between different functions\n- Compare it to other lengths\n- Add and subtract it to other lengths\n- Multiply it by another length to get an area, or divide by a duration to\n  get a speed\n\n...and much more, all without having to care about units at all. All\ncalculations will be done in an internally consistent way, and when you finally\nneed to actually display a value on screen or encode to JSON, you can extract\nthe final result in whatever units you want.\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Fundamentals](#fundamentals)\n  - [The \u0060Quantity\u0060 type](#the-quantity-type)\n  - [Basic arithmetic and comparison](#basic-arithmetic-and-comparison)\n  - [Multiplication and division](#multiplication-and-division)\n  - [Argument order](#argument-order)\n  - [Custom functions](#custom-functions)\n  - [Custom units](#custom-units)\n  - [Understanding quantity types](#understanding-quantity-types)\n- [Getting help](#getting-help)\n- [API](#api)\n- [Climate action](#climate-action)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nAssuming you have [installed dotnet](https://dotnet.microsoft.com/en-us/download) and\nstarted a new project, you can install \u0060Math.Units\u0060 by running\n\n    [Lang=sh]\n    dotnet add package Math.Units\n\nin a command prompt inside your project directory.\n\n## Usage\n\n### Fundamentals\n\nTo take code that currently uses raw \u0060float\u0060 values and convert it to using\n\u0060Math.Units\u0060 types, there are three basic steps:\n\n- Wherever you store a \u0060float\u0060, such as in your model or in a message, switch\n  to storing a \u0060Duration\u0060 or \u0060Angle\u0060 or \u0060Temperature\u0060 etc. value instead.\n- Whenever you _have_ a \u0060Float\u0060 (from an external package, JSON decoder etc.),\n  use a function such as \u0060Duration.seconds\u0060, \u0060Angle.degrees\u0060 or\n  \u0060Temperature.degreesFahrenheit\u0060 to turn it into a type-safe value.\n- Whenever you _need_ a \u0060float\u0060 (to pass to an external package, encode as\n  JSON etc.), use a function such as \u0060Duration.inMilliseconds\u0060,\n  \u0060Angle.inRadians\u0060 or \u0060Temperature.inDegreesCelsius\u0060 to extract the value in\n  whatever units you want.\n- Where you do math with \u0060Float\u0060 values, switch to using \u0060Quantity\u0060 functions\n  like \u0060Quantity.plus\u0060 or \u0060Quantity.greaterThan\u0060. If this becomes impractical,\n  there are [other approaches](#custom-functions).\n\n### The Quantity type\n\nAll values produced by this package (with the exception of \u0060Temperature\u0060, which\nis a bit of a special case) are actually values of type \u0060Quantity\u0060, roughly\ndefined as...\n*)\n\ntype Quantity\u003C\u0027Units\u003E(quantity: float) =\n    member this.Value = quantity\n\n\n(** For example, \u0060Length\u0060 is defined as *)\ntype Meters = Meters\ntype Length = Quantity\u003CMeters\u003E\n\n(**\nThis means that a \u0060Length\u0060 is internally stored as a \u0060float\u0060 number of \u0060Meters\u0060,\nbut the choice of internal units can mostly be treated as an implementation\ndetail.\n\nHaving a common \u0060Quantity\u0060 type means that it is possible to define generic\narithmetic and comparison operations that work on any kind of quantity; read on!\n\n### Basic arithmetic and comparison\n\nYou can do basic math with \u0060Quantity\u0060 values:\n*)\n\n// 6 feet 3 inches, converted to meters\nLength.feet 6.\n|\u003E Quantity.plus (Length.inches 3.)\n|\u003E Length.inMeters\n(*** include-it ***)\n\nDuration.hours 1.\n|\u003E Quantity.minus (Duration.minutes 15.)\n|\u003E Duration.inMinutes\n(*** include-it ***)\n\n// pi radians plus 45 degrees is 5/8 of a full turn\nQuantity.sum [ Angle.radians Math.PI\n               Angle.degrees 45. ]\n|\u003E Angle.inTurns\n(*** include-it ***)\n\n\n(** \u0060Quantity\u0060 values can be compared/sorted: *)\n\nLength.meters 1.\n|\u003E Quantity.greaterThan (Length.feet 3.)\n(*** include-it ***)\n\nQuantity.compare (Length.meters 1.) (Length.feet 3.)\n(*** include-it ***)\n\nQuantity.max (Length.meters 1.) (Length.feet 3.)\n(*** include-it ***)\n\nQuantity.maximum [ Length.meters 1.\n                   Length.feet 3. ]\n(*** include-it ***)\n\nQuantity.sort [ Length.meters 1.\n                Length.feet 3. ]\n(*** include-it ***)\n\n\n(**\n### Multiplication and division\n\nThere are actually three different \u0027families\u0027 of multiplication and division\nfunctions in the \u0060Quantity\u0060 module, used in different contexts:\n\n- \u0060multiplyBy\u0060 and \u0060divideBy\u0060 are used to multiply (scale) or divide a\n  \u0060Quantity\u0060 by a plain \u0060Int\u0060 or \u0060Float\u0060, with \u0060twice\u0060 and \u0060half\u0060 for the common\n  cases of multiplying or dividing by 2\n- \u0060product\u0060, \u0060times\u0060, \u0060over\u0060 and \u0060over_\u0060 are used to work with quantities that\n  are products of other quantities:\n  - multiply a \u0060Length\u0060 by another \u0060Length\u0060 to get an \u0060Area\u0060\n  - multiply an \u0060Area\u0060 by a \u0060Length\u0060 to get a \u0060Volume\u0060\n  - multiply a \u0060Mass\u0060 by an \u0060Acceleration\u0060 to get a \u0060Force\u0060\n  - divide a \u0060Volume\u0060 by an \u0060Area\u0060 to get a \u0060Length\u0060\n  - divide a \u0060Force\u0060 by a \u0060Mass\u0060 to get an \u0060Acceleration\u0060\n- \u0060rate\u0060, \u0060per\u0060, \u0060at\u0060, \u0060at_\u0060 and \u0060for\u0060 are used to work with rates of change:\n  - divide \u0060Length\u0060 by \u0060Duration\u0060 to get \u0060Speed\u0060\n  - multiply \u0060Speed\u0060 by \u0060Duration\u0060 to get \u0060Length\u0060\n  - divide \u0060Length\u0060 by \u0060Speed\u0060 to get \u0060Duration\u0060\n- And one bonus fourth function: \u0060ratio\u0060, used to divide two quantities with\n  the same units to get a plain \u0060Float\u0060 value\n\nFor example, to calculate the area of a triangle:\n*)\n\n// Area of a triangle with base of 2 feet and\n// height of 8 inches\nlet baseSize = Length.feet 2.\nlet height = Length.inches 8.\n\nQuantity.half (Quantity.product baseSize height)\n|\u003E Area.inSquareInches\n(*** include-it ***)\n\n(** Comprehensive support is provided for working with rates of change: *)\n\n// How fast are we going if we travel 30 meters in\n// 2 seconds?\nlet speed =\n    Length.meters 30.\n    |\u003E Quantity.per (Duration.seconds 2.)\n// How far do we go if we travel for 2 minutes\n// at that speed?\nDuration.minutes 2. // duration\n|\u003E Quantity.at speed // length per duration\n|\u003E Length.inKilometers // gives us a length!\n(*** include-it ***)\n\n// How long will it take to travel 20 km\n// if we\u0027re driving at 60 mph?\nLength.kilometers 20.\n|\u003E Quantity.at_ (Speed.milesPerHour 60.)\n|\u003E Duration.inMinutes\n(*** include-it ***)\n\n// How fast is \u0022a mile a minute\u0022, in kilometers per hour?\nLength.miles 1.\n|\u003E Quantity.per (Duration.minutes 1.)\n|\u003E Speed.inKilometersPerHour\n(*** include-it ***)\n\n// Reverse engineer the speed of light from defined\n// lengths/durations (the speed of light is \u0027one light\n// year per year\u0027)\nlet speedOfLight =\n    Length.lightYears 1.\n    |\u003E Quantity.per (Duration.julianYears 1.)\n\nspeedOfLight |\u003E Speed.inMetersPerSecond\n(*** include-it ***)\n\n// One astronomical unit is the (average) distance from the\n// Sun to the Earth. Roughly how long does it take light to\n// reach the Earth from the Sun?\nLength.astronomicalUnits 1.\n|\u003E Quantity.at_ speedOfLight\n|\u003E Duration.inMinutes\n(*** include-it ***)\n\n(**\nNote that the various functions above are not restricted to speed (length per\nunit time) - any units work:\n*)\n\nlet pixelDensity =\n    Pixels.float 96.\n    |\u003E Quantity.per (Length.inches 1.)\n\nLength.centimeters 3. // length\n|\u003E Quantity.at pixelDensity // pixels per length\n|\u003E Pixels.toFloat // gives us pixels!\n(*** include-it ***)\n\n(**\n\n### Argument order\n\nNote that several functions like \u0060Quantity.minus\u0060 and \u0060Quantity.lessThan\u0060 (and\ntheir \u0060Temperature\u0060 equivalents) that mimic binary operators like \u0060-\u0060 and \u0060\u003C\u0060\n\u0022take the second argument first\u0022; for example,\n\n*)\n\n(*** hide ***)\n\nlet x = Quantity.unitless 0.\nlet y = Quantity.unitless 1.\n\n(** *)\n\nQuantity.lessThan x y\n\n(**\nmeans \u0060y \u003C x\u0060, _not_ \u0060x \u003C y\u0060. This is done for a couple of reasons. First, so\nthat use with \u0060|\u003E\u0060 works naturally; for example,\n*)\n\nx |\u003E Quantity.lessThan y\n\n(*** hide ***)\n\nlet a, b, c =\n    Quantity.unitless 0., Quantity.unitless 1., Quantity.unitless 2.\n\n(**\n_does_ mean \u0060x \u003C y\u0060. The \u0027reversed\u0027 argument order also means that things like\n*)\n\nList.map (Quantity.minus x) [ a; b; c ]\n\n(** will work as expected - it will result in *)\n\n[ a - x, b - x, c - x ]\n\n(** instead of *)\n\n[ x - a, x - b, x - c ]\n\n(**\nwhich is what you would get if \u0060Quantity.minus\u0060 took arguments in the \u0027normal\u0027\norder.\n\nThere are, however, several functions that take arguments in \u0027normal\u0027 order, for\nexample:\n\n- \u0060Quantity.difference\u0060 (compare to \u0060minus\u0060)\n- \u0060Quantity.product\u0060 (compare to \u0060times\u0060)\n- \u0060Quantity.rate\u0060 (compare to \u0060per\u0060)\n- \u0060Quantity.ratio\u0060\n- \u0060Quantity.compare\u0060\n\nIn general the function names try to match how you would use them in English;\nyou would say \u0022the difference of \u0060a\u0060 and \u0060b\u0060\u0022 (and so \u0060Quantity.difference a b\u0060)\nbut \u0022\u0060a\u0060 minus \u0060b\u0060\u0022 (and so \u0060a |\u003E Quantity.minus b\u0060).\n\n### Custom Functions\n\nSome calculations cannot be expressed using the built-in \u0060Quantity\u0060 functions.\nTake kinetic energy \u0060E_k = 1/2 * m * v^2\u0060, for example - the \u0060Math.Units\u0060 type\nsystem is not sophisticated enough to work out the units properly. Instead,\nyou\u0027d need to create a custom function like\n\n*)\n\nlet kineticEnergy (m: Mass) (v: Speed) : Energy =\n    Quantity.create (0.5 * m.Value * v.Value * v.Value)\n\n(**\nIn the _implementation_ of \u0060kineticEnergy\u0060, you\u0027re working with raw \u0060Float\u0060\nvalues so you need to be careful to make sure the units actually do work out.\n(The values will be in [SI units][https://en.wikipedia.org/wiki/International_System_of_Units]\n- meters, seconds etc.) Once the function has been implemented, though, it \ncan be used in a completely type-safe way - callers can supply arguments \nusing whatever units they have, and extract results in whatever units they want:\n[6]: \n*)\n\nkineticEnergy (Mass.shortTons 1.5) (Speed.milesPerHour 60.)\n|\u003E Energy.inKilowattHours\n(*** include-it ***)\n\n(**\n### Custom Units\n\n\u0060Math.Units\u0060 defines many standard unit types, but you can easily define your\nown! See [CustomUnits][#CustomUnits] for an example.\n\n### Understanding quantity types\n\nThe same quantity type can often be expressed in multiple different ways. Take\nthe \u0060Volume\u0060 type as an example. It is an alias for\n*)\n\nQuantity\u003CCubicMeters\u003E\n\n(** but expanding the \u0060CubicMeters\u0060 type alias, this is equivalent to *)\n\nQuantity\u003CMeters Cubed\u003E\n\n(** which expands further to *)\n\nQuantity\u003CProduct\u003CProduct\u003CMeters, Meters\u003E, Meters\u003E\u003E\n\n(** which could also be written as *)\n\nQuantity\u003CProduct\u003CMeters Squared, Meters\u003E\u003E\n\n(** or even *)\n\nQuantity\u003CProduct\u003CSquareMeters, Meters\u003E\u003E\n\n(**\nand you may see any one of these forms pop up in compiler error messages.\n\n## API\n\n[Full API documentation][reference/math-units.html] is available.\n\n## Climate action\n\nThis is a message from Ian Mackenzie but as the maintainer of this package I\nbelieve in this mantra and will follow through with his wishes on giving\npriority to issues regarding climate action.\n\nI would like for the projects I work on to be as helpful as possible in\naddressing the climate crisis. If\n\n- you are working on a project that helps address the climate crisis (clean\n  energy, public transit, reforestation, sustainable agriculture etc.) either as\n  an individual, as part of an non-profit organization or even as part of a\n  for-profit company, and\n- there is a new feature you would find helpful for that work (or a bug you need\n  fixed) in any of my open-source projects, then\n\nplease [open a new issue](https://github.com/evelios/Math.Units/issues),\ndescribe briefly what you\u0027re working on and I will treat that issue as high\npriority.\n\n## Contributing\n\nYes please! One of the best ways to contribute is to add a module for a new\nquantity type; I\u0027ll add a proper CONTRIBUTING.md at some point, but some\nbrief guidelines in the meantime:\n\n- Open a pull request by forking this repository, creating a new branch in\n  your fork, making all changes in that branch, then opening a pull request\n  from that branch.\n- Git commit messages should follow [the seven rules of a great Git commit\n  message][https://chris.beams.io/posts/git-commit/#seven-rules], although I\u0027m not strict about the 50 or 72 character rules.\n\n## License\n\n[elm-units BSD-3-Clause \u00A9 Ian Mackenzie][https://github.com/ianmackenzie/elm-units/blob/master/LICENSE]\n[Math.Units BSD-3-Clause \u00A9 Thomas Waters][https://github.com/evelios/Math.Unitsrblob/master/LICENSE]\n*)"}]