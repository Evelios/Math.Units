[{"uri":"https://evelios.github.io/Math.Units/reference/fsharp-extensions.html","title":"FSharp.Extensions","content":"Tuple2"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units.html","title":"Math.Units","content":"Acceleration \nAngle \nAngularAcceleration \nAngularSpeed \nArea \nCapacitance \nCharge \nConstants \nCurrent \nDensity \nDuration \nEnergy \nFloat \nForce \nIlluminance \nInductance \nInterval \nLength \nLuminance \nLuminousFlux \nLuminousIntensity \nMass \nMolarity \nPixels \nPower \nPressure \nQuantity \nResistance \nSolidAngle \nSpeed \nSubstanceAmount \nTemperature \nVoltage \nVolume \nAcceleration \nAmperes \nAngle \nAngularAcceleration \nAngularSpeed \nArea \nCandelas \nCapacitance \nCelsiusDegrees \nCharge \nCoulombs \nCubed\u003C\u0027Units\u003E \nCubicMeters \nCurrent \nDelta \nDensity \nDuration \nEnergy \nFarads \nFloat \nForce \nHenries \nIlluminance \nInductance \nInterval\u003C\u0027Units\u003E \nJoules \nKilograms \nKilogramsPerCubicMeter \nLength \nLumens \nLuminance \nLuminousFlux \nLuminousIntensity \nLux \nMass \nMeters \nMetersPerSecond \nMetersPerSecondSquared \nMolarity \nMoles \nMolesPerCubicMeter \nNewtons \nNits \nOhms \nPascals \nPercent \nPercentage \nPixel \nPixels \nPixelsPerSecond \nPixelsPerSecondSquared \nPower \nPressure \nProduct\u003C\u0027Unit1, \u0027Unit2\u003E \nQuantity\u003C\u0027Units\u003E \nRadians \nRadiansPerSecond \nRadiansPerSecondSquared \nRate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E \nResistance \nSeconds \nSolidAngle \nSpeed \nSquareMeters \nSquarePixels \nSquared\u003C\u0027Units\u003E \nSteradians \nSubstanceAmount \nTemperature \nUnitless \nVoltage \nVolts \nVolume \nWatts"},{"uri":"https://evelios.github.io/Math.Units/reference/fsharp-extensions-tuple2.html","title":"Tuple2","content":"Tuple2 \n \nTuple2.pair \npair"},{"uri":"https://evelios.github.io/Math.Units/reference/fsharp-extensions-tuple2.html#pair","title":"Tuple2.pair","content":"Tuple2.pair \npair \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html","title":"Acceleration","content":"Acceleration \n \nAcceleration.metersPerSecondSquared \nmetersPerSecondSquared \nAcceleration.inMetersPerSecondSquared \ninMetersPerSecondSquared \nAcceleration.feetPerSecondSquared \nfeetPerSecondSquared \nAcceleration.inFeetPerSecondSquared \ninFeetPerSecondSquared \nAcceleration.gees \ngees \nAcceleration.inGees \ninGees"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#metersPerSecondSquared","title":"Acceleration.metersPerSecondSquared","content":"Acceleration.metersPerSecondSquared \nmetersPerSecondSquared \n\u003Cp\u003EConstruct an acceleration from a number of meters per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#inMetersPerSecondSquared","title":"Acceleration.inMetersPerSecondSquared","content":"Acceleration.inMetersPerSecondSquared \ninMetersPerSecondSquared \n\u003Cp\u003EConvert an acceleration to a number of meters per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#feetPerSecondSquared","title":"Acceleration.feetPerSecondSquared","content":"Acceleration.feetPerSecondSquared \nfeetPerSecondSquared \n\u003Cp\u003EConstruct an acceleration from a number of feet per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#inFeetPerSecondSquared","title":"Acceleration.inFeetPerSecondSquared","content":"Acceleration.inFeetPerSecondSquared \ninFeetPerSecondSquared \n\u003Cp\u003EConvert an acceleration to a number of feet per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#gees","title":"Acceleration.gees","content":"Acceleration.gees \ngees \n\u003Cp\u003EConstruct an acceleration from a number of [gees][1]. One gee is equal to\n9.80665 meters per second squared (the standard acceleration due to gravity).\nAcceleration.gees 1\n--\u0026gt; Acceleration.metersPerSecondSquared 9.80665\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/G-force#Unit_and_measurement\u0022\u003Ehttps://en.wikipedia.org/wiki/G-force#Unit_and_measurement\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-accelerationmodule.html#inGees","title":"Acceleration.inGees","content":"Acceleration.inGees \ninGees \n\u003Cp\u003EConvert an acceleration to a number of gees.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html","title":"Angle","content":"Angle \n \nAngle.radians \nradians \nAngle.inRadians \ninRadians \nAngle.pi \npi \nAngle.twoPi \ntwoPi \nAngle.piOverTwo \npiOverTwo \nAngle.halfPi \nhalfPi \nAngle.degrees \ndegrees \nAngle.inDegrees \ninDegrees \nAngle.turns \nturns \nAngle.inTurns \ninTurns \nAngle.minutes \nminutes \nAngle.inMinutes \ninMinutes \nAngle.seconds \nseconds \nAngle.inSeconds \ninSeconds \nAngle.normalize \nnormalize \nAngle.sin \nsin \nAngle.cos \ncos \nAngle.tan \ntan \nAngle.asin \nasin \nAngle.acos \nacos \nAngle.atan \natan \nAngle.radian \nradian \nAngle.degree \ndegree \nAngle.turn \nturn \nAngle.minute \nminute \nAngle.second \nsecond"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#radians","title":"Angle.radians","content":"Angle.radians \nradians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inRadians","title":"Angle.inRadians","content":"Angle.inRadians \ninRadians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#pi","title":"Angle.pi","content":"Angle.pi \npi \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#twoPi","title":"Angle.twoPi","content":"Angle.twoPi \ntwoPi \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#piOverTwo","title":"Angle.piOverTwo","content":"Angle.piOverTwo \npiOverTwo \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#halfPi","title":"Angle.halfPi","content":"Angle.halfPi \nhalfPi \n\u003Cp\u003EAlias for \u003Ccode\u003EpiOverTwo\u003C/code\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#degrees","title":"Angle.degrees","content":"Angle.degrees \ndegrees \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inDegrees","title":"Angle.inDegrees","content":"Angle.inDegrees \ninDegrees \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#turns","title":"Angle.turns","content":"Angle.turns \nturns \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inTurns","title":"Angle.inTurns","content":"Angle.inTurns \ninTurns \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#minutes","title":"Angle.minutes","content":"Angle.minutes \nminutes \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inMinutes","title":"Angle.inMinutes","content":"Angle.inMinutes \ninMinutes \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#seconds","title":"Angle.seconds","content":"Angle.seconds \nseconds \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#inSeconds","title":"Angle.inSeconds","content":"Angle.inSeconds \ninSeconds \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#normalize","title":"Angle.normalize","content":"Angle.normalize \nnormalize \n\u003Cp\u003EConvert an arbitrary angle to the equivalent angle in the range -180 to 180\ndegrees (-\u03C0 to \u03C0 radians), by adding or subtracting some multiple of 360\ndegrees (2\u03C0 radians) if necessary.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#sin","title":"Angle.sin","content":"Angle.sin \nsin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#cos","title":"Angle.cos","content":"Angle.cos \ncos \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#tan","title":"Angle.tan","content":"Angle.tan \ntan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#asin","title":"Angle.asin","content":"Angle.asin \nasin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#acos","title":"Angle.acos","content":"Angle.acos \nacos \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#atan","title":"Angle.atan","content":"Angle.atan \natan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#radian","title":"Angle.radian","content":"Angle.radian \nradian \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#degree","title":"Angle.degree","content":"Angle.degree \ndegree \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#turn","title":"Angle.turn","content":"Angle.turn \nturn \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#minute","title":"Angle.minute","content":"Angle.minute \nminute \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-anglemodule.html#second","title":"Angle.second","content":"Angle.second \nsecond \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html","title":"AngularAcceleration","content":"AngularAcceleration \n \nAngularAcceleration.radiansPerSecondSquared \nradiansPerSecondSquared \nAngularAcceleration.inRadiansPerSecondSquared \ninRadiansPerSecondSquared \nAngularAcceleration.degreesPerSecondSquared \ndegreesPerSecondSquared \nAngularAcceleration.inDegreesPerSecondSquared \ninDegreesPerSecondSquared \nAngularAcceleration.turnsPerSecondSquared \nturnsPerSecondSquared \nAngularAcceleration.inTurnsPerSecondSquared \ninTurnsPerSecondSquared"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#radiansPerSecondSquared","title":"AngularAcceleration.radiansPerSecondSquared","content":"AngularAcceleration.radiansPerSecondSquared \nradiansPerSecondSquared \n\u003Cp\u003EConstruct an angular acceleration from a number of radians per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#inRadiansPerSecondSquared","title":"AngularAcceleration.inRadiansPerSecondSquared","content":"AngularAcceleration.inRadiansPerSecondSquared \ninRadiansPerSecondSquared \n\u003Cp\u003EConvert an angular acceleration to a number of radians per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#degreesPerSecondSquared","title":"AngularAcceleration.degreesPerSecondSquared","content":"AngularAcceleration.degreesPerSecondSquared \ndegreesPerSecondSquared \n\u003Cp\u003EConstruct an angular acceleration from a number of degrees per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#inDegreesPerSecondSquared","title":"AngularAcceleration.inDegreesPerSecondSquared","content":"AngularAcceleration.inDegreesPerSecondSquared \ninDegreesPerSecondSquared \n\u003Cp\u003EConvert an angular acceleration to a number of degrees per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#turnsPerSecondSquared","title":"AngularAcceleration.turnsPerSecondSquared","content":"AngularAcceleration.turnsPerSecondSquared \nturnsPerSecondSquared \n\u003Cp\u003EConstruct an angular acceleration from a number of turns per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularaccelerationmodule.html#inTurnsPerSecondSquared","title":"AngularAcceleration.inTurnsPerSecondSquared","content":"AngularAcceleration.inTurnsPerSecondSquared \ninTurnsPerSecondSquared \n\u003Cp\u003EConvert an angular acceleration to a number of turns per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html","title":"AngularSpeed","content":"AngularSpeed \n \nAngularSpeed.radiansPerSecond \nradiansPerSecond \nAngularSpeed.inRadiansPerSecond \ninRadiansPerSecond \nAngularSpeed.degreesPerSecond \ndegreesPerSecond \nAngularSpeed.inDegreesPerSecond \ninDegreesPerSecond \nAngularSpeed.turnsPerSecond \nturnsPerSecond \nAngularSpeed.inTurnsPerSecond \ninTurnsPerSecond \nAngularSpeed.turnsPerMinute \nturnsPerMinute \nAngularSpeed.inTurnsPerMinute \ninTurnsPerMinute \nAngularSpeed.revolutionsPerSecond \nrevolutionsPerSecond \nAngularSpeed.inRevolutionsPerSecond \ninRevolutionsPerSecond \nAngularSpeed.revolutionsPerMinute \nrevolutionsPerMinute \nAngularSpeed.inRevolutionsPerMinute \ninRevolutionsPerMinute"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#radiansPerSecond","title":"AngularSpeed.radiansPerSecond","content":"AngularSpeed.radiansPerSecond \nradiansPerSecond \n\u003Cp\u003EConstruct an angular speed from a number of radians per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inRadiansPerSecond","title":"AngularSpeed.inRadiansPerSecond","content":"AngularSpeed.inRadiansPerSecond \ninRadiansPerSecond \n\u003Cp\u003EConvert an angular speed to a number of radians per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#degreesPerSecond","title":"AngularSpeed.degreesPerSecond","content":"AngularSpeed.degreesPerSecond \ndegreesPerSecond \n\u003Cp\u003EConstruct an angular speed from a number of degrees per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inDegreesPerSecond","title":"AngularSpeed.inDegreesPerSecond","content":"AngularSpeed.inDegreesPerSecond \ninDegreesPerSecond \n\u003Cp\u003EConvert an angular speed to a number of degrees per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#turnsPerSecond","title":"AngularSpeed.turnsPerSecond","content":"AngularSpeed.turnsPerSecond \nturnsPerSecond \n\u003Cp\u003EConstruct an angular speed from a number of turns per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inTurnsPerSecond","title":"AngularSpeed.inTurnsPerSecond","content":"AngularSpeed.inTurnsPerSecond \ninTurnsPerSecond \n\u003Cp\u003EConvert an angular speed to a number of turns per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#turnsPerMinute","title":"AngularSpeed.turnsPerMinute","content":"AngularSpeed.turnsPerMinute \nturnsPerMinute \n\u003Cp\u003EConstruct an angular speed from a number of turns per minute.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inTurnsPerMinute","title":"AngularSpeed.inTurnsPerMinute","content":"AngularSpeed.inTurnsPerMinute \ninTurnsPerMinute \n\u003Cp\u003EConvert an angular speed to a number of turns per minute.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#revolutionsPerSecond","title":"AngularSpeed.revolutionsPerSecond","content":"AngularSpeed.revolutionsPerSecond \nrevolutionsPerSecond \n\u003Cp\u003EAlias for \u003Ccode\u003EturnsPerSecond\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inRevolutionsPerSecond","title":"AngularSpeed.inRevolutionsPerSecond","content":"AngularSpeed.inRevolutionsPerSecond \ninRevolutionsPerSecond \n\u003Cp\u003EAlias for \u003Ccode\u003EinTurnsPerSecond\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#revolutionsPerMinute","title":"AngularSpeed.revolutionsPerMinute","content":"AngularSpeed.revolutionsPerMinute \nrevolutionsPerMinute \n\u003Cp\u003EAlias for \u003Ccode\u003EturnsPerMinute\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeedmodule.html#inRevolutionsPerMinute","title":"AngularSpeed.inRevolutionsPerMinute","content":"AngularSpeed.inRevolutionsPerMinute \ninRevolutionsPerMinute \n\u003Cp\u003EAlias for \u003Ccode\u003EinTurnsPerMinute\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html","title":"Area","content":"Area \n\u003Cp\u003EAn \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-area.html\u0022 title=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E represents an area in square meters, square feet, acres, hectares\netc. It is stored as a number of square meters.\nNote that you can construct an \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-area.html\u0022 title=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E value directly using the functions in this\nmodule, but it also works to call \u003Ca href=\u0022Quantity#squared\u0022\u003E\u003Ccode\u003EQuantity.squared\u003C/code\u003E\u003C/a\u003E on a\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-length.html\u0022 title=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022Quantity#times\u0022\u003E\u003Ccode\u003EQuantity.times\u003C/code\u003E\u003C/a\u003E on a pair of \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-length.html\u0022 title=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003Es. The\nfollowing are all equivalent:\nArea.squareFeet 100\nQuantity.squared (Length.feet 10)\nLength.feet 25 |\u0026gt; Quantity.times (Length.feet 4)\u003C/p\u003E\n\n \nArea.squareMeters \nsquareMeters \nArea.inSquareMeters \ninSquareMeters \nArea.squareMillimeters \nsquareMillimeters \nArea.inSquareMillimeters \ninSquareMillimeters \nArea.squareInches \nsquareInches \nArea.inSquareInches \ninSquareInches \nArea.squareCentimeters \nsquareCentimeters \nArea.inSquareCentimeters \ninSquareCentimeters \nArea.squareFeet \nsquareFeet \nArea.inSquareFeet \ninSquareFeet \nArea.squareYards \nsquareYards \nArea.inSquareYards \ninSquareYards \nArea.hectares \nhectares \nArea.inHectares \ninHectares \nArea.squareKilometers \nsquareKilometers \nArea.inSquareKilometers \ninSquareKilometers \nArea.acres \nacres \nArea.inAcres \ninAcres \nArea.squareMiles \nsquareMiles \nArea.inSquareMiles \ninSquareMiles \nArea.squareMeter \nsquareMeter \nArea.squareMillimeter \nsquareMillimeter \nArea.squareCentimeter \nsquareCentimeter \nArea.hectare \nhectare \nArea.squareKilometer \nsquareKilometer \nArea.squareInch \nsquareInch \nArea.squareFoot \nsquareFoot \nArea.squareYard \nsquareYard \nArea.acre \nacre \nArea.squareMile \nsquareMile"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMeters","title":"Area.squareMeters","content":"Area.squareMeters \nsquareMeters \n\u003Cp\u003EConstruct an area from a number of square meters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareMeters","title":"Area.inSquareMeters","content":"Area.inSquareMeters \ninSquareMeters \n\u003Cp\u003EConvert an area to a number of square meters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMillimeters","title":"Area.squareMillimeters","content":"Area.squareMillimeters \nsquareMillimeters \n\u003Cp\u003EConstruct an area from a number of square millimeters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareMillimeters","title":"Area.inSquareMillimeters","content":"Area.inSquareMillimeters \ninSquareMillimeters \n\u003Cp\u003EConvert an area to a number of square millimeters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareInches","title":"Area.squareInches","content":"Area.squareInches \nsquareInches \n\u003Cp\u003EConstruct an area from a number of square inches.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareInches","title":"Area.inSquareInches","content":"Area.inSquareInches \ninSquareInches \n\u003Cp\u003EConvert an area to a number of square inches.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareCentimeters","title":"Area.squareCentimeters","content":"Area.squareCentimeters \nsquareCentimeters \n\u003Cp\u003EConstruct an area from a number of square centimeters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareCentimeters","title":"Area.inSquareCentimeters","content":"Area.inSquareCentimeters \ninSquareCentimeters \n\u003Cp\u003EConvert an area to a number of square centimeters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareFeet","title":"Area.squareFeet","content":"Area.squareFeet \nsquareFeet \n\u003Cp\u003EConstruct an area from a number of square feet.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareFeet","title":"Area.inSquareFeet","content":"Area.inSquareFeet \ninSquareFeet \n\u003Cp\u003EConvert an area to a number of square feet.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareYards","title":"Area.squareYards","content":"Area.squareYards \nsquareYards \n\u003Cp\u003EConstruct an area from a number of square yards.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareYards","title":"Area.inSquareYards","content":"Area.inSquareYards \ninSquareYards \n\u003Cp\u003EConvert an area to a number of square yards.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#hectares","title":"Area.hectares","content":"Area.hectares \nhectares \n\u003Cp\u003EConstruct an area from a number of hectares.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inHectares","title":"Area.inHectares","content":"Area.inHectares \ninHectares \n\u003Cp\u003EConvert an area to a number of hectares.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareKilometers","title":"Area.squareKilometers","content":"Area.squareKilometers \nsquareKilometers \n\u003Cp\u003EConstruct an area from a number of square kilometers.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareKilometers","title":"Area.inSquareKilometers","content":"Area.inSquareKilometers \ninSquareKilometers \n\u003Cp\u003EConvert an area to a number of square kilometers.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#acres","title":"Area.acres","content":"Area.acres \nacres \n\u003Cp\u003EConstruct an area from a number of acres.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inAcres","title":"Area.inAcres","content":"Area.inAcres \ninAcres \n\u003Cp\u003EConvert an area to a number of acres.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMiles","title":"Area.squareMiles","content":"Area.squareMiles \nsquareMiles \n\u003Cp\u003EConstruct an area from a number of square miles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#inSquareMiles","title":"Area.inSquareMiles","content":"Area.inSquareMiles \ninSquareMiles \n\u003Cp\u003EConvert an area to a number of square miles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMeter","title":"Area.squareMeter","content":"Area.squareMeter \nsquareMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMillimeter","title":"Area.squareMillimeter","content":"Area.squareMillimeter \nsquareMillimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareCentimeter","title":"Area.squareCentimeter","content":"Area.squareCentimeter \nsquareCentimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#hectare","title":"Area.hectare","content":"Area.hectare \nhectare \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareKilometer","title":"Area.squareKilometer","content":"Area.squareKilometer \nsquareKilometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareInch","title":"Area.squareInch","content":"Area.squareInch \nsquareInch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareFoot","title":"Area.squareFoot","content":"Area.squareFoot \nsquareFoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareYard","title":"Area.squareYard","content":"Area.squareYard \nsquareYard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#acre","title":"Area.acre","content":"Area.acre \nacre \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-areamodule.html#squareMile","title":"Area.squareMile","content":"Area.squareMile \nsquareMile \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html","title":"Capacitance","content":"Capacitance \n \nCapacitance.farads \nfarads \nCapacitance.inFarads \ninFarads \nCapacitance.microfarads \nmicrofarads \nCapacitance.inMicrofarads \ninMicrofarads \nCapacitance.nanofarads \nnanofarads \nCapacitance.inNanofarads \ninNanofarads \nCapacitance.picofarads \npicofarads \nCapacitance.inPicofarads \ninPicofarads"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#farads","title":"Capacitance.farads","content":"Capacitance.farads \nfarads \n\u003Cp\u003EConstruct capacitance from a number of farads.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inFarads","title":"Capacitance.inFarads","content":"Capacitance.inFarads \ninFarads \n\u003Cp\u003EConvert capacitance to a number of farads.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#microfarads","title":"Capacitance.microfarads","content":"Capacitance.microfarads \nmicrofarads \n\u003Cp\u003EConstruct a capacitance from a number of microfarads.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inMicrofarads","title":"Capacitance.inMicrofarads","content":"Capacitance.inMicrofarads \ninMicrofarads \n\u003Cp\u003EConvert a capacitance to a number of microfarads\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#nanofarads","title":"Capacitance.nanofarads","content":"Capacitance.nanofarads \nnanofarads \n\u003Cp\u003EConstruct a capacitance from a number of nanofarads\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inNanofarads","title":"Capacitance.inNanofarads","content":"Capacitance.inNanofarads \ninNanofarads \n\u003Cp\u003EConvert a capacitance to a number of nanofarads\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#picofarads","title":"Capacitance.picofarads","content":"Capacitance.picofarads \npicofarads \n\u003Cp\u003EConstruct capacitance from a number of picofarads.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitancemodule.html#inPicofarads","title":"Capacitance.inPicofarads","content":"Capacitance.inPicofarads \ninPicofarads \n\u003Cp\u003EConvert a capacitance to a number of picofarads.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html","title":"Charge","content":"Charge \n \nCharge.coulombs \ncoulombs \nCharge.inCoulombs \ninCoulombs \nCharge.ampereHours \nampereHours \nCharge.inAmpereHours \ninAmpereHours \nCharge.milliampereHours \nmilliampereHours \nCharge.inMilliampereHours \ninMilliampereHours"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#coulombs","title":"Charge.coulombs","content":"Charge.coulombs \ncoulombs \n\u003Cp\u003EConstruct a charge from a number of coulombs.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#inCoulombs","title":"Charge.inCoulombs","content":"Charge.inCoulombs \ninCoulombs \n\u003Cp\u003EConvert a charge to a number of coulombs.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#ampereHours","title":"Charge.ampereHours","content":"Charge.ampereHours \nampereHours \n\u003Cp\u003EConstruct a charge from a number of ampere hours.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#inAmpereHours","title":"Charge.inAmpereHours","content":"Charge.inAmpereHours \ninAmpereHours \n\u003Cp\u003EConvert a charge to a number of ampere hours.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#milliampereHours","title":"Charge.milliampereHours","content":"Charge.milliampereHours \nmilliampereHours \n\u003Cp\u003EConstruct a charge from a number of milliampere hours.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-chargemodule.html#inMilliampereHours","title":"Charge.inMilliampereHours","content":"Charge.inMilliampereHours \ninMilliampereHours \n\u003Cp\u003EConvert a charge to a number of milliampere hours.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html","title":"Constants","content":"Constants \n\u003Cp\u003EAll conversion factors sourced from [National Institute of Standards and Technology (NIST)][1]\nunless otherwise specified.\n[1]: \u003Ca href=\u0022https://www.nist.gov/pml/weights-and-measures/publications/nist-handbooks/handbook-44\u0022\u003Ehttps://www.nist.gov/pml/weights-and-measures/publications/nist-handbooks/handbook-44\u003C/a\u003E\u003C/p\u003E\n\n \nConstants.meter \nmeter \nConstants.angstrom \nangstrom \nConstants.nanometer \nnanometer \nConstants.micron \nmicron \nConstants.millimeter \nmillimeter \nConstants.centimeter \ncentimeter \nConstants.kilometer \nkilometer \nConstants.inch \ninch \nConstants.foot \nfoot \nConstants.yard \nyard \nConstants.thou \nthou \nConstants.mile \nmile \nConstants.astronomicalUnit \nastronomicalUnit \nConstants.lightYear \nlightYear \nConstants.parsec \nparsec \nConstants.cssPixel \ncssPixel \nConstants.point \npoint \nConstants.pica \npica \nConstants.squareInch \nsquareInch \nConstants.squareFoot \nsquareFoot \nConstants.squareYard \nsquareYard \nConstants.squareMile \nsquareMile \nConstants.acre \nacre \nConstants.cubicMeter \ncubicMeter \nConstants.liter \nliter \nConstants.imperialGallon \nimperialGallon \nConstants.imperialQuart \nimperialQuart \nConstants.imperialPint \nimperialPint \nConstants.imperialFluidOunce \nimperialFluidOunce \nConstants.cubicInch \ncubicInch \nConstants.cubicFoot \ncubicFoot \nConstants.cubicYard \ncubicYard \nConstants.usLiquidGallon \nusLiquidGallon \nConstants.usLiquidQuart \nusLiquidQuart \nConstants.usLiquidPint \nusLiquidPint \nConstants.usFluidOunce \nusFluidOunce \nConstants.bushel \nbushel \nConstants.peck \npeck \nConstants.usDryGallon \nusDryGallon \nConstants.usDryQuart \nusDryQuart \nConstants.usDryPint \nusDryPint \nConstants.kilogram \nkilogram \nConstants.pound \npound \nConstants.longTon \nlongTon \nConstants.shortTon \nshortTon \nConstants.ounce \nounce \nConstants.second \nsecond \nConstants.minute \nminute \nConstants.hour \nhour \nConstants.day \nday \nConstants.week \nweek \nConstants.julianYear \njulianYear \nConstants.mole \nmole \nConstants.gee \ngee \nConstants.newton \nnewton \nConstants.poundForce \npoundForce \nConstants.watt \nwatt \nConstants.electricalHorsepower \nelectricalHorsepower \nConstants.mechanicalHorsepower \nmechanicalHorsepower \nConstants.metricHorsepower \nmetricHorsepower \nConstants.pascal \npascal \nConstants.atmosphere \natmosphere \nConstants.radiansToDegrees \nradiansToDegrees \nConstants.degreesToRadians \ndegreesToRadians"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#meter","title":"Constants.meter","content":"Constants.meter \nmeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#angstrom","title":"Constants.angstrom","content":"Constants.angstrom \nangstrom \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#nanometer","title":"Constants.nanometer","content":"Constants.nanometer \nnanometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#micron","title":"Constants.micron","content":"Constants.micron \nmicron \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#millimeter","title":"Constants.millimeter","content":"Constants.millimeter \nmillimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#centimeter","title":"Constants.centimeter","content":"Constants.centimeter \ncentimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#kilometer","title":"Constants.kilometer","content":"Constants.kilometer \nkilometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#inch","title":"Constants.inch","content":"Constants.inch \ninch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#foot","title":"Constants.foot","content":"Constants.foot \nfoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#yard","title":"Constants.yard","content":"Constants.yard \nyard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#thou","title":"Constants.thou","content":"Constants.thou \nthou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#mile","title":"Constants.mile","content":"Constants.mile \nmile \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#astronomicalUnit","title":"Constants.astronomicalUnit","content":"Constants.astronomicalUnit \nastronomicalUnit \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#lightYear","title":"Constants.lightYear","content":"Constants.lightYear \nlightYear \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#parsec","title":"Constants.parsec","content":"Constants.parsec \nparsec \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cssPixel","title":"Constants.cssPixel","content":"Constants.cssPixel \ncssPixel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#point","title":"Constants.point","content":"Constants.point \npoint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#pica","title":"Constants.pica","content":"Constants.pica \npica \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareInch","title":"Constants.squareInch","content":"Constants.squareInch \nsquareInch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareFoot","title":"Constants.squareFoot","content":"Constants.squareFoot \nsquareFoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareYard","title":"Constants.squareYard","content":"Constants.squareYard \nsquareYard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#squareMile","title":"Constants.squareMile","content":"Constants.squareMile \nsquareMile \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#acre","title":"Constants.acre","content":"Constants.acre \nacre \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicMeter","title":"Constants.cubicMeter","content":"Constants.cubicMeter \ncubicMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#liter","title":"Constants.liter","content":"Constants.liter \nliter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialGallon","title":"Constants.imperialGallon","content":"Constants.imperialGallon \nimperialGallon \n\u003Cp\u003ESourced from [UK Weights and Measures Act][1]. One imperial gallon is equal to\n4.54609 cubic decimeters (formerly defined as the volume of one kilogram\nof pure water under standard conditions, now equal to 1 liter).\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialQuart","title":"Constants.imperialQuart","content":"Constants.imperialQuart \nimperialQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialPint","title":"Constants.imperialPint","content":"Constants.imperialPint \nimperialPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#imperialFluidOunce","title":"Constants.imperialFluidOunce","content":"Constants.imperialFluidOunce \nimperialFluidOunce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicInch","title":"Constants.cubicInch","content":"Constants.cubicInch \ncubicInch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicFoot","title":"Constants.cubicFoot","content":"Constants.cubicFoot \ncubicFoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#cubicYard","title":"Constants.cubicYard","content":"Constants.cubicYard \ncubicYard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usLiquidGallon","title":"Constants.usLiquidGallon","content":"Constants.usLiquidGallon \nusLiquidGallon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usLiquidQuart","title":"Constants.usLiquidQuart","content":"Constants.usLiquidQuart \nusLiquidQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usLiquidPint","title":"Constants.usLiquidPint","content":"Constants.usLiquidPint \nusLiquidPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usFluidOunce","title":"Constants.usFluidOunce","content":"Constants.usFluidOunce \nusFluidOunce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#bushel","title":"Constants.bushel","content":"Constants.bushel \nbushel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#peck","title":"Constants.peck","content":"Constants.peck \npeck \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usDryGallon","title":"Constants.usDryGallon","content":"Constants.usDryGallon \nusDryGallon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usDryQuart","title":"Constants.usDryQuart","content":"Constants.usDryQuart \nusDryQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#usDryPint","title":"Constants.usDryPint","content":"Constants.usDryPint \nusDryPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#kilogram","title":"Constants.kilogram","content":"Constants.kilogram \nkilogram \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#pound","title":"Constants.pound","content":"Constants.pound \npound \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#longTon","title":"Constants.longTon","content":"Constants.longTon \nlongTon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#shortTon","title":"Constants.shortTon","content":"Constants.shortTon \nshortTon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#ounce","title":"Constants.ounce","content":"Constants.ounce \nounce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#second","title":"Constants.second","content":"Constants.second \nsecond \n\u003Cp\u003E---- Units of Duration (in Seconds) ----------------------------------------\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#minute","title":"Constants.minute","content":"Constants.minute \nminute \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#hour","title":"Constants.hour","content":"Constants.hour \nhour \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#day","title":"Constants.day","content":"Constants.day \nday \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#week","title":"Constants.week","content":"Constants.week \nweek \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#julianYear","title":"Constants.julianYear","content":"Constants.julianYear \njulianYear \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#mole","title":"Constants.mole","content":"Constants.mole \nmole \n\u003Cp\u003E---- Units of substance amount (in Moles) ----------------------------------\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#gee","title":"Constants.gee","content":"Constants.gee \ngee \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#newton","title":"Constants.newton","content":"Constants.newton \nnewton \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#poundForce","title":"Constants.poundForce","content":"Constants.poundForce \npoundForce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#watt","title":"Constants.watt","content":"Constants.watt \nwatt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#electricalHorsepower","title":"Constants.electricalHorsepower","content":"Constants.electricalHorsepower \nelectricalHorsepower \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#mechanicalHorsepower","title":"Constants.mechanicalHorsepower","content":"Constants.mechanicalHorsepower \nmechanicalHorsepower \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#metricHorsepower","title":"Constants.metricHorsepower","content":"Constants.metricHorsepower \nmetricHorsepower \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#pascal","title":"Constants.pascal","content":"Constants.pascal \npascal \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#atmosphere","title":"Constants.atmosphere","content":"Constants.atmosphere \natmosphere \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#radiansToDegrees","title":"Constants.radiansToDegrees","content":"Constants.radiansToDegrees \nradiansToDegrees \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-constants.html#degreesToRadians","title":"Constants.degreesToRadians","content":"Constants.degreesToRadians \ndegreesToRadians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html","title":"Current","content":"Current \n \nCurrent.amperes \namperes \nCurrent.inAmperes \ninAmperes \nCurrent.milliamperes \nmilliamperes \nCurrent.inMilliamperes \ninMilliamperes"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#amperes","title":"Current.amperes","content":"Current.amperes \namperes \n\u003Cp\u003EConstruct a current from a number of amperes.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#inAmperes","title":"Current.inAmperes","content":"Current.inAmperes \ninAmperes \n\u003Cp\u003EConvert a current to a number of amperes.\nCharge.coulombs 10\n|\u0026gt; Quantity.per (Duration.seconds 2)\n|\u0026gt; Current.inAmperes\n--\u0026gt; 5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#milliamperes","title":"Current.milliamperes","content":"Current.milliamperes \nmilliamperes \n\u003Cp\u003EConstruct a current from a number of milliamperes.\nCurrent.milliamperes 500\n--\u0026gt; Current.amperes 0.5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-currentmodule.html#inMilliamperes","title":"Current.inMilliamperes","content":"Current.inMilliamperes \ninMilliamperes \n\u003Cp\u003EConvert a current to number of milliamperes.\nCurrent.amperes 2 |\u0026gt; Current.inMilliamperes\n--\u0026gt; 2000\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html","title":"Density","content":"Density \n \nDensity.kilogramsPerCubicMeter \nkilogramsPerCubicMeter \nDensity.inKilogramsPerCubicMeter \ninKilogramsPerCubicMeter \nDensity.gramsPerCubicCentimeter \ngramsPerCubicCentimeter \nDensity.inGramsPerCubicCentimeter \ninGramsPerCubicCentimeter \nDensity.poundsPerCubicInch \npoundsPerCubicInch \nDensity.inPoundsPerCubicInch \ninPoundsPerCubicInch \nDensity.poundsPerCubicFoot \npoundsPerCubicFoot \nDensity.inPoundsPerCubicFoot \ninPoundsPerCubicFoot"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#kilogramsPerCubicMeter","title":"Density.kilogramsPerCubicMeter","content":"Density.kilogramsPerCubicMeter \nkilogramsPerCubicMeter \n\u003Cp\u003EConstruct a density from a number of kilograms per cubic meter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inKilogramsPerCubicMeter","title":"Density.inKilogramsPerCubicMeter","content":"Density.inKilogramsPerCubicMeter \ninKilogramsPerCubicMeter \n\u003Cp\u003EConvert a density to a number of kilograms per cubic meter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#gramsPerCubicCentimeter","title":"Density.gramsPerCubicCentimeter","content":"Density.gramsPerCubicCentimeter \ngramsPerCubicCentimeter \n\u003Cp\u003EConstruct a density from a number of grams per cubic centimeter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inGramsPerCubicCentimeter","title":"Density.inGramsPerCubicCentimeter","content":"Density.inGramsPerCubicCentimeter \ninGramsPerCubicCentimeter \n\u003Cp\u003EConvert a density to a number of grams per cubic centimeter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#poundsPerCubicInch","title":"Density.poundsPerCubicInch","content":"Density.poundsPerCubicInch \npoundsPerCubicInch \n\u003Cp\u003EConstruct a density from a number of pounds per cubic inch.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inPoundsPerCubicInch","title":"Density.inPoundsPerCubicInch","content":"Density.inPoundsPerCubicInch \ninPoundsPerCubicInch \n\u003Cp\u003EConvert a density to a number of pounds per cubic inch.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#poundsPerCubicFoot","title":"Density.poundsPerCubicFoot","content":"Density.poundsPerCubicFoot \npoundsPerCubicFoot \n\u003Cp\u003EConstruct a density from a number of pounds per cubic foot.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-densitymodule.html#inPoundsPerCubicFoot","title":"Density.inPoundsPerCubicFoot","content":"Density.inPoundsPerCubicFoot \ninPoundsPerCubicFoot \n\u003Cp\u003EConvert a density to a number of pounds per cubic foot.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html","title":"Duration","content":"Duration \n \nDuration.seconds \nseconds \nDuration.inSeconds \ninSeconds \nDuration.milliseconds \nmilliseconds \nDuration.inMilliseconds \ninMilliseconds \nDuration.minutes \nminutes \nDuration.inMinutes \ninMinutes \nDuration.hours \nhours \nDuration.inHours \ninHours \nDuration.days \ndays \nDuration.inDays \ninDays \nDuration.weeks \nweeks \nDuration.inWeeks \ninWeeks \nDuration.julianYears \njulianYears \nDuration.inJulianYears \ninJulianYears \nDuration.second \nsecond \nDuration.millisecond \nmillisecond \nDuration.minute \nminute \nDuration.hour \nhour \nDuration.day \nday \nDuration.week \nweek \nDuration.julianYear \njulianYear"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#seconds","title":"Duration.seconds","content":"Duration.seconds \nseconds \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E from a given number of seconds.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inSeconds","title":"Duration.inSeconds","content":"Duration.inSeconds \ninSeconds \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E to a value in seconds.\nDuration.milliseconds 10 |\u0026gt; Duration.inSeconds\n--\u0026gt; 0.01\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#milliseconds","title":"Duration.milliseconds","content":"Duration.milliseconds \nmilliseconds \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E from a given number of milliseconds.\nDuration.milliseconds 5000\n--\u0026gt; Duration.seconds 5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inMilliseconds","title":"Duration.inMilliseconds","content":"Duration.inMilliseconds \ninMilliseconds \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E to a value in milliseconds.\nDuration.seconds 0.5 |\u0026gt; Duration.inMilliseconds\n--\u0026gt; 500\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#minutes","title":"Duration.minutes","content":"Duration.minutes \nminutes \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E from a given number of minutes.\nDuration.minutes 3\n--\u0026gt; Duration.seconds 180\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inMinutes","title":"Duration.inMinutes","content":"Duration.inMinutes \ninMinutes \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E to a value in minutes.\nDuration.seconds 90 |\u0026gt; Duration.inMinutes\n--\u0026gt; 1.5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#hours","title":"Duration.hours","content":"Duration.hours \nhours \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E from a given number of hours.\nDuration.hours 1\n--\u0026gt; Duration.seconds 3600\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inHours","title":"Duration.inHours","content":"Duration.inHours \ninHours \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E to a value in hours.\nDuration.minutes 120 |\u0026gt; Duration.inHours\n--\u0026gt; 2\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#days","title":"Duration.days","content":"Duration.days \ndays \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E from a given number of days. A day is defined as\nexactly 24 hours or 86400 seconds. Therefore, it is only equal to the length of\na given calendar day if that calendar day does not include either a leap second\nor any added/removed daylight savings hours.\nDuration.days 1\n--\u0026gt; Duration.hours 24\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inDays","title":"Duration.inDays","content":"Duration.inDays \ninDays \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E to a value in days.\nDuration.hours 72 |\u0026gt; Duration.inDays\n--\u0026gt; 3\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#weeks","title":"Duration.weeks","content":"Duration.weeks \nweeks \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E from a given number of weeks.\nDuration.weeks 1\n--\u0026gt; Duration.days 7\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inWeeks","title":"Duration.inWeeks","content":"Duration.inWeeks \ninWeeks \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E to a value in weeks.\nDuration.days 28 |\u0026gt; Duration.inWeeks\n--\u0026gt; 4\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#julianYears","title":"Duration.julianYears","content":"Duration.julianYears \njulianYears \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E from a given number of [Julian years][julian_year].\nA Julian year is defined as exactly 365.25 days, the average length of a year in\nthe historical Julian calendar. This is 10 minutes and 48 seconds longer than\na Gregorian year (365.2425 days), which is the average length of a year in the\nmodern Gregorian calendar, but the Julian year is a bit easier to remember and\nreason about and has the virtue of being the \u0027year\u0027 value used in the definition\nof a \u003Ca href=\u0022Length#lightYears\u0022\u003Elight year\u003C/a\u003E.\nDuration.julianYears 1\n--\u0026gt; Duration.days 365.25\n[julian_year]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Julian_year_(astronomy)\u0022\u003Ehttps://en.wikipedia.org/wiki/Julian_year_(astronomy)\u003C/a\u003E \u0022Julian year\u0022\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#inJulianYears","title":"Duration.inJulianYears","content":"Duration.inJulianYears \ninJulianYears \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E to a value in Julian years.\nDuration.hours 10000 |\u0026gt; Duration.inJulianYears\n--\u0026gt; 1.1407711613050422\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#second","title":"Duration.second","content":"Duration.second \nsecond \n\u003Cp\u003Esecond : Duration\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#millisecond","title":"Duration.millisecond","content":"Duration.millisecond \nmillisecond \n\u003Cp\u003Emillisecond : Duration\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#minute","title":"Duration.minute","content":"Duration.minute \nminute \n\u003Cp\u003Eminute : Duration\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#hour","title":"Duration.hour","content":"Duration.hour \nhour \n\u003Cp\u003Ehour : Duration\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#day","title":"Duration.day","content":"Duration.day \nday \n\u003Cp\u003Eday : Duration\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#week","title":"Duration.week","content":"Duration.week \nweek \n\u003Cp\u003Eweek : Duration\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-durationmodule.html#julianYear","title":"Duration.julianYear","content":"Duration.julianYear \njulianYear \n\u003Cp\u003EjulianYear : Duration\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html","title":"Energy","content":"Energy \n \nEnergy.joules \njoules \nEnergy.inJoules \ninJoules \nEnergy.kilojoules \nkilojoules \nEnergy.inKilojoules \ninKilojoules \nEnergy.megajoules \nmegajoules \nEnergy.inMegajoules \ninMegajoules \nEnergy.kilowattHours \nkilowattHours \nEnergy.inKilowattHours \ninKilowattHours"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#joules","title":"Energy.joules","content":"Energy.joules \njoules \n\u003Cp\u003EConstruct an energy value from a number of joules.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inJoules","title":"Energy.inJoules","content":"Energy.inJoules \ninJoules \n\u003Cp\u003EConvert an energy value to a number of joules.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#kilojoules","title":"Energy.kilojoules","content":"Energy.kilojoules \nkilojoules \n\u003Cp\u003EConstruct an energy value from a number of kilojoules.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inKilojoules","title":"Energy.inKilojoules","content":"Energy.inKilojoules \ninKilojoules \n\u003Cp\u003EConvert an energy value to a number of kilojoules.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#megajoules","title":"Energy.megajoules","content":"Energy.megajoules \nmegajoules \n\u003Cp\u003EConstruct an energy value from a number of megajoules.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inMegajoules","title":"Energy.inMegajoules","content":"Energy.inMegajoules \ninMegajoules \n\u003Cp\u003EConvert an energy value to a number of megajoules.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#kilowattHours","title":"Energy.kilowattHours","content":"Energy.kilowattHours \nkilowattHours \n\u003Cp\u003EConstruct an energy value from a number of kilowatt hours.\nEnergy.kilowattHours 1\n--\u0026gt; Energy.megajoules 3.6\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energymodule.html#inKilowattHours","title":"Energy.inKilowattHours","content":"Energy.inKilowattHours \ninKilowattHours \n\u003Cp\u003EConvert an energy value to a number of kilowatt hours.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html","title":"Float","content":"Float \n \nFloat.almostEqual \nalmostEqual \nFloat.roundFloatTo \nroundFloatTo \nFloat.roundFloat \nroundFloat \nFloat.interpolateFrom \ninterpolateFrom"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#almostEqual","title":"Float.almostEqual","content":"Float.almostEqual \nalmostEqual \n\u003Cp\u003ECompare two floating point values for equality. Equality testing is done\nbased on a tolerance vale specified by \u003Ccode\u003EFloat.Epsilon\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#roundFloatTo","title":"Float.roundFloatTo","content":"Float.roundFloatTo \nroundFloatTo \n\u003Cp\u003ERound a floating point number to a specified number of digits.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#roundFloat","title":"Float.roundFloat","content":"Float.roundFloat \nroundFloat \n\u003Cp\u003ERound a floating point number to the number of digits specified by\n\u003Ccode\u003EFloat.DigitPrecision\u003C/code\u003E. By default, this rounds a floating point value\nto 10 digits.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-floatmodule.html#interpolateFrom","title":"Float.interpolateFrom","content":"Float.interpolateFrom \ninterpolateFrom \n\u003Cp\u003EInterpolate from the first value to the second, based on a parameter\nthat ranges from zero to one. Passing a parameter value of zero will\nreturn the start value and passing a parameter value of one will return\nthe end value.\u003C/p\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E3: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E4: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E5: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E6: \u003C/span\u003E\n\u003C/pre\u003E\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip highlighted\u0022\u003E\u003Ccode lang=\u0022fsharp\u0022\u003E\u003Cspan class=\u0022id\u0022\u003EFloat\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EinterpolateFrom\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E0\u003C/span\u003E\n\u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E\n\u003Cspan class=\u0022id\u0022\u003EFloat\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EinterpolateFrom\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E1\u003C/span\u003E\n\u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E\n\u003Cspan class=\u0022id\u0022\u003EFloat\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EinterpolateFrom\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E0.6\u003C/span\u003E\n\u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E8\u003C/span\u003E\n\u003C/code\u003E\u003C/pre\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\u003Cp\u003EThe end value can be less than the start value:\u003C/p\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003C/pre\u003E\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip highlighted\u0022\u003E\u003Ccode lang=\u0022fsharp\u0022\u003E\u003Cspan class=\u0022id\u0022\u003EFloat\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EinterpolateFrom\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E0.1\u003C/span\u003E\n\u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E9.5\u003C/span\u003E\n\u003C/code\u003E\u003C/pre\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\u003Cp\u003EParameter values less than zero or greater than one can be used to\nextrapolate:\u003C/p\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E3: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E4: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E5: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E6: \u003C/span\u003E\n\u003C/pre\u003E\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip highlighted\u0022\u003E\u003Ccode lang=\u0022fsharp\u0022\u003E\u003Cspan class=\u0022id\u0022\u003EFloat\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EinterpolateFrom\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E1.5\u003C/span\u003E\n\u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E12.5\u003C/span\u003E\n\u003Cspan class=\u0022id\u0022\u003EFloat\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EinterpolateFrom\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E \u003Cspan class=\u0022o\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022n\u0022\u003E0.5\u003C/span\u003E\n\u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E2.5\u003C/span\u003E\n\u003Cspan class=\u0022id\u0022\u003EFloat\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EinterpolateFrom\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E5\u003C/span\u003E \u003Cspan class=\u0022o\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022n\u0022\u003E0.2\u003C/span\u003E\n\u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E11\u003C/span\u003E\n\u003C/code\u003E\u003C/pre\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html","title":"Force","content":"Force \n \nForce.newtons \nnewtons \nForce.inNewtons \ninNewtons \nForce.kilonewtons \nkilonewtons \nForce.inKilonewtons \ninKilonewtons \nForce.meganewtons \nmeganewtons \nForce.inMeganewtons \ninMeganewtons \nForce.pounds \npounds \nForce.inPounds \ninPounds \nForce.kips \nkips \nForce.inKips \ninKips"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#newtons","title":"Force.newtons","content":"Force.newtons \nnewtons \n\u003Cp\u003EConstruct a force value from a number of newtons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inNewtons","title":"Force.inNewtons","content":"Force.inNewtons \ninNewtons \n\u003Cp\u003EConvert a force value to a number of newtons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#kilonewtons","title":"Force.kilonewtons","content":"Force.kilonewtons \nkilonewtons \n\u003Cp\u003EConstruct a force value from a number of kilonewtons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inKilonewtons","title":"Force.inKilonewtons","content":"Force.inKilonewtons \ninKilonewtons \n\u003Cp\u003EConvert a force value to a number of kilonewtons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#meganewtons","title":"Force.meganewtons","content":"Force.meganewtons \nmeganewtons \n\u003Cp\u003EConstruct a force value from a number of meganewtons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inMeganewtons","title":"Force.inMeganewtons","content":"Force.inMeganewtons \ninMeganewtons \n\u003Cp\u003EConvert a force value to a number of meganewtons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#pounds","title":"Force.pounds","content":"Force.pounds \npounds \n\u003Cp\u003EConstruct a force value from a number of pounds force. One pound force is\nthe force required to accelerate one [pound mass][1] at a rate of [one gee][2].\n[1]: Mass#pounds\n[2]: Acceleration#gees\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inPounds","title":"Force.inPounds","content":"Force.inPounds \ninPounds \n\u003Cp\u003EConvert a force value to a number of pounds force.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#kips","title":"Force.kips","content":"Force.kips \nkips \n\u003Cp\u003EConstruct a force value from a number of kips (kilopounds force).\nForce.kips 2\n--\u0026gt; Force.pounds 2000\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-forcemodule.html#inKips","title":"Force.inKips","content":"Force.inKips \ninKips \n\u003Cp\u003EConvert a force value to a number of kips.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html","title":"Illuminance","content":"Illuminance \n \nIlluminance.lux \nlux \nIlluminance.inLux \ninLux \nIlluminance.footCandles \nfootCandles \nIlluminance.inFootCandles \ninFootCandles"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#lux","title":"Illuminance.lux","content":"Illuminance.lux \nlux \n\u003Cp\u003EConstruct an illuminance value from a number of lux. One lux is equal to one\nlumen per square meter. See [here][wp-lux-illuminance] for a table of\nilluminance values in lux for common environments.\n[wp-lux-illuminance]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Lux#Illuminance\u0022\u003Ehttps://en.wikipedia.org/wiki/Lux#Illuminance\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#inLux","title":"Illuminance.inLux","content":"Illuminance.inLux \ninLux \n\u003Cp\u003EConvert an illuminance value to a number of lux.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#footCandles","title":"Illuminance.footCandles","content":"Illuminance.footCandles \nfootCandles \n\u003Cp\u003EConstruct an illuminance value from a number of\n[foot-candles][wp-foot-candles]. One foot-candle is equal to one lumen per\nsquare foot.\n[wp-foot-candles]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Foot-candle\u0022\u003Ehttps://en.wikipedia.org/wiki/Foot-candle\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminancemodule.html#inFootCandles","title":"Illuminance.inFootCandles","content":"Illuminance.inFootCandles \ninFootCandles \n\u003Cp\u003EConvert an illuminance value to a number of foot-candles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html","title":"Inductance","content":"Inductance \n \nInductance.henries \nhenries \nInductance.inHenries \ninHenries \nInductance.millihenries \nmillihenries \nInductance.inMillihenries \ninMillihenries \nInductance.microhenries \nmicrohenries \nInductance.inMicrohenries \ninMicrohenries \nInductance.nanohenries \nnanohenries \nInductance.inNanohenries \ninNanohenries \nInductance.kilohenries \nkilohenries \nInductance.inKilohenries \ninKilohenries"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#henries","title":"Inductance.henries","content":"Inductance.henries \nhenries \n\u003Cp\u003EConstruct an inductance from a number of henries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inHenries","title":"Inductance.inHenries","content":"Inductance.inHenries \ninHenries \n\u003Cp\u003EConvert an inductance to a number of henries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#millihenries","title":"Inductance.millihenries","content":"Inductance.millihenries \nmillihenries \n\u003Cp\u003EConstruct an inductance from a number of millihenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inMillihenries","title":"Inductance.inMillihenries","content":"Inductance.inMillihenries \ninMillihenries \n\u003Cp\u003EConvert an inductance to a number of millihenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#microhenries","title":"Inductance.microhenries","content":"Inductance.microhenries \nmicrohenries \n\u003Cp\u003EConstruct an inductance from a number of microhenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inMicrohenries","title":"Inductance.inMicrohenries","content":"Inductance.inMicrohenries \ninMicrohenries \n\u003Cp\u003EConvert an inductance to a number of microhenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#nanohenries","title":"Inductance.nanohenries","content":"Inductance.nanohenries \nnanohenries \n\u003Cp\u003EConstruct an inductance from a number of nanohenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inNanohenries","title":"Inductance.inNanohenries","content":"Inductance.inNanohenries \ninNanohenries \n\u003Cp\u003EConvert an inductance to a number of nanohenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#kilohenries","title":"Inductance.kilohenries","content":"Inductance.kilohenries \nkilohenries \n\u003Cp\u003EConstruct an inductance from a number of kilohenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductancemodule.html#inKilohenries","title":"Inductance.inKilohenries","content":"Inductance.inKilohenries \ninKilohenries \n\u003Cp\u003EConvert an inductance to a number of kilohenries.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html","title":"Interval","content":"Interval \n \nInterval.unit \nunit \nInterval.from \nfrom \nInterval.fromEndpoints \nfromEndpoints \nInterval.singleton \nsingleton \nInterval.endpoints \nendpoints \nInterval.minValue \nminValue \nInterval.maxValue \nmaxValue \nInterval.midpoint \nmidpoint \nInterval.width \nwidth \nInterval.isSingleton \nisSingleton \nInterval.union \nunion \nInterval.intersection \nintersection \nInterval.negate \nnegate \nInterval.plus \nplus \nInterval.minus \nminus \nInterval.difference \ndifference \nInterval.multiplyBy \nmultiplyBy \nInterval.product \nproduct \nInterval.divideBy \ndivideBy \nInterval.half \nhalf \nInterval.twice \ntwice \nInterval.plusInterval \nplusInterval \nInterval.minusInterval \nminusInterval \nInterval.times \ntimes \nInterval.timesUnitless \ntimesUnitless \nInterval.timesInterval \ntimesInterval \nInterval.timesUnitlessInterval \ntimesUnitlessInterval \nInterval.reciprocal \nreciprocal \nInterval.abs \nabs \nInterval.unsafeSquared \nunsafeSquared \nInterval.squared \nsquared \nInterval.squaredUnitless \nsquaredUnitless \nInterval.unsafeCubed \nunsafeCubed \nInterval.cubed \ncubed \nInterval.cubedUnitless \ncubedUnitless \nInterval.cosIncludesMax \ncosIncludesMax \nInterval.cosIncludesMinMax \ncosIncludesMinMax \nInterval.sinIncludesMinMax \nsinIncludesMinMax \nInterval.sin \nsin \nInterval.cos \ncos \nInterval.interpolate \ninterpolate \nInterval.interpolationParameter \ninterpolationParameter \nInterval.contains \ncontains \nInterval.intersects \nintersects \nInterval.isContainedIn \nisContainedIn \nInterval.hull \nhull \nInterval.hull3 \nhull3 \nInterval.hullN \nhullN \nInterval.hullOf \nhullOf \nInterval.hullOfN \nhullOfN \nInterval.aggregate \naggregate \nInterval.aggregate3 \naggregate3 \nInterval.aggregateN \naggregateN \nInterval.aggregateOf \naggregateOf \nInterval.aggregateOfN \naggregateOfN"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#unit","title":"Interval.unit","content":"Interval.unit \nunit \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#from","title":"Interval.from","content":"Interval.from \nfrom \n\u003Cp\u003EConstruct an interval from two given values.\u003C/p\u003E\n\u003Cp\u003EThe values should be given in order, but will be swapped if needed to\nensure a valid interval is created.\u003C/p\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003C/pre\u003E\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip highlighted\u0022\u003E\u003Ccode lang=\u0022fsharp\u0022\u003E\u003Cspan class=\u0022id\u0022\u003EInterval\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003Efrom\u003C/span\u003E \u003Cspan class=\u0022pn\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022n\u0022\u003E3\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E,\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E)\u003C/span\u003E\n\u003Cspan class=\u0022c\u0022\u003E// Interval (2, 3)\u003C/span\u003E\n\u003C/code\u003E\u003C/pre\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#fromEndpoints","title":"Interval.fromEndpoints","content":"Interval.fromEndpoints \nfromEndpoints \n\u003Cp\u003EConstruct an interval from it\u0027s endpoints.\u003C/p\u003E\n\u003Cp\u003EThe values should be given in order, but will be swapped if needed to\nensure a valid interval is created.\u003C/p\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003C/pre\u003E\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip highlighted\u0022\u003E\u003Ccode lang=\u0022fsharp\u0022\u003E\u003Cspan class=\u0022id\u0022\u003EInterval\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EfromEndpoints\u003C/span\u003E \u003Cspan class=\u0022pn\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022n\u0022\u003E3\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E,\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E)\u003C/span\u003E\n\u003Cspan class=\u0022c\u0022\u003E// Interval (2, 3)\u003C/span\u003E\n\u003C/code\u003E\u003C/pre\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#singleton","title":"Interval.singleton","content":"Interval.singleton \nsingleton \n\u003Cp\u003EConstruct a zero width interval containing a single value\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#endpoints","title":"Interval.endpoints","content":"Interval.endpoints \nendpoints \n\u003Cp\u003EGet the endpoints of an interval (its minimum and maximum values) as a\ntuple. The first value will always be less than or equal to the second.\n( minValue, maxValue ) =\nInterval.endpoints someInterval\nFor any interval,\nInterval.endpoints interval\nis equivalent to (but more efficient than)\n( Interval.minValue interval\n, Interval.maxValue interval\n)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#minValue","title":"Interval.minValue","content":"Interval.minValue \nminValue \n\u003Cp\u003EGet the minimum value of an interval.\nInterval.minValue (Interval.from 1 3)\n--\u0026gt; 1\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#maxValue","title":"Interval.maxValue","content":"Interval.maxValue \nmaxValue \n\u003Cp\u003EGet the maximum value of an interval.\nInterval.maxValue (Interval.from 1 3)\n--\u0026gt; 3\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#midpoint","title":"Interval.midpoint","content":"Interval.midpoint \nmidpoint \n\u003Cp\u003EGet the midpoint of an interval.\nInterval.midpoint (Interval.from 1 4)\n--\u0026gt; 2.5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#width","title":"Interval.width","content":"Interval.width \nwidth \n\u003Cp\u003EGet the width of an interval.\nInterval.width (Interval.from 1 5)\n--\u0026gt; 4\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#isSingleton","title":"Interval.isSingleton","content":"Interval.isSingleton \nisSingleton \n\u003Cp\u003ECheck if the interval is a singleton (the minimum and maximum values are the\nsame).\nInterval.isSingleton (Interval.from 2 2)\n--\u0026gt; True\nInterval.isSingleton (Interval.from 2 3)\n--\u0026gt; False\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#union","title":"Interval.union","content":"Interval.union \nunion \n\u003Cp\u003EConstruct an interval containing both of the given intervals.\nfirstInterval =\nInterval.from 1 2\nsecondInterval =\nInterval.from 3 6\nInterval.union firstInterval secondInterval\n--\u0026gt; Interval.from 1 6\n(Note that this is not strictly speaking a \u0027union\u0027 in the precise mathematical\nsense, since the result will contain values that are \u003Cem\u003Ein between\u003C/em\u003E the two given\nintervals and not actually \u003Cem\u003Ein\u003C/em\u003E either of them if those two intervals do not\noverlap.)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#intersection","title":"Interval.intersection","content":"Interval.intersection \nintersection \n\u003Cp\u003EAttempt to construct an interval containing all the values common to both\ngiven intervals. If the intervals do not intersect, returns \u003Ccode\u003ENothing\u003C/code\u003E.\nInterval.intersection\n(Interval.from 1 3)\n(Interval.from 2 5)\n--\u0026gt; Just (Interval.from 2 3)\nInterval.intersection\n(Interval.from 1 3)\n(Interval.from 4 7)\n--\u0026gt; Nothing\nIf the two intervals just touch, a singleton interval will be returned:\nInterval.intersection\n(Interval.from 1 3)\n(Interval.from 3 5)\n--\u0026gt; Just (Interval.singleton 3)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#negate","title":"Interval.negate","content":"Interval.negate \nnegate \n\u003Cp\u003ENegate an interval. Note that this will flip the order of the endpoints.\nInterval.negate (Interval.from 2 3)\n--\u0026gt; Interval.from -3 -2\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#plus","title":"Interval.plus","content":"Interval.plus \nplus \n\u003Cp\u003EAdd the given amount to an interval.\nInterval.from -1 5 |\u0026gt; Interval.add 3\n--\u0026gt; Interval.from 2 8\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#minus","title":"Interval.minus","content":"Interval.minus \nminus \n\u003Cp\u003ESubtract the given amount from an interval.\nInterval.from -1 5 |\u0026gt; Interval.subtract 3\n--\u0026gt; Interval.from -4 2\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#difference","title":"Interval.difference","content":"Interval.difference \ndifference \n\u003Cp\u003ESubtract an interval from the given amount. So if you wanted to compute\n\u003Ccode\u003Einterval - quantity\u003C/code\u003E you would write\ninterval |\u0026gt; Interval.minus quantity\nbut if you wanted to compute \u003Ccode\u003Equantity - interval\u003C/code\u003E then you would write\nInterval.difference quantity interval\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#multiplyBy","title":"Interval.multiplyBy","content":"Interval.multiplyBy \nmultiplyBy \n\u003Cp\u003EMultiply an interval by a given value. Note that this will flip the order\nof the interval\u0027s endpoints if the given value is negative.\nInterval.multiplyBy 5 (Interval.from 2 3)\n--\u0026gt; Interval.from 10 15\nInterval.multiplyBy -2 (Interval.from 2 3)\n--\u0026gt; Interval.from -6 -4\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#product","title":"Interval.product","content":"Interval.product \nproduct \n\u003Cp\u003EMultiply an \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-interval.html\u0022 title=\u0022Interval\u0022\u003E\u003Ccode\u003EInterval\u003C/code\u003E\u003C/a\u003E by a \u003Ccode\u003EQuantity\u003C/code\u003E, for example\nInterval.product quantity interval\nNote that unlike \u003Ca href=\u0022#times\u0022\u003E\u003Ccode\u003Etimes\u003C/code\u003E\u003C/a\u003E, the units of the result will be \u003Ccode\u003EProduct\nquantityUnits intervalUnits\u003C/code\u003E, not \u003Ccode\u003EProduct intervalUnits quantityUnits\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#divideBy","title":"Interval.divideBy","content":"Interval.divideBy \ndivideBy \n\u003Cp\u003EDivide an interval by a given value. Note that this will flip the order\nof the interval\u0027s endpoints if the given value is negative.\nInterval.divideBy 2 (Interval.from 2 3)\n--\u0026gt; Interval.from 1 1.5\nInterval.divideBy -2 (Interval.from 2 3)\n--\u0026gt; Interval.from -1.5 -1\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#half","title":"Interval.half","content":"Interval.half \nhalf \n\u003Cp\u003EShorthand for \u003Ccode\u003EmultiplyBy 0.5\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#twice","title":"Interval.twice","content":"Interval.twice \ntwice \n\u003Cp\u003EShorthand for \u003Ccode\u003EmultiplyBy 2\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#plusInterval","title":"Interval.plusInterval","content":"Interval.plusInterval \nplusInterval \n\u003Cp\u003EAdd two intervals together.\nInterval.from 5 10\n|\u0026gt; Interval.plus (Interval.from 2 3)\n--\u0026gt; Interval.from 7 13\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#minusInterval","title":"Interval.minusInterval","content":"Interval.minusInterval \nminusInterval \n\u003Cp\u003ESubtract the first interval from the second. This means that \u003Ccode\u003Eminus\u003C/code\u003E makes\nthe most sense when using \u003Ccode\u003E|\u0026gt;\u003C/code\u003E:\nInterval.from 5 10\n|\u0026gt; Interval.minus (Interval.from 2 3)\n--\u0026gt; Interval.from 2 8\nWithout the pipe operator, the above would be written as:\nInterval.minus (Interval.from 2 3)\n(Interval.from 5 10)\n--\u0026gt; Interval.from 2 8\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#times","title":"Interval.times","content":"Interval.times \ntimes \n\u003Cp\u003EMultiply an \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-interval.html\u0022 title=\u0022Interval\u0022\u003E\u003Ccode\u003EInterval\u003C/code\u003E\u003C/a\u003E by a \u003Ccode\u003EQuantity\u003C/code\u003E, for example\ninterval |\u0026gt; Interval.times quantity\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#timesUnitless","title":"Interval.timesUnitless","content":"Interval.timesUnitless \ntimesUnitless \n\u003Cp\u003EMultiply an \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-interval.html\u0022 title=\u0022Interval\u0022\u003E\u003Ccode\u003EInterval\u003C/code\u003E\u003C/a\u003E by a unitless \u003Ccode\u003EQuantity\u003C/code\u003E. See the documentation for\n\u003Ca href=\u0022https://package.elm-lang.org/packages/ianmackenzie/elm-units/latest/Quantity#timesUnitless\u0022\u003E\u003Ccode\u003EQuantity.timesUnitless\u003C/code\u003E\u003C/a\u003E\nfor more details.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#timesInterval","title":"Interval.timesInterval","content":"Interval.timesInterval \ntimesInterval \n\u003Cp\u003EMultiply the two given intervals.\nInterval.from 10 12\n|\u0026gt; Interval.times\n(Interval.from 5 6)\n--\u0026gt; Interval.from 50 72\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#timesUnitlessInterval","title":"Interval.timesUnitlessInterval","content":"Interval.timesUnitlessInterval \ntimesUnitlessInterval \n\u003Cp\u003ECombination of \u003Ca href=\u0022#timesInterval\u0022\u003E\u003Ccode\u003EtimesInterval\u003C/code\u003E\u003C/a\u003E and \u003Ca href=\u0022#timesUnitless\u0022\u003E\u003Ccode\u003EtimesUnitless\u003C/code\u003E\u003C/a\u003E\nfor when one of the intervals in a product is unitless.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#reciprocal","title":"Interval.reciprocal","content":"Interval.reciprocal \nreciprocal \n\u003Cp\u003EFind the inverse of a unitless interval:\nInterval.reciprocal \u003C|\nInterval.fromEndpoints\n( Quantity.float 2\n, Quantity.float 3\n)\n--\u003E Interval.fromEndpoints\n--\u0026gt;     ( Quantity.float 0.333\n--\u0026gt;     , Quantity.float 0.500\n--\u0026gt;     )\nAvoid using this function whenever possible, since it\u0027s very easy to get\ninfinite intervals as a result:\nInterval.reciprocal \u003C|\nInterval.fromEndpoints\n( Quantity.float -1\n, Quantity.float 2\n)\n--\u003E Interval.fromEndpoints\n--\u0026gt;     ( Quantity.negativeInfinity\n--\u0026gt;     , Quantity.negativeInfinity\n--\u0026gt;     )\nSince zero is contained in the above interval, the range of possible reciprocals\nranges from negative to positive infinity!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#abs","title":"Interval.abs","content":"Interval.abs \nabs \n\u003Cp\u003EGet the absolute value of an interval.\nInterval.abs \u003C|\nInterval.fromEndpoints\n( Length.meters -3  Length.meters 2 )\n--\u003E Interval.fromEndpoints\n--\u0026gt;     (Length.meters 0) (Length.meters 3)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#unsafeSquared","title":"Interval.unsafeSquared","content":"Interval.unsafeSquared \nunsafeSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#squared","title":"Interval.squared","content":"Interval.squared \nsquared \n\u003Cp\u003EGet the square of an interval.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#squaredUnitless","title":"Interval.squaredUnitless","content":"Interval.squaredUnitless \nsquaredUnitless \n\u003Cp\u003ESpecialized version of \u003Ccode\u003Esquared\u003C/code\u003E for unitless intervals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#unsafeCubed","title":"Interval.unsafeCubed","content":"Interval.unsafeCubed \nunsafeCubed \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#cubed","title":"Interval.cubed","content":"Interval.cubed \ncubed \n\u003Cp\u003EGet the cube of an interval.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#cubedUnitless","title":"Interval.cubedUnitless","content":"Interval.cubedUnitless \ncubedUnitless \n\u003Cp\u003ESpecialized version of \u003Ccode\u003Ecubed\u003C/code\u003E for unitless intervals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#cosIncludesMax","title":"Interval.cosIncludesMax","content":"Interval.cosIncludesMax \ncosIncludesMax \n\u003Cp\u003EThe maximum of cos(x) is x = 2 pi * k for every integer k.\nIf \u003Ccode\u003EminValue\u003C/code\u003E and \u003Ccode\u003EmaxValue\u003C/code\u003E are in different branches\n(meaning different values of k), then the interval must pass through\n2 pi * k, which means the interval must include the maximum value.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#cosIncludesMinMax","title":"Interval.cosIncludesMinMax","content":"Interval.cosIncludesMinMax \ncosIncludesMinMax \n\u003Cp\u003Ecos(x \u002B pi) = -cos(x), therefore if cos(interval \u002B pi) includes the maximum,\nthat means cos(interval) includes the minimum.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#sinIncludesMinMax","title":"Interval.sinIncludesMinMax","content":"Interval.sinIncludesMinMax \nsinIncludesMinMax \n\u003Cp\u003Ecos(x - pi/2) = sin(x), therefore if cos(interval - pi/2) includes\nthe maximum/minimum, that means sin(interval) includes the maximum/minimum\naccordingly.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#sin","title":"Interval.sin","content":"Interval.sin \nsin \n\u003Cp\u003EGet the image of sin(x) applied on the interval.\nInterval.sin (Interval.from 0 (degrees 45))\n--\u0026gt; Interval.from 0 0.7071\nInterval.sin (Interval.from 0 pi)\n--\u0026gt; Interval.from 0 1\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#cos","title":"Interval.cos","content":"Interval.cos \ncos \n\u003Cp\u003EGet the image of cos(x) applied on the interval.\nInterval.cos (Interval.from 0 (degrees 45))\n--\u0026gt; Interval.from 0.7071 1\nInterval.cos (Interval.from 0 pi)\n--\u0026gt; Interval.from -1 1\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#interpolate","title":"Interval.interpolate","content":"Interval.interpolate \ninterpolate \n\u003Cp\u003EInterpolate between an interval\u0027s endpoints based on a parameter value that\nwill generally be between 0.0 and 1.0. A value of 0.0 corresponds to the minimum\nvalue of the interval, a value of 0.5 corresponds to its midpoint and a value of\n1.0 corresponds to its maximum value:\nInterval.interpolate (Interval.from 1 5) 0\n--\u0026gt; 1\nInterval.interpolate (Interval.from 1 5) 0.75\n--\u0026gt; 4\nValues less than 0.0 or greater than 1.0 can be used to extrapolate:\nInterval.interpolate (Interval.from 1 5) 1.5\n--\u0026gt; 7\nNote that because of how \u003Ca href=\u0022#from\u0022\u003E\u003Ccode\u003EInterval.from\u003C/code\u003E\u003C/a\u003E works, the interpolation is in\nfact from the minimum value to the maximum, \u003Cem\u003Enot\u003C/em\u003E \u0022from the first\n\u003Ccode\u003EInterval.from\u003C/code\u003E argument to the second\u0022:\nInterval.interpolate (Interval.from 0 10) 0.2\n--\u0026gt; 2\nInterval.interpolate (Interval.from 10 0) 0.2\n--\u0026gt; 2 -- not 8!\nIf you want the interpolate from one number down to another, you can use\n\u003Ca href=\u0022https://package.elm-lang.org/packages/ianmackenzie/elm-float-extra/latest/Float-Extra#interpolateFrom\u0022\u003E\u003Ccode\u003EFloat.Extra.interpolateFrom\u003C/code\u003E\u003C/a\u003E\nfrom the \u003Ccode\u003Eelm-float-extra\u003C/code\u003E package.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#interpolationParameter","title":"Interval.interpolationParameter","content":"Interval.interpolationParameter \ninterpolationParameter \n\u003Cp\u003EGiven an interval and a given value, determine the corresponding\ninterpolation parameter (the parameter that you would pass to \u003Ca href=\u0022#interpolate\u0022\u003E\u003Ccode\u003Einterpolate\u003C/code\u003E\u003C/a\u003E\nto get the given value):\nInterval.interpolationParameter\n(Interval.from 10 15)\n12\n--\u0026gt; 0.4\nThe result will be between 0 and 1 if (and only if) the given value is within\nthe given interval:\nInterval.interpolationParameter\n(Interval.from 10 15)\n18\n--\u0026gt; 1.6\nInterval.interpolationParameter\n(Interval.from 10 15)\n9\n--\u0026gt; -0.2\nThis is the inverse of \u003Ccode\u003Einterpolate\u003C/code\u003E; for any non-zero-width \u003Ccode\u003Einterval\u003C/code\u003E,\nInterval.interpolationParameter interval value\n|\u0026gt; Interval.interpolate interval\nshould be equal to the original \u003Ccode\u003Evalue\u003C/code\u003E (within numerical round off).\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#contains","title":"Interval.contains","content":"Interval.contains \ncontains \n\u003Cp\u003ETest if a value is contained with a particular interval.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#intersects","title":"Interval.intersects","content":"Interval.intersects \nintersects \n\u003Cp\u003ECheck if two intervals touch or overlap (have any values in common).\nInterval.from -5 5\n|\u0026gt; Interval.intersects (Interval.from 0 10)\n--\u0026gt; True\nInterval.from -5 5\n|\u0026gt; Interval.intersects (Interval.from 10 20)\n--\u0026gt; False\nIntervals that just touch each other are considered to intersect (this is\nconsistent with \u003Ccode\u003Eintersection\u003C/code\u003E which will return a zero-width interval for the\nintersection of two just-touching intervals):\nInterval.from -5 5\n|\u0026gt; Interval.intersects (Interval.from 5 10)\n--\u0026gt; True\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#isContainedIn","title":"Interval.isContainedIn","content":"Interval.isContainedIn \nisContainedIn \n\u003Cp\u003ECheck if the second interval is fully contained in the first.\nInterval.from -5 5\n|\u0026gt; Interval.isContainedIn (Interval.from 0 10)\n--\u0026gt; False\nInterval.from -5 5\n|\u0026gt; Interval.isContainedIn (Interval.from -10 10)\n--\u0026gt; True\nBe careful with the argument order! If not using the \u003Ccode\u003E|\u0026gt;\u003C/code\u003E operator, the second\nexample would be written as:\nInterval.isContainedIn (Interval.from -10 10)\n(Interval.from -5 5)\n--\u0026gt; True\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#hull","title":"Interval.hull","content":"Interval.hull \nhull \n\u003Cp\u003EFind the interval containing one or more input values:\nInterval.hull 5 [ 3, 2, 4 ]\n--\u0026gt; Interval.from 2 5\nSee also \u003Ca href=\u0022#hullN\u0022\u003E\u003Ccode\u003EhullN\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#hull3","title":"Interval.hull3","content":"Interval.hull3 \nhull3 \n\u003Cp\u003EConstruct an interval containing the three given values;\nInterval.hull3 a b c\nis equivalent to\nInterval.hull a [ b, c ]\nbut is more efficient. (If you\u0027re looking for a \u003Ccode\u003Ehull2\u003C/code\u003E function, \u003Ca href=\u0022#from\u0022\u003E\u003Ccode\u003Efrom\u003C/code\u003E\u003C/a\u003E\nshould do what you want.)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#hullN","title":"Interval.hullN","content":"Interval.hullN \nhullN \n\u003Cp\u003EAttempt to construct an interval containing all \u003Cem\u003EN\u003C/em\u003E values in the given\nlist. If the list is empty, returns \u003Ccode\u003ENothing\u003C/code\u003E. If you know you have at least one\nvalue, you can use \u003Ca href=\u0022#hull\u0022\u003E\u003Ccode\u003Ehull\u003C/code\u003E\u003C/a\u003E instead.\nInterval.hullN [ 2, 1, 3 ]\n--\u0026gt; Just (Interval.from 1 3)\nInterval.hullN [ -3 ]\n--\u0026gt; Just (Interval.singleton -3)\nInterval.hullN []\n--\u0026gt; Nothing\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#hullOf","title":"Interval.hullOf","content":"Interval.hullOf \nhullOf \n\u003Cp\u003ELike \u003Ca href=\u0022#hull\u0022\u003E\u003Ccode\u003Ehull\u003C/code\u003E\u003C/a\u003E, but lets you work on any kind of item as long as a\nnumber can be extracted from it. For example, if you had\ntype alias Person =\n{ name : String\n, age : Float\n}\nthen given some people you could find their range of ages as an \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-interval.html\u0022 title=\u0022Interval\u0022\u003E\u003Ccode\u003EInterval\u003C/code\u003E\u003C/a\u003E\nusing\nInterval.hullOf .age\nfirstPerson\n[ secondPerson\n, thirdPerson\n, fourthPerson\n]\nSee also \u003Ca href=\u0022#hullOfN\u0022\u003E\u003Ccode\u003EhullOfN\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#hullOfN","title":"Interval.hullOfN","content":"Interval.hullOfN \nhullOfN \n\u003Cp\u003ECombination of \u003Ca href=\u0022#hullOf\u0022\u003E\u003Ccode\u003EhullOf\u003C/code\u003E\u003C/a\u003E and \u003Ca href=\u0022#hullN\u0022\u003E\u003Ccode\u003EhullN\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#aggregate","title":"Interval.aggregate","content":"Interval.aggregate \naggregate \n\u003Cp\u003EConstruct an interval containing one or more given intervals:\nInterval.aggregate\n(Interval.singleton 2)\n[ Interval.singleton 4\n, Interval.singleton 3\n]\n--\u0026gt; Interval.from 2 4\nWorks much like \u003Ca href=\u0022#hull\u0022\u003E\u003Ccode\u003Ehull\u003C/code\u003E\u003C/a\u003E. See also \u003Ca href=\u0022#aggregateN\u0022\u003E\u003Ccode\u003EaggregateN\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#aggregate3","title":"Interval.aggregate3","content":"Interval.aggregate3 \naggregate3 \n\u003Cp\u003ESpecial case of \u003Ca href=\u0022#aggregate\u0022\u003E\u003Ccode\u003Eaggregate\u003C/code\u003E\u003C/a\u003E for the case of three intervals;\nInterval.aggregate3 first second third\nis equivalent to\nInterval.aggregate first [ second, third ]\nbut is more efficient. (If you\u0027re looking for an \u003Ccode\u003Eaggregate2\u003C/code\u003E function,\n\u003Ca href=\u0022#union\u0022\u003E\u003Ccode\u003Eunion\u003C/code\u003E\u003C/a\u003E should do what you want.)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#aggregateN","title":"Interval.aggregateN","content":"Interval.aggregateN \naggregateN \n\u003Cp\u003EAttempt to construct an interval containing all of the intervals in the given\nlist. If the list is empty, returns \u003Ccode\u003ENothing\u003C/code\u003E. If you know you have at least one\ninterval, you can use \u003Ca href=\u0022#aggregate\u0022\u003E\u003Ccode\u003Eaggregate\u003C/code\u003E\u003C/a\u003E instead.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#aggregateOf","title":"Interval.aggregateOf","content":"Interval.aggregateOf \naggregateOf \n\u003Cp\u003ELike \u003Ca href=\u0022#aggregate\u0022\u003E\u003Ccode\u003Eaggregate\u003C/code\u003E\u003C/a\u003E, but lets you work on any kind of item as\nlong as an interval can be generated from it (similar to \u003Ca href=\u0022#hullOf\u0022\u003E\u003Ccode\u003EhullOf\u003C/code\u003E\u003C/a\u003E).\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval.html#aggregateOfN","title":"Interval.aggregateOfN","content":"Interval.aggregateOfN \naggregateOfN \n\u003Cp\u003ECombination of \u003Ca href=\u0022#aggregateOf\u0022\u003E\u003Ccode\u003EaggregateOf\u003C/code\u003E\u003C/a\u003E and \u003Ca href=\u0022#aggregateN\u0022\u003E\u003Ccode\u003EaggregateN\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html","title":"Length","content":"Length \n \nLength.zero \nzero \nLength.meters \nmeters \nLength.inMeters \ninMeters \nLength.angstroms \nangstroms \nLength.inAngstroms \ninAngstroms \nLength.nanometers \nnanometers \nLength.inNanometers \ninNanometers \nLength.microns \nmicrons \nLength.inMicrons \ninMicrons \nLength.millimeters \nmillimeters \nLength.inMillimeters \ninMillimeters \nLength.centimeters \ncentimeters \nLength.inCentimeters \ninCentimeters \nLength.kilometers \nkilometers \nLength.inKilometers \ninKilometers \nLength.thou \nthou \nLength.inThou \ninThou \nLength.inches \ninches \nLength.inInches \ninInches \nLength.feet \nfeet \nLength.inFeet \ninFeet \nLength.yards \nyards \nLength.inYards \ninYards \nLength.miles \nmiles \nLength.inMiles \ninMiles \nLength.astronomicalUnits \nastronomicalUnits \nLength.inAstronomicalUnits \ninAstronomicalUnits \nLength.parsecs \nparsecs \nLength.inParsecs \ninParsecs \nLength.lightYears \nlightYears \nLength.inLightYears \ninLightYears \nLength.cssPixels \ncssPixels \nLength.inCssPixels \ninCssPixels \nLength.points \npoints \nLength.inPoints \ninPoints \nLength.picas \npicas \nLength.inPicas \ninPicas \nLength.nanometer \nnanometer \nLength.micron \nmicron \nLength.millimeter \nmillimeter \nLength.centimeter \ncentimeter \nLength.kilometer \nkilometer \nLength.oneThou \noneThou \nLength.inch \ninch \nLength.foot \nfoot \nLength.yard \nyard \nLength.mile \nmile \nLength.astronomicalUnit \nastronomicalUnit \nLength.parsec \nparsec \nLength.lightYear \nlightYear \nLength.cssPixel \ncssPixel \nLength.point \npoint \nLength.pica \npica \nLength.apply \napply \nLength.midpoint \nmidpoint"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#zero","title":"Length.zero","content":"Length.zero \nzero \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#meters","title":"Length.meters","content":"Length.meters \nmeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMeters","title":"Length.inMeters","content":"Length.inMeters \ninMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#angstroms","title":"Length.angstroms","content":"Length.angstroms \nangstroms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inAngstroms","title":"Length.inAngstroms","content":"Length.inAngstroms \ninAngstroms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#nanometers","title":"Length.nanometers","content":"Length.nanometers \nnanometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inNanometers","title":"Length.inNanometers","content":"Length.inNanometers \ninNanometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#microns","title":"Length.microns","content":"Length.microns \nmicrons \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMicrons","title":"Length.inMicrons","content":"Length.inMicrons \ninMicrons \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#millimeters","title":"Length.millimeters","content":"Length.millimeters \nmillimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMillimeters","title":"Length.inMillimeters","content":"Length.inMillimeters \ninMillimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#centimeters","title":"Length.centimeters","content":"Length.centimeters \ncentimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inCentimeters","title":"Length.inCentimeters","content":"Length.inCentimeters \ninCentimeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#kilometers","title":"Length.kilometers","content":"Length.kilometers \nkilometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inKilometers","title":"Length.inKilometers","content":"Length.inKilometers \ninKilometers \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#thou","title":"Length.thou","content":"Length.thou \nthou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inThou","title":"Length.inThou","content":"Length.inThou \ninThou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inches","title":"Length.inches","content":"Length.inches \ninches \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inInches","title":"Length.inInches","content":"Length.inInches \ninInches \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#feet","title":"Length.feet","content":"Length.feet \nfeet \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inFeet","title":"Length.inFeet","content":"Length.inFeet \ninFeet \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#yards","title":"Length.yards","content":"Length.yards \nyards \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inYards","title":"Length.inYards","content":"Length.inYards \ninYards \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#miles","title":"Length.miles","content":"Length.miles \nmiles \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inMiles","title":"Length.inMiles","content":"Length.inMiles \ninMiles \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#astronomicalUnits","title":"Length.astronomicalUnits","content":"Length.astronomicalUnits \nastronomicalUnits \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inAstronomicalUnits","title":"Length.inAstronomicalUnits","content":"Length.inAstronomicalUnits \ninAstronomicalUnits \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#parsecs","title":"Length.parsecs","content":"Length.parsecs \nparsecs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inParsecs","title":"Length.inParsecs","content":"Length.inParsecs \ninParsecs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#lightYears","title":"Length.lightYears","content":"Length.lightYears \nlightYears \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inLightYears","title":"Length.inLightYears","content":"Length.inLightYears \ninLightYears \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#cssPixels","title":"Length.cssPixels","content":"Length.cssPixels \ncssPixels \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inCssPixels","title":"Length.inCssPixels","content":"Length.inCssPixels \ninCssPixels \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#points","title":"Length.points","content":"Length.points \npoints \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inPoints","title":"Length.inPoints","content":"Length.inPoints \ninPoints \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#picas","title":"Length.picas","content":"Length.picas \npicas \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inPicas","title":"Length.inPicas","content":"Length.inPicas \ninPicas \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#nanometer","title":"Length.nanometer","content":"Length.nanometer \nnanometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#micron","title":"Length.micron","content":"Length.micron \nmicron \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#millimeter","title":"Length.millimeter","content":"Length.millimeter \nmillimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#centimeter","title":"Length.centimeter","content":"Length.centimeter \ncentimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#kilometer","title":"Length.kilometer","content":"Length.kilometer \nkilometer \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#oneThou","title":"Length.oneThou","content":"Length.oneThou \noneThou \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#inch","title":"Length.inch","content":"Length.inch \ninch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#foot","title":"Length.foot","content":"Length.foot \nfoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#yard","title":"Length.yard","content":"Length.yard \nyard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#mile","title":"Length.mile","content":"Length.mile \nmile \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#astronomicalUnit","title":"Length.astronomicalUnit","content":"Length.astronomicalUnit \nastronomicalUnit \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#parsec","title":"Length.parsec","content":"Length.parsec \nparsec \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#lightYear","title":"Length.lightYear","content":"Length.lightYear \nlightYear \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#cssPixel","title":"Length.cssPixel","content":"Length.cssPixel \ncssPixel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#point","title":"Length.point","content":"Length.point \npoint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#pica","title":"Length.pica","content":"Length.pica \npica \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#apply","title":"Length.apply","content":"Length.apply \napply \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lengthmodule.html#midpoint","title":"Length.midpoint","content":"Length.midpoint \nmidpoint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html","title":"Luminance","content":"Luminance \n \nLuminance.nits \nnits \nLuminance.inNits \ninNits \nLuminance.footLamberts \nfootLamberts \nLuminance.inFootLamberts \ninFootLamberts"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#nits","title":"Luminance.nits","content":"Luminance.nits \nnits \n\u003Cp\u003EConstruct a luminance value from a number of nits. One nit is equal to one\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#inNits","title":"Luminance.inNits","content":"Luminance.inNits \ninNits \n\u003Cp\u003EConvert a luminance value to a number of nits.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#footLamberts","title":"Luminance.footLamberts","content":"Luminance.footLamberts \nfootLamberts \n\u003Cp\u003EConstruct a luminance value from a number of\n[foot-lamberts][wp-foot-lambert].\n[wp-foot-lambert]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Foot-lambert\u0022\u003Ehttps://en.wikipedia.org/wiki/Foot-lambert\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminancemodule.html#inFootLamberts","title":"Luminance.inFootLamberts","content":"Luminance.inFootLamberts \ninFootLamberts \n\u003Cp\u003EConvert a luminance value to a number of foot-lamberts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousfluxmodule.html","title":"LuminousFlux","content":"LuminousFlux \n \nLuminousFlux.lumens \nlumens \nLuminousFlux.inLumens \ninLumens"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousfluxmodule.html#lumens","title":"LuminousFlux.lumens","content":"LuminousFlux.lumens \nlumens \n\u003Cp\u003EConstruct a luminous flux value from a number of lumens. See\nof lumens emitted by some common light sources.\n[wp-luminous-flux-examples]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Luminous_flux#Examples\n[wp-lumen-lighting]:\u0022\u003Ehttps://en.wikipedia.org/wiki/Luminous_flux#Examples\n[wp-lumen-lighting]:\u003C/a\u003E \u003Ca href=\u0022https://en.wikipedia.org/wiki/Lumen_(unit)#Lighting\u0022\u003Ehttps://en.wikipedia.org/wiki/Lumen_(unit)#Lighting\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousfluxmodule.html#inLumens","title":"LuminousFlux.inLumens","content":"LuminousFlux.inLumens \ninLumens \n\u003Cp\u003EConvert a luminous flux value to a number of lumens.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensitymodule.html","title":"LuminousIntensity","content":"LuminousIntensity \n\u003Cp\u003E[Luminous intensity][wp-luminous-intensity] is a measure of the amount of\nlight produced (\u003Ca href=\u0022LuminousFlux\u0022\u003Eluminous flux\u003C/a\u003E) per unit \u003Ca href=\u0022SolidAngle\u0022\u003Esolid\nangle\u003C/a\u003E.\nConsider a light bulb that emits light in all directions and a spotlight that\nonly emits light in a cone. If both lights had the same luminous flux (same\ntotal amount of light produced), then the spotlight would have higher luminous\nintensity since its light is concentrated into a smaller solid angle (and the\nlight from the spotlight would appear brighter if viewed from the same\ndistance).\nOn the other hand, if both lights had the same luminous intensity, then they\nwould appear equally bright when viewed from the same distance (something lit by\nthe spotlight would appear equally bright as the same object lit by the light\nbulb) but the spotlight would have lower luminous flux since its light covers a\nsmaller solid angle.\nLuminous intensity is measured in [candelas][wp-candelas].\n[wp-luminous-intensity]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Luminous_intensity\n[wp-candelas]:\u0022\u003Ehttps://en.wikipedia.org/wiki/Luminous_intensity\n[wp-candelas]:\u003C/a\u003E \u003Ca href=\u0022https://en.wikipedia.org/wiki/Candela\u0022\u003Ehttps://en.wikipedia.org/wiki/Candela\u003C/a\u003E\u003C/p\u003E\n\n \nLuminousIntensity.candelas \ncandelas \nLuminousIntensity.inCandelas \ninCandelas"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensitymodule.html#candelas","title":"LuminousIntensity.candelas","content":"LuminousIntensity.candelas \ncandelas \n\u003Cp\u003EConstruct a luminous intensity value from a number of candelas. One candela\nis roughly equivalent to the luminous intensity of a single wax candle.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensitymodule.html#inCandelas","title":"LuminousIntensity.inCandelas","content":"LuminousIntensity.inCandelas \ninCandelas \n\u003Cp\u003EConvert a luminous intensity to a number of candelas. For example, to\ncompute the luminous intensity of a light bulb with an output of 470 lumens\nwhich emits light equally in all directions:\nLuminousFlux.lumens 470\n|\u0026gt; Quantity.per (SolidAngle.spats 1)\n|\u0026gt; LuminousIntensity.inCandelas\n--\u0026gt; 37.4014\nIf the same amount of light was emitted over a hemisphere instead of a full\nsphere, the luminous intensity would be twice as great:\nLuminousFlux.lumens 470\n|\u0026gt; Quantity.per (SolidAngle.spats 0.5)\n|\u0026gt; LuminousIntensity.inCandelas\n--\u0026gt; 74.8028\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html","title":"Mass","content":"Mass \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-mass.html\u0022 title=\u0022Mass\u0022\u003E\u003Ccode\u003EMass\u003C/code\u003E\u003C/a\u003E represents a mass in kilograms, pounds, metric or imperial tons\netc. It is stored as a number of kilograms.\u003C/p\u003E\n\n \nMass.kilograms \nkilograms \nMass.inKilograms \ninKilograms \nMass.grams \ngrams \nMass.inGrams \ninGrams \nMass.pounds \npounds \nMass.inPounds \ninPounds \nMass.ounces \nounces \nMass.inOunces \ninOunces \nMass.metricTons \nmetricTons \nMass.inMetricTons \ninMetricTons \nMass.shortTons \nshortTons \nMass.inShortTons \ninShortTons \nMass.longTons \nlongTons \nMass.inLongTons \ninLongTons \nMass.kilogram \nkilogram \nMass.gram \ngram \nMass.metricTon \nmetricTon \nMass.pound \npound \nMass.ounce \nounce \nMass.longTon \nlongTon \nMass.shortTon \nshortTon"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#kilograms","title":"Mass.kilograms","content":"Mass.kilograms \nkilograms \n\u003Cp\u003EConstruct a mass from a number of kilograms.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inKilograms","title":"Mass.inKilograms","content":"Mass.inKilograms \ninKilograms \n\u003Cp\u003EConvert a mass to a number of kilograms.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#grams","title":"Mass.grams","content":"Mass.grams \ngrams \n\u003Cp\u003EConstruct a mass from a number of grams.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inGrams","title":"Mass.inGrams","content":"Mass.inGrams \ninGrams \n\u003Cp\u003EConvert a mass to a number of grams.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#pounds","title":"Mass.pounds","content":"Mass.pounds \npounds \n\u003Cp\u003EConstruct a mass from a number of pounds.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inPounds","title":"Mass.inPounds","content":"Mass.inPounds \ninPounds \n\u003Cp\u003EConvert a mass to a number of pounds.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#ounces","title":"Mass.ounces","content":"Mass.ounces \nounces \n\u003Cp\u003EConstruct a mass from a number of ounces.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inOunces","title":"Mass.inOunces","content":"Mass.inOunces \ninOunces \n\u003Cp\u003EConvert a mass to a number of ounces.\nMass.pounds 1 |\u0026gt; Mass.inOunces\n--\u0026gt; 16\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#metricTons","title":"Mass.metricTons","content":"Mass.metricTons \nmetricTons \n\u003Cp\u003EConstruct a mass from a number of [metric tons][1].\nMass.metricTons 1\n--\u0026gt; Mass.kilograms 1000\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Tonne\u0022\u003Ehttps://en.wikipedia.org/wiki/Tonne\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inMetricTons","title":"Mass.inMetricTons","content":"Mass.inMetricTons \ninMetricTons \n\u003Cp\u003EConvert a mass to a number of metric tons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#shortTons","title":"Mass.shortTons","content":"Mass.shortTons \nshortTons \n\u003Cp\u003EConstruct a mass from a number of [short tons][1]. This is the \u0027ton\u0027\ncommonly used in the United States.\nMass.shortTons 1\n--\u0026gt; Mass.pounds 2000\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Short_ton\u0022\u003Ehttps://en.wikipedia.org/wiki/Short_ton\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inShortTons","title":"Mass.inShortTons","content":"Mass.inShortTons \ninShortTons \n\u003Cp\u003EConvert a mass to a number of short tons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#longTons","title":"Mass.longTons","content":"Mass.longTons \nlongTons \n\u003Cp\u003EConstruct a mass from a number of [long tons][1]. This is the \u0027ton\u0027 commonly\nused in the United Kingdom and British Commonwealth.\nMass.longTons 1\n--\u0026gt; Mass.pounds 2240\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Long_ton\u0022\u003Ehttps://en.wikipedia.org/wiki/Long_ton\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#inLongTons","title":"Mass.inLongTons","content":"Mass.inLongTons \ninLongTons \n\u003Cp\u003EConvert a mass to a number of long tons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#kilogram","title":"Mass.kilogram","content":"Mass.kilogram \nkilogram \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#gram","title":"Mass.gram","content":"Mass.gram \ngram \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#metricTon","title":"Mass.metricTon","content":"Mass.metricTon \nmetricTon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#pound","title":"Mass.pound","content":"Mass.pound \npound \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#ounce","title":"Mass.ounce","content":"Mass.ounce \nounce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#longTon","title":"Mass.longTon","content":"Mass.longTon \nlongTon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-massmodule.html#shortTon","title":"Mass.shortTon","content":"Mass.shortTon \nshortTon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html","title":"Molarity","content":"Molarity \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-molarity.html\u0022 title=\u0022Molarity\u0022\u003E\u003Ccode\u003EMolarity\u003C/code\u003E\u003C/a\u003E value represents a concentration of substance in moles per\ncubic meter, moles per liter, millimoles per liter etc. It is stored as a number\nof moles per cubic meter.\nNote that the \u003Ca href=\u0022https://www.nist.gov/pml/special-publication-811/nist-guide-si-chapter-8\u0022\u003ENIST Guide to the\nSI\u003C/a\u003E\nstates that the term \u0022molarity\u0022 is considered obsolete, but it appears to still\nbe in common use and is far less verbose than the alternative NIST suggestion of\n\u0022amount-of-substance concentration\u0022.\nSince the units of \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-molarity.html\u0022 title=\u0022Molarity\u0022\u003E\u003Ccode\u003EMolarity\u003C/code\u003E\u003C/a\u003E are defined to be \u003Ccode\u003ERate Moles CubicMeters\u003C/code\u003E (amount\nof substance per unit volume), you can construct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-molarity.html\u0022 title=\u0022Molarity\u0022\u003E\u003Ccode\u003EMolarity\u003C/code\u003E\u003C/a\u003E value using\n\u003Ccode\u003EQuantity.per\u003C/code\u003E:\nmolarity =\nsubstanceAmount |\u0026gt; Quantity.per volume\nYou can also do rate-related calculations with \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-molarity.html\u0022 title=\u0022Molarity\u0022\u003E\u003Ccode\u003EMolarity\u003C/code\u003E\u003C/a\u003E values to compute\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-substanceamount.html\u0022 title=\u0022SubstanceAmount\u0022\u003E\u003Ccode\u003ESubstanceAmount\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-volume.html\u0022 title=\u0022Volume\u0022\u003E\u003Ccode\u003EVolume\u003C/code\u003E\u003C/a\u003E:\nsubstanceAmount =\nvolume |\u0026gt; Quantity.at molarity\nvolume =\nsubstanceAmount |\u0026gt; Quantity.at_ molarity\u003C/p\u003E\n\n \nMolarity.oneMolePerLiter \noneMolePerLiter \nMolarity.oneDecimolePerLiter \noneDecimolePerLiter \nMolarity.molesPerCubicMeter \nmolesPerCubicMeter \nMolarity.inMolesPerCubicMeter \ninMolesPerCubicMeter \nMolarity.molesPerLiter \nmolesPerLiter \nMolarity.inMolesPerLiter \ninMolesPerLiter \nMolarity.decimolesPerLiter \ndecimolesPerLiter \nMolarity.inDecimolesPerLiter \ninDecimolesPerLiter \nMolarity.centimolesPerLiter \ncentimolesPerLiter \nMolarity.inCentimolesPerLiter \ninCentimolesPerLiter \nMolarity.millimolesPerLiter \nmillimolesPerLiter \nMolarity.inMillimolesPerLiter \ninMillimolesPerLiter \nMolarity.micromolesPerLiter \nmicromolesPerLiter \nMolarity.inMicromolesPerLiter \ninMicromolesPerLiter"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#oneMolePerLiter","title":"Molarity.oneMolePerLiter","content":"Molarity.oneMolePerLiter \noneMolePerLiter \n\u003Cp\u003EOne mole per liter, in moles per cubic meter\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#oneDecimolePerLiter","title":"Molarity.oneDecimolePerLiter","content":"Molarity.oneDecimolePerLiter \noneDecimolePerLiter \n\u003Cp\u003EOne decimole per liter, in moles per cubic meter\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#molesPerCubicMeter","title":"Molarity.molesPerCubicMeter","content":"Molarity.molesPerCubicMeter \nmolesPerCubicMeter \n\u003Cp\u003EConstruct a molarity from a number of moles per cubic meter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMolesPerCubicMeter","title":"Molarity.inMolesPerCubicMeter","content":"Molarity.inMolesPerCubicMeter \ninMolesPerCubicMeter \n\u003Cp\u003EConvert a molarity to a number of moles per cubic meter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#molesPerLiter","title":"Molarity.molesPerLiter","content":"Molarity.molesPerLiter \nmolesPerLiter \n\u003Cp\u003EConstruct a molarity from a number of moles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMolesPerLiter","title":"Molarity.inMolesPerLiter","content":"Molarity.inMolesPerLiter \ninMolesPerLiter \n\u003Cp\u003EConvert a molarity to a number of moles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#decimolesPerLiter","title":"Molarity.decimolesPerLiter","content":"Molarity.decimolesPerLiter \ndecimolesPerLiter \n\u003Cp\u003EConstruct a molarity from a number of decimoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inDecimolesPerLiter","title":"Molarity.inDecimolesPerLiter","content":"Molarity.inDecimolesPerLiter \ninDecimolesPerLiter \n\u003Cp\u003EConvert a molarity to a number of decimoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#centimolesPerLiter","title":"Molarity.centimolesPerLiter","content":"Molarity.centimolesPerLiter \ncentimolesPerLiter \n\u003Cp\u003EConstruct a molarity from a number of centimoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inCentimolesPerLiter","title":"Molarity.inCentimolesPerLiter","content":"Molarity.inCentimolesPerLiter \ninCentimolesPerLiter \n\u003Cp\u003EConvert a molarity to a number of centimoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#millimolesPerLiter","title":"Molarity.millimolesPerLiter","content":"Molarity.millimolesPerLiter \nmillimolesPerLiter \n\u003Cp\u003EConstruct a molarity from a number of millimoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMillimolesPerLiter","title":"Molarity.inMillimolesPerLiter","content":"Molarity.inMillimolesPerLiter \ninMillimolesPerLiter \n\u003Cp\u003EConvert a molarity to a number of millimoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#micromolesPerLiter","title":"Molarity.micromolesPerLiter","content":"Molarity.micromolesPerLiter \nmicromolesPerLiter \n\u003Cp\u003EConstruct a molarity from a number of micromoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molaritymodule.html#inMicromolesPerLiter","title":"Molarity.inMicromolesPerLiter","content":"Molarity.inMicromolesPerLiter \ninMicromolesPerLiter \n\u003Cp\u003EConvert a molarity to a number of micromoles per liter.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html","title":"Pixels","content":"Pixels \n\u003Cp\u003EAlthough most of the focus of \u003Ccode\u003Eelm-units\u003C/code\u003E is on physical/scientific units,\nit\u0027s often useful to be able to safely convert back and forth between (for\nexample) \u003Ca href=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003E values in the real world and on-screen lengths in\npixels.\nThis module provides a standard \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-pixels.html\u0022 title=\u0022Pixels\u0022\u003E\u003Ccode\u003EPixels\u003C/code\u003E\u003C/a\u003E units type and basic functions for\nconstructing/converting values of type \u003Ccode\u003EQuantity Int Pixels\u003C/code\u003E or\n\u003Ccode\u003EQuantity Float Pixels\u003C/code\u003E, which allows you to do things like represent\nconversions between real-world and on-screen lengths as [rates of change][1].\nThis in turn means that all the normal \u003Ca href=\u0022Quantity\u0022\u003E\u003Ccode\u003EQuantity\u003C/code\u003E\u003C/a\u003E functions can be\nused to convert between pixels and other units, or even do type-safe math\ndirectly on pixel values.\n[1]: Quantity#working-with-rates\u003C/p\u003E\n\n \nPixels.float \nfloat \nPixels.toFloat \ntoFloat \nPixels.pixel \npixel \nPixels.pixelsPerSecond \npixelsPerSecond \nPixels.inPixelsPerSecond \ninPixelsPerSecond \nPixels.pixelsPerSecondSquared \npixelsPerSecondSquared \nPixels.inPixelsPerSecondSquared \ninPixelsPerSecondSquared \nPixels.squarePixels \nsquarePixels \nPixels.inSquarePixels \ninSquarePixels"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#float","title":"Pixels.float","content":"Pixels.float \nfloat \n\u003Cp\u003EConstruct a quantity representing a floating-point number of on-screen\npixels:\nlineWeight =\nPixels.float 1.5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#toFloat","title":"Pixels.toFloat","content":"Pixels.toFloat \ntoFloat \n\u003Cp\u003EConvert a floating-point number of pixels back into a plain \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E:\npixelDensity =\nPixels.float 96 |\u0026gt; Quantity.per (Length.inches 1)\nLength.centimeters 1\n|\u0026gt; Quantity.at pixelDensity\n|\u0026gt; Pixels.toFloat\n--\u0026gt; 37.795275590551185\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#pixel","title":"Pixels.pixel","content":"Pixels.pixel \npixel \n\u003Cp\u003EShorthand for \u003Ccode\u003EPixels.float 1.\u003C/code\u003E. Can be convenient to use with\n\u003Ca href=\u0022Quantity#per\u0022\u003E\u003Ccode\u003EQuantity.per\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#pixelsPerSecond","title":"Pixels.pixelsPerSecond","content":"Pixels.pixelsPerSecond \npixelsPerSecond \n\u003Cp\u003EConstruct an on-screen speed from a number of pixels per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#inPixelsPerSecond","title":"Pixels.inPixelsPerSecond","content":"Pixels.inPixelsPerSecond \ninPixelsPerSecond \n\u003Cp\u003EConvert an on-screen speed to a number of pixels per second.\nelapsedTime =\nDuration.milliseconds 16\ndragDistance =\nPixels.float 2\ndragSpeed =\ndragDistance |\u0026gt; Quantity.per elapsedTime\ndragSpeed |\u0026gt; Pixels.inPixelsPerSecond\n--\u0026gt; 125\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#pixelsPerSecondSquared","title":"Pixels.pixelsPerSecondSquared","content":"Pixels.pixelsPerSecondSquared \npixelsPerSecondSquared \n\u003Cp\u003EConstruct an on-screen acceleration from a number of pixels per second\nsquared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#inPixelsPerSecondSquared","title":"Pixels.inPixelsPerSecondSquared","content":"Pixels.inPixelsPerSecondSquared \ninPixelsPerSecondSquared \n\u003Cp\u003EConvert an on-screen acceleration to a number of pixels per second squared.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#squarePixels","title":"Pixels.squarePixels","content":"Pixels.squarePixels \nsquarePixels \n\u003Cp\u003EConstruct an on-screen area from a number of square pixels.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelsmodule.html#inSquarePixels","title":"Pixels.inSquarePixels","content":"Pixels.inSquarePixels \ninSquarePixels \n\u003Cp\u003EConvert an on-screen area to a number of square pixels.\narea =\nPixels.int 1928 |\u0026gt; Quantity.times (Pixels.int 1080)\narea |\u0026gt; Pixels.inSquarePixels\n--\u0026gt; 2073600\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html","title":"Power","content":"Power \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value represents power in watts or horsepower. It is stored as a\nnumber of watts.\nNote that since \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-watts.html\u0022 title=\u0022Watts\u0022\u003E\u003Ccode\u003EWatts\u003C/code\u003E\u003C/a\u003E is defined as \u003Ccode\u003ERate Joules Seconds\u003C/code\u003E (energy per unit\ntime), you can construct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value using \u003Ccode\u003EQuantity.per\u003C/code\u003E:\npower =\nenergy |\u0026gt; Quantity.per duration\nYou can also do rate-related calculations with \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E values to compute\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-energy.html\u0022 title=\u0022Energy\u0022\u003E\u003Ccode\u003EEnergy\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E:\nenergy =\npower |\u0026gt; Quantity.for duration\nalsoEnergy =\nduration |\u0026gt; Quantity.at power\nduration =\nenergy |\u0026gt; Quantity.at_ power\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Horsepower#Definitions\u0022\u003Ehttps://en.wikipedia.org/wiki/Horsepower#Definitions\u003C/a\u003E\u003C/p\u003E\n\n \n\u003Ch2\u003EHorsepower\u003C/h2\u003E\n\u003Cp\u003EWho knew that there were not one, not two, but \u003Cem\u003Ethree\u003C/em\u003E possible interpretations\nof \u0022one horsepower\u0022? (Actually there are more than that, but these three\nseemed the most reasonable.)\u003C/p\u003E\n\n \nPower.watts \nwatts \nPower.inWatts \ninWatts \nPower.kilowatts \nkilowatts \nPower.inKilowatts \ninKilowatts \nPower.megawatts \nmegawatts \nPower.inMegawatts \ninMegawatts \nPower.metricHorsepower \nmetricHorsepower \nPower.inMetricHorsepower \ninMetricHorsepower \nPower.mechanicalHorsepower \nmechanicalHorsepower \nPower.inMechanicalHorsepower \ninMechanicalHorsepower \nPower.electricalHorsepower \nelectricalHorsepower \nPower.inElectricalHorsepower \ninElectricalHorsepower"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#watts","title":"Power.watts","content":"Power.watts \nwatts \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value from a number of watts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inWatts","title":"Power.inWatts","content":"Power.inWatts \ninWatts \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value to a number of watts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#kilowatts","title":"Power.kilowatts","content":"Power.kilowatts \nkilowatts \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value from a number of kilowatts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inKilowatts","title":"Power.inKilowatts","content":"Power.inKilowatts \ninKilowatts \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value to a number of kilowatts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#megawatts","title":"Power.megawatts","content":"Power.megawatts \nmegawatts \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value from a number of megawatts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inMegawatts","title":"Power.inMegawatts","content":"Power.inMegawatts \ninMegawatts \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value to a number of megawatts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#metricHorsepower","title":"Power.metricHorsepower","content":"Power.metricHorsepower \nmetricHorsepower \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value from an number of [metric horsepower][1].\nPower.metricHorsepower 1\n--\u0026gt; Power.watts 735.49875\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Horsepower#Metric_horsepower\u0022\u003Ehttps://en.wikipedia.org/wiki/Horsepower#Metric_horsepower\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inMetricHorsepower","title":"Power.inMetricHorsepower","content":"Power.inMetricHorsepower \ninMetricHorsepower \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value to a number of metric horsepower.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#mechanicalHorsepower","title":"Power.mechanicalHorsepower","content":"Power.mechanicalHorsepower \nmechanicalHorsepower \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value from an number of [mechanical horsepower][1].\nPower.mechanicalHorsepower 1\n--\u0026gt; Power.watts 745.6998715822702\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Horsepower#Mechanical_horsepower\u0022\u003Ehttps://en.wikipedia.org/wiki/Horsepower#Mechanical_horsepower\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inMechanicalHorsepower","title":"Power.inMechanicalHorsepower","content":"Power.inMechanicalHorsepower \ninMechanicalHorsepower \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value to a number of mechanical horsepower.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#electricalHorsepower","title":"Power.electricalHorsepower","content":"Power.electricalHorsepower \nelectricalHorsepower \n\u003Cp\u003EConstruct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value from an number of [electrical horsepower][1].\nPower.electricalHorsepower 1\n--\u0026gt; Power.watts 746\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Horsepower#Electrical_horsepower\u0022\u003Ehttps://en.wikipedia.org/wiki/Horsepower#Electrical_horsepower\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-powermodule.html#inElectricalHorsepower","title":"Power.inElectricalHorsepower","content":"Power.inElectricalHorsepower \ninElectricalHorsepower \n\u003Cp\u003EConvert a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E value to a number of electrical horsepower.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html","title":"Pressure","content":"Pressure \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-pressure.html\u0022 title=\u0022Pressure\u0022\u003E\u003Ccode\u003EPressure\u003C/code\u003E\u003C/a\u003E value represents a pressure in kilopascals, pounds per square\ninch, [atmospheres][1] etc. It is stored as a number of pascals.\nNote that since \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-pascals.html\u0022 title=\u0022Pascals\u0022\u003E\u003Ccode\u003EPascals\u003C/code\u003E\u003C/a\u003E is defined as \u003Ccode\u003ERate Newtons SquareMeters\u003C/code\u003E (force per\nunit area), you can construct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-pressure.html\u0022 title=\u0022Pressure\u0022\u003E\u003Ccode\u003EPressure\u003C/code\u003E\u003C/a\u003E value using \u003Ccode\u003EQuantity.per\u003C/code\u003E:\npressure =\nforce |\u0026gt; Quantity.per area\nYou can also do rate-related calculations with \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-pressure.html\u0022 title=\u0022Pressure\u0022\u003E\u003Ccode\u003EPressure\u003C/code\u003E\u003C/a\u003E values to compute\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-force.html\u0022 title=\u0022Force\u0022\u003E\u003Ccode\u003EForce\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-area.html\u0022 title=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E:\nforce =\narea |\u0026gt; Quantity.at pressure\narea =\nforce |\u0026gt; Quantity.at\u003Cem\u003E pressure\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Atmosphere\u0022\u003Ehttps://en.wikipedia.org/wiki/Atmosphere\u003C/a\u003E\u003C/em\u003E(unit)\u003C/p\u003E\n\n \nPressure.pascals \npascals \nPressure.inPascals \ninPascals \nPressure.kilopascals \nkilopascals \nPressure.inKilopascals \ninKilopascals \nPressure.megapascals \nmegapascals \nPressure.inMegapascals \ninMegapascals \nPressure.poundsPerSquareInch \npoundsPerSquareInch \nPressure.inPoundsPerSquareInch \ninPoundsPerSquareInch \nPressure.atmospheres \natmospheres \nPressure.inAtmospheres \ninAtmospheres"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#pascals","title":"Pressure.pascals","content":"Pressure.pascals \npascals \n\u003Cp\u003EConstruct a pressure from a number of pascals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inPascals","title":"Pressure.inPascals","content":"Pressure.inPascals \ninPascals \n\u003Cp\u003EConvert a pressure to a number of pascals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#kilopascals","title":"Pressure.kilopascals","content":"Pressure.kilopascals \nkilopascals \n\u003Cp\u003EConstruct a pressure from a number of kilopascals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inKilopascals","title":"Pressure.inKilopascals","content":"Pressure.inKilopascals \ninKilopascals \n\u003Cp\u003EConvert a pressure to a number of kilopascals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#megapascals","title":"Pressure.megapascals","content":"Pressure.megapascals \nmegapascals \n\u003Cp\u003EConstruct a pressure from a number of megapascals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inMegapascals","title":"Pressure.inMegapascals","content":"Pressure.inMegapascals \ninMegapascals \n\u003Cp\u003EConvert a pressure to a number of megapascals.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#poundsPerSquareInch","title":"Pressure.poundsPerSquareInch","content":"Pressure.poundsPerSquareInch \npoundsPerSquareInch \n\u003Cp\u003EConstruct a pressure from a number of pounds per square inch.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inPoundsPerSquareInch","title":"Pressure.inPoundsPerSquareInch","content":"Pressure.inPoundsPerSquareInch \ninPoundsPerSquareInch \n\u003Cp\u003EConvert a pressure to a number of pounds per square inch.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#atmospheres","title":"Pressure.atmospheres","content":"Pressure.atmospheres \natmospheres \n\u003Cp\u003EConstruct a pressure from a number of [atmospheres][1].\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Atmosphere_(unit)\u0022\u003Ehttps://en.wikipedia.org/wiki/Atmosphere_(unit)\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressuremodule.html#inAtmospheres","title":"Pressure.inAtmospheres","content":"Pressure.inAtmospheres \ninAtmospheres \n\u003Cp\u003EConvert a pressure to a number of atmospheres.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html","title":"Quantity","content":"Quantity \n \nQuantity.unitless \nunitless \nQuantity.zero \nzero \nQuantity.zero \nzero \nQuantity.positiveInfinity \npositiveInfinity \nQuantity.positiveInfinity \npositiveInfinity \nQuantity.infinity \ninfinity \nQuantity.infinity \ninfinity \nQuantity.negativeInfinity \nnegativeInfinity \nQuantity.negativeInfinity \nnegativeInfinity \nQuantity.create \ncreate \nQuantity.unwrap \nunwrap \nQuantity.lessThan \nlessThan \nQuantity.greaterThan \ngreaterThan \nQuantity.lessThanOrEqualTo \nlessThanOrEqualTo \nQuantity.greaterThanOrEqualTo \ngreaterThanOrEqualTo \nQuantity.lessThanZero \nlessThanZero \nQuantity.greaterThanZero \ngreaterThanZero \nQuantity.lessThanOrEqualToZero \nlessThanOrEqualToZero \nQuantity.greaterThanOrEqualToZero \ngreaterThanOrEqualToZero \nQuantity.compare \ncompare \nQuantity.abs \nabs \nQuantity.equalWithin \nequalWithin \nQuantity.max \nmax \nQuantity.min \nmin \nQuantity.isInfinite \nisInfinite \nQuantity.isNaN \nisNaN \nQuantity.negate \nnegate \nQuantity.plus \nplus \nQuantity.difference \ndifference \nQuantity.minus \nminus \nQuantity.product \nproduct \nQuantity.times \ntimes \nQuantity.timesUnitless \ntimesUnitless \nQuantity.over \nover \nQuantity.over_ \nover_ \nQuantity.overUnitless \noverUnitless \nQuantity.ratio \nratio \nQuantity.multiplyBy \nmultiplyBy \nQuantity.divideBy \ndivideBy \nQuantity.twice \ntwice \nQuantity.half \nhalf \nQuantity.clamp \nclamp \nQuantity.squared \nsquared \nQuantity.squaredUnitless \nsquaredUnitless \nQuantity.sqrtUnitless \nsqrtUnitless \nQuantity.sqrt \nsqrt \nQuantity.cubed \ncubed \nQuantity.cubedUnitless \ncubedUnitless \nQuantity.unsafeCbrt \nunsafeCbrt \nQuantity.cbrt \ncbrt \nQuantity.cbrtUnitless \ncbrtUnitless \nQuantity.reciprocal \nreciprocal \nQuantity.modBy \nmodBy \nQuantity.remainderBy \nremainderBy \nQuantity.interpolateFrom \ninterpolateFrom \nQuantity.midpoint \nmidpoint \nQuantity.range \nrange \nQuantity.in_ \nin_ \nQuantity.roundTo \nroundTo \nQuantity.round \nround \nQuantity.floor \nfloor \nQuantity.ceil \nceil \nQuantity.truncate \ntruncate \nQuantity.sum \nsum \nQuantity.minimum \nminimum \nQuantity.maximum \nmaximum \nQuantity.minimumBy \nminimumBy \nQuantity.maximumBy \nmaximumBy \nQuantity.sort \nsort \nQuantity.sortBy \nsortBy \nQuantity.rate \nrate \nQuantity.per \nper \nQuantity.at \nat \nQuantity.at_ \nat_ \nQuantity.for_ \nfor_ \nQuantity.inverse \ninverse \nQuantity.rateProduct \nrateProduct"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#unitless","title":"Quantity.unitless","content":"Quantity.unitless \nunitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#zero","title":"Quantity.zero","content":"Quantity.zero \nzero \n\u003Cp\u003EA generic zero value. This can be treated as either an \u003Ccode\u003EInt\u003C/code\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E\nquantity in any units type, similar to how \u003Ccode\u003ENothing\u003C/code\u003E can be treated as any kind\nof \u003Ccode\u003EMaybe\u003C/code\u003E type and \u003Ccode\u003E[]\u003C/code\u003E can be treated as any kind of \u003Ccode\u003EList\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#zero","title":"Quantity.zero","content":"Quantity.zero \nzero \n\u003Cp\u003EA generic zero value. This can be treated as either an \u003Ccode\u003EInt\u003C/code\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E\nquantity in any units type, similar to how \u003Ccode\u003ENothing\u003C/code\u003E can be treated as any kind\nof \u003Ccode\u003EMaybe\u003C/code\u003E type and \u003Ccode\u003E[]\u003C/code\u003E can be treated as any kind of \u003Ccode\u003EList\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#positiveInfinity","title":"Quantity.positiveInfinity","content":"Quantity.positiveInfinity \npositiveInfinity \n\u003Cp\u003EA generic positive infinity value.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#positiveInfinity","title":"Quantity.positiveInfinity","content":"Quantity.positiveInfinity \npositiveInfinity \n\u003Cp\u003EA generic positive infinity value.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#infinity","title":"Quantity.infinity","content":"Quantity.infinity \ninfinity \n\u003Cp\u003EAlias for \u003Ccode\u003EpositiveInfinity\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#infinity","title":"Quantity.infinity","content":"Quantity.infinity \ninfinity \n\u003Cp\u003EAlias for \u003Ccode\u003EpositiveInfinity\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#negativeInfinity","title":"Quantity.negativeInfinity","content":"Quantity.negativeInfinity \nnegativeInfinity \n\u003Cp\u003EA generic negative infinity value.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#negativeInfinity","title":"Quantity.negativeInfinity","content":"Quantity.negativeInfinity \nnegativeInfinity \n\u003Cp\u003EA generic negative infinity value.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#create","title":"Quantity.create","content":"Quantity.create \ncreate \n\u003Cp\u003EThis function allows you to create a quantity of any value and type.\nThis should only try to use in library functions.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#unwrap","title":"Quantity.unwrap","content":"Quantity.unwrap \nunwrap \n\u003Cp\u003EThis function provides access to the floating point value represented by\nthe quantity. This should only try to use in library functions.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThan","title":"Quantity.lessThan","content":"Quantity.lessThan \nlessThan \n\u003Cp\u003ECheck if one quantity is less than another. Note the \u003Ca href=\u0022/#argument-order\u0022\u003Eargument order\u003C/a\u003E!\noneMeter =\nLength.meters 1\nLength.feet 1 |\u0026gt; Quantity.lessThan oneMeter\n--\u0026gt; True\n-- Same as:\nQuantity.lessThan oneMeter (Length.feet 1)\n--\u0026gt; True\nList.filter (Quantity.lessThan oneMeter)\n[ Length.feet 1\n, Length.parsecs 1\n, Length.yards 1\n, Length.lightYears 1\n]\n--\u0026gt; [ Length.feet 1, Length.yards 1 ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThan","title":"Quantity.greaterThan","content":"Quantity.greaterThan \ngreaterThan \n\u003Cp\u003ECheck if one quantity is greater than another. Note the \u003Ca href=\u0022/#argument-order\u0022\u003Eargument order\u003C/a\u003E!\noneMeter =\nLength.meters 1\nLength.feet 1 |\u0026gt; Quantity.greaterThan oneMeter\n--\u0026gt; False\n-- Same as:\nQuantity.greaterThan oneMeter (Length.feet 1)\n--\u0026gt; False\nList.filter (Quantity.greaterThan oneMeter)\n[ Length.feet 1\n, Length.parsecs 1\n, Length.yards 1\n, Length.lightYears 1\n]\n--\u0026gt; [ Length.parsecs 1, Length.lightYears 1 ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThanOrEqualTo","title":"Quantity.lessThanOrEqualTo","content":"Quantity.lessThanOrEqualTo \nlessThanOrEqualTo \n\u003Cp\u003ECheck if one quantity is less than or equal to another. Note the \u003Ca href=\u0022/#argument-order\u0022\u003Eargument\norder\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThanOrEqualTo","title":"Quantity.greaterThanOrEqualTo","content":"Quantity.greaterThanOrEqualTo \ngreaterThanOrEqualTo \n\u003Cp\u003ECheck if one quantity is greater than or equal to another. Note the\n\u003Ca href=\u0022/#argument-order\u0022\u003Eargument order\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThanZero","title":"Quantity.lessThanZero","content":"Quantity.lessThanZero \nlessThanZero \n\u003Cp\u003EShort form for \u003Ccode\u003EQuantity.lessThan Quantity.zero\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThanZero","title":"Quantity.greaterThanZero","content":"Quantity.greaterThanZero \ngreaterThanZero \n\u003Cp\u003EShort form for \u003Ccode\u003EQuantity.greaterThan Quantity.zero\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#lessThanOrEqualToZero","title":"Quantity.lessThanOrEqualToZero","content":"Quantity.lessThanOrEqualToZero \nlessThanOrEqualToZero \n\u003Cp\u003EShort form for \u003Ccode\u003EQuantity.lessThanOrEqualTo Quantity.zero\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#greaterThanOrEqualToZero","title":"Quantity.greaterThanOrEqualToZero","content":"Quantity.greaterThanOrEqualToZero \ngreaterThanOrEqualToZero \n\u003Cp\u003EShort form for \u003Ccode\u003EQuantity.greaterThanOrEqualTo Quantity.zero\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#compare","title":"Quantity.compare","content":"Quantity.compare \ncompare \n\u003Cp\u003ECompare two quantities, returning an \u003Ca href=\u0022https://package.elm-lang.org/packages/elm/core/latest/Basics#Order\u0022\u003E\u003Ccode\u003EOrder\u003C/code\u003E\u003C/a\u003E\nvalue indicating whether the first is less than, equal to or greater than the\nsecond.\nQuantity.compare\n(Duration.minutes 90)\n(Duration.hours 1)\n--\u0026gt; GT\nQuantity.compare\n(Duration.minutes 60)\n(Duration.hours 1)\n--\u0026gt; EQ\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#abs","title":"Quantity.abs","content":"Quantity.abs \nabs \n\u003Cp\u003EGet the absolute value of a quantity.\u003C/p\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003C/pre\u003E\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip highlighted\u0022\u003E\u003Ccode lang=\u0022fsharp\u0022\u003E  \u003Cspan class=\u0022id\u0022\u003EQuantity\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003Eabs\u003C/span\u003E \u003Cspan class=\u0022pn\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003EDuration\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003Emilliseconds\u003C/span\u003E \u003Cspan class=\u0022o\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E)\u003C/span\u003E\n  \u003Cspan class=\u0022pn\u0022\u003E--\u0026gt;\u003C/span\u003E \u003Cspan class=\u0022id\u0022\u003EDuration\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003Emilliseconds\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E10\u003C/span\u003E\n\u003C/code\u003E\u003C/pre\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\u003Cp\u003EThis function can be called from the global function or the module function\u003C/p\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E3: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E4: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E5: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E6: \u003C/span\u003E\n\u003C/pre\u003E\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip highlighted\u0022\u003E\u003Ccode lang=\u0022fsharp\u0022\u003E   \u003Cspan class=\u0022c\u0022\u003E// Using the default globally included function\u003C/span\u003E\n   \u003Cspan onmouseout=\u0022hideTip(event, \u0027fs1\u0027, 1)\u0022 onmouseover=\u0022showTip(event, \u0027fs1\u0027, 1)\u0022 class=\u0022id\u0022\u003EMicrosoft\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan onmouseout=\u0022hideTip(event, \u0027fs2\u0027, 2)\u0022 onmouseover=\u0022showTip(event, \u0027fs2\u0027, 2)\u0022 class=\u0022id\u0022\u003EFSharp\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan onmouseout=\u0022hideTip(event, \u0027fs3\u0027, 3)\u0022 onmouseover=\u0022showTip(event, \u0027fs3\u0027, 3)\u0022 class=\u0022id\u0022\u003ECore\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan onmouseout=\u0022hideTip(event, \u0027fs4\u0027, 4)\u0022 onmouseover=\u0022showTip(event, \u0027fs4\u0027, 4)\u0022 class=\u0022id\u0022\u003EOperators\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan onmouseout=\u0022hideTip(event, \u0027fs5\u0027, 5)\u0022 onmouseover=\u0022showTip(event, \u0027fs5\u0027, 5)\u0022 class=\u0022id\u0022\u003Eabs\u003C/span\u003E \u003Cspan class=\u0022id\u0022\u003Equantity\u003C/span\u003E\n   \u003Cspan onmouseout=\u0022hideTip(event, \u0027fs5\u0027, 6)\u0022 onmouseover=\u0022showTip(event, \u0027fs5\u0027, 6)\u0022 class=\u0022id\u0022\u003Eabs\u003C/span\u003E \u003Cspan class=\u0022id\u0022\u003Equantity\u003C/span\u003E  \u003Cspan class=\u0022c\u0022\u003E// This function is included by default in F#\u003C/span\u003E\n\n   \u003Cspan class=\u0022k\u0022\u003Eopen\u003C/span\u003E \u003Cspan onmouseout=\u0022hideTip(event, \u0027fs6\u0027, 7)\u0022 onmouseover=\u0022showTip(event, \u0027fs6\u0027, 7)\u0022 class=\u0022id\u0022\u003EMath\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan onmouseout=\u0022hideTip(event, \u0027fs7\u0027, 8)\u0022 onmouseover=\u0022showTip(event, \u0027fs7\u0027, 8)\u0022 class=\u0022id\u0022\u003EUnits\u003C/span\u003E\n   \u003Cspan class=\u0022id\u0022\u003EUnits\u003C/span\u003E\u003Cspan class=\u0022pn\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022id\u0022\u003Eabs\u003C/span\u003E \u003Cspan class=\u0022id\u0022\u003Equantity\u003C/span\u003E\n\u003C/code\u003E\u003C/pre\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\u003Cdiv class=\u0022fsdocs-tip\u0022 id=\u0022fs1\u0022\u003Enamespace Microsoft\u003C/div\u003E\n\u003Cdiv class=\u0022fsdocs-tip\u0022 id=\u0022fs2\u0022\u003Enamespace Microsoft.FSharp\u003C/div\u003E\n\u003Cdiv class=\u0022fsdocs-tip\u0022 id=\u0022fs3\u0022\u003Enamespace Microsoft.FSharp.Core\u003C/div\u003E\n\u003Cdiv class=\u0022fsdocs-tip\u0022 id=\u0022fs4\u0022\u003Emodule Operators\n\nfrom Microsoft.FSharp.Core\u003Cbr /\u003E\u003Cem\u003E\u0026lt;summary\u0026gt;Basic F# Operators. This module is automatically opened in all F# code.\u0026lt;/summary\u0026gt;\u003Cbr /\u003E\u0026lt;category index=\u0026quot;2\u0026quot;\u0026gt;Basic Operators\u0026lt;/category\u0026gt;\u003C/em\u003E\u003C/div\u003E\n\u003Cdiv class=\u0022fsdocs-tip\u0022 id=\u0022fs5\u0022\u003Eval abs : value:\u0026#39;T -\u0026gt; \u0026#39;T (requires member Abs)\u003Cbr /\u003E\u003Cem\u003E\u0026lt;summary\u0026gt;Absolute value of the given number.\u0026lt;/summary\u0026gt;\u003Cbr /\u003E\u0026lt;param name=\u0026quot;value\u0026quot;\u0026gt;The input value.\u0026lt;/param\u0026gt;\u003Cbr /\u003E\u0026lt;returns\u0026gt;The absolute value of the input.\u0026lt;/returns\u0026gt;\u003C/em\u003E\u003C/div\u003E\n\u003Cdiv class=\u0022fsdocs-tip\u0022 id=\u0022fs6\u0022\u003Enamespace Math\u003C/div\u003E\n\u003Cdiv class=\u0022fsdocs-tip\u0022 id=\u0022fs7\u0022\u003Enamespace Math.Units\u003C/div\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#equalWithin","title":"Quantity.equalWithin","content":"Quantity.equalWithin \nequalWithin \n\u003Cp\u003ECheck if two quantities are equal within a given absolute tolerance. The\ngiven tolerance must be greater than or equal to zero - if it is negative, then\nthe result will always be false.\n-- 3 feet is 91.44 centimeters or 0.9144 meters\nQuantity.equalWithin (Length.centimeters 10)\n(Length.meters 1)\n(Length.feet 3)\n--\u0026gt; True\nQuantity.equalWithin (Length.centimeters 5)\n(Length.meters 1)\n(Length.feet 3)\n--\u0026gt; False\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#max","title":"Quantity.max","content":"Quantity.max \nmax \n\u003Cp\u003EFind the maximum of two quantities.\nQuantity.max (Duration.hours 2) (Duration.minutes 100)\n--\u0026gt; Duration.hours 2\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#min","title":"Quantity.min","content":"Quantity.min \nmin \n\u003Cp\u003EFind the minimum of two quantities.\nQuantity.min (Duration.hours 2) (Duration.minutes 100)\n--\u0026gt; Duration.minutes 100\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#isInfinite","title":"Quantity.isInfinite","content":"Quantity.isInfinite \nisInfinite \n\u003Cp\u003ECheck if a quantity is positive or negative infinity.\nQuantity.isInfinite\n(Length.meters 1\n|\u0026gt; Quantity.per (Duration.seconds 0)\n)\n--\u0026gt; True\nQuantity.isInfinite Quantity.negativeInfinity\n--\u0026gt; True\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#isNaN","title":"Quantity.isNaN","content":"Quantity.isNaN \nisNaN \n\u003Cp\u003ECheck if a quantity\u0027s underlying value is NaN (not-a-number).\nQuantity.isNan (Quantity.sqrt (Area.squareMeters -4))\n--\u0026gt; True\nQuantity.isNan (Quantity.sqrt (Area.squareMeters 4))\n--\u0026gt; False\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#negate","title":"Quantity.negate","content":"Quantity.negate \nnegate \n\u003Cp\u003ENegate a quantity!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#plus","title":"Quantity.plus","content":"Quantity.plus \nplus \n\u003Cp\u003EAdd two quantities.\nLength.meters 1 |\u0026gt; Quantity.plus (Length.centimeters 5)\n--\u0026gt; Length.centimeters 105\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#difference","title":"Quantity.difference","content":"Quantity.difference \ndifference \n\u003Cp\u003ESubtract one quantity from another.\nQuantity.difference\n(Duration.hours 1)\n(Duration.minutes 15)\n--\u0026gt; Duration.minutes 45\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#minus","title":"Quantity.minus","content":"Quantity.minus \nminus \n\u003Cp\u003EAn \u0027infix\u0027 version of \u003Ca href=\u0022#difference\u0022\u003E\u003Ccode\u003Edifference\u003C/code\u003E\u003C/a\u003E, intended to be used in\npipeline form;\nQuantity.difference x y\ncan be written as\nx |\u0026gt; Quantity.minus y\nNote that unlike \u003Ccode\u003Edifference\u003C/code\u003E, this also means that partial application will \u0027do\nthe right thing\u0027:\nList.map (Quantity.minus fifteenMinutes)\n[ Duration.hours 1\n, Duration.hours 2\n, Duration.minutes 30\n]\n--\u0026gt; [ Duration.minutes 45\n--\u0026gt; , Duration.minutes 105\n--\u0026gt; , Duration.minutes 15\n--\u0026gt; ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#product","title":"Quantity.product","content":"Quantity.product \nproduct \n\u003Cp\u003EMultiply two quantities with units types \u003Ccode\u003Eunits1\u003C/code\u003E and \u003Ccode\u003Eunits2\u003C/code\u003E together,\nresulting in a quantity with units type \u003Ccode\u003EProduct units1 units2\u003C/code\u003E.\nThis works for any two units types, but one special case is worth pointing out.\nThe units type of an \u003Ca href=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-squaremeters.html\u0022 title=\u0022SquareMeters\u0022\u003E\u003Ccode\u003ESquareMeters\u003C/code\u003E\u003C/a\u003E, which is a type alias for\n\u003Ccode\u003ESquared Meters\u003C/code\u003E, which in turn expands to \u003Ccode\u003EProduct Meters Meters\u003C/code\u003E. This means\nthat the product of two \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-length.html\u0022 title=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003Es does in fact give you an \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-area.html\u0022 title=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E:\n-- This is the definition of an acre, I kid you not \uD83D\uDE08\nQuantity.product (Length.feet 66) (Length.feet 660)\n--\u0026gt; Area.acres 1\nWe can also multiply an \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-area.html\u0022 title=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E by a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-length.html\u0022 title=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003E to get a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-volume.html\u0022 title=\u0022Volume\u0022\u003E\u003Ccode\u003EVolume\u003C/code\u003E\u003C/a\u003E:\nQuantity.product\n(Area.squareMeters 1)\n(Length.centimeters 1)\n--\u0026gt; Volume.liters 10\nNote that there are \u003Ca href=\u0022/#multiplication-and-division\u0022\u003Eother forms of multiplication\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#times","title":"Quantity.times","content":"Quantity.times \ntimes \n\u003Cp\u003EAn \u0027infix\u0027 version of \u003Ca href=\u0022#product\u0022\u003E\u003Ccode\u003Eproduct\u003C/code\u003E\u003C/a\u003E, intended to be used in pipeline\nform;\nQuantity.product a b\ncan be written as\na |\u0026gt; Quantity.times b\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#timesUnitless","title":"Quantity.timesUnitless","content":"Quantity.timesUnitless \ntimesUnitless \n\u003Cp\u003EIf you use \u003Ca href=\u0022#times\u0022\u003E\u003Ccode\u003Etimes\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022#product\u0022\u003E\u003Ccode\u003Eproduct\u003C/code\u003E\u003C/a\u003E to multiply one\nquantity by another \u003Ca href=\u0022#Unitless\u0022\u003Eunitless\u003C/a\u003E quantity, for example\nquantity |\u0026gt; Quantity.times unitlessQuantity\nthen the result you\u0027ll get will have units type \u003Ccode\u003EProduct units Unitless\u003C/code\u003E. But\nthis is silly and not super useful, since the product of \u003Ccode\u003Eunits\u003C/code\u003E and \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-unitless.html\u0022 title=\u0022Unitless\u0022\u003E\u003Ccode\u003EUnitless\u003C/code\u003E\u003C/a\u003E\nshould really just be \u003Ccode\u003Eunits\u003C/code\u003E. That\u0027s what \u003Ccode\u003EtimesUnitless\u003C/code\u003E does - it\u0027s a special\ncase of \u003Ccode\u003Etimes\u003C/code\u003E for when you\u0027re multiplying by another unitless quantity, that\nleaves the units alone.\nYou can think of \u003Ccode\u003EtimesUnitless\u003C/code\u003E as shorthand for \u003Ccode\u003EtoFloat\u003C/code\u003E and \u003Ccode\u003EmultiplyBy\u003C/code\u003E;\nfor \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E-valued quantities,\nquantity |\u0026gt; Quantity.timesUnitless unitlessQuantity\nis equivalent to\nquantity\n|\u0026gt; Quantity.multiplyBy\n(Quantity.toFloat unitlessQuantity)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#over","title":"Quantity.over","content":"Quantity.over \nover \n\u003Cp\u003EDivide a quantity in \u003Ccode\u003EProduct units1 units2\u003C/code\u003E by a quantity in \u003Ccode\u003Eunits1\u003C/code\u003E,\nresulting in another quantity in \u003Ccode\u003Eunits2\u003C/code\u003E. For example, the units type of a\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-force.html\u0022 title=\u0022Force\u0022\u003E\u003Ccode\u003EForce\u003C/code\u003E\u003C/a\u003E is \u003Ccode\u003EProduct Kilograms MetersPerSecondSquared\u003C/code\u003E (mass times acceleration),\nso we could divide a force by a given mass to determine how fast that mass would\nbe accelerated by the given force:\nForce.newtons 100\n|\u0026gt; Quantity.over\n(Mass.kilograms 50)\n--\u0026gt; Acceleration.metersPerSecondSquared 2\nNote that there are \u003Ca href=\u0022/#multiplication-and-division\u0022\u003Eother forms of division\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#over_","title":"Quantity.over_","content":"Quantity.over_ \nover_ \n\u003Cp\u003EJust like \u003Ccode\u003Eover\u003C/code\u003E but divide by a quantity in \u003Ccode\u003Eunits2\u003C/code\u003E, resulting in another\nquantity in \u003Ccode\u003Eunits1\u003C/code\u003E. For example, we could divide a force by a desired\nacceleration to determine how much mass could be accelerated at that rate:\nForce.newtons 100\n|\u0026gt; Quantity.over_\n(Acceleration.metersPerSecondSquared 5)\n--\u0026gt; Mass.kilograms 20\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#overUnitless","title":"Quantity.overUnitless","content":"Quantity.overUnitless \noverUnitless \n\u003Cp\u003ESimilar to \u003Ca href=\u0022#timesUnitless\u0022\u003E\u003Ccode\u003EtimesUnitless\u003C/code\u003E\u003C/a\u003E, \u003Ccode\u003EoverUnitless\u003C/code\u003E lets you\ndivide one quantity by a second \u003Ca href=\u0022#Unitless\u0022\u003Eunitless\u003C/a\u003E quantity without affecting\nthe units;\nquantity |\u0026gt; Quantity.overUnitless unitlessQuantity\nis equivalent to\nquantity\n|\u0026gt; Quantity.divideBy\n(Quantity.toFloat unitlessQuantity)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#ratio","title":"Quantity.ratio","content":"Quantity.ratio \nratio \n\u003Cp\u003EFind the ratio of two quantities with the same units.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#multiplyBy","title":"Quantity.multiplyBy","content":"Quantity.multiplyBy \nmultiplyBy \n\u003Cp\u003EScale a \u003Ccode\u003EQuantity\u003C/code\u003E by a \u003Ccode\u003Enumber\u003C/code\u003E.\nQuantity.multiplyBy 1.5 (Duration.hours 1)\n--\u0026gt; Duration.minutes 90\nNote that there are \u003Ca href=\u0022/#multiplication-and-division\u0022\u003Eother forms of multiplication\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#divideBy","title":"Quantity.divideBy","content":"Quantity.divideBy \ndivideBy \n\u003Cp\u003EDivide a \u003Ccode\u003EQuantity\u003C/code\u003E by a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E.\nQuantity.divideBy 2 (Duration.hours 1)\n--\u0026gt; Duration.minutes 30\nNote that there are \u003Ca href=\u0022/#multiplication-and-division\u0022\u003Eother forms of division\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#twice","title":"Quantity.twice","content":"Quantity.twice \ntwice \n\u003Cp\u003EConvenient shorthand for \u003Ccode\u003EQuantity.multiplyBy 2\u003C/code\u003E.\nQuantity.twice (Duration.minutes 30)\n--\u0026gt; Duration.hours 1\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#half","title":"Quantity.half","content":"Quantity.half \nhalf \n\u003Cp\u003EConvenient shorthand for \u003Ccode\u003EQuantity.multiplyBy 0.5\u003C/code\u003E.\nQuantity.half (Length.meters 1)\n--\u0026gt; Length.centimeters 50\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#clamp","title":"Quantity.clamp","content":"Quantity.clamp \nclamp \n\u003Cp\u003EGiven a lower and upper bound, clamp a given quantity to within those\nbounds. Say you wanted to clamp an angle to be between \u002B/-30 degrees:\nlowerBound =\nAngle.degrees -30\nupperBound =\nAngle.degrees 30\nQuantity.clamp lowerBound upperBound (Angle.degrees 5)\n--\u0026gt; Angle.degrees 5\n-- One radian is approximately 57 degrees\nQuantity.clamp lowerBound upperBound (Angle.radians 1)\n--\u0026gt; Angle.degrees 30\nQuantity.clamp lowerBound upperBound (Angle.turns -0.5)\n--\u0026gt; Angle.degrees -30\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#squared","title":"Quantity.squared","content":"Quantity.squared \nsquared \n\u003Cp\u003ESquare a quantity with some \u003Ccode\u003Eunits\u003C/code\u003E, resulting in a new quantity in\n\u003Ccode\u003ESquared units\u003C/code\u003E:\nQuantity.squared (Length.meters 5)\n--\u0026gt; Area.squareMeters 25\nSee also \u003Ca href=\u0022#squaredUnitless\u0022\u003E\u003Ccode\u003EsquaredUnitless\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#squaredUnitless","title":"Quantity.squaredUnitless","content":"Quantity.squaredUnitless \nsquaredUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sqrtUnitless","title":"Quantity.sqrtUnitless","content":"Quantity.sqrtUnitless \nsqrtUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sqrt","title":"Quantity.sqrt","content":"Quantity.sqrt \nsqrt \n\u003Cp\u003ETake a quantity in \u003Ccode\u003ESquared units\u003C/code\u003E and return the square root of that\nquantity in plain \u003Ccode\u003Eunits\u003C/code\u003E:\nQuantity.sqrt (Area.hectares 1)\n--\u0026gt; Length.meters 100\nGetting fancier, you could write a 2D hypotenuse (magnitude) function that\nworked on \u003Cem\u003Eany\u003C/em\u003E quantity type (length, speed, force...) as\nhypotenuse :\nQuantity Float units\n-\u0026gt; Quantity Float units\n-\u0026gt; Quantity Float units\nhypotenuse x y =\nQuantity.sqrt\n(Quantity.squared x\n|\u0026gt; Quantity.plus\n(Quantity.squared y)\n)\nThis works because:\n- The \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ey\u003C/code\u003E arguments are both in \u003Ccode\u003Eunits\u003C/code\u003E\n- So each squared item is in \u003Ccode\u003ESquared units\u003C/code\u003E\n- So the sum is also in \u003Ccode\u003ESquared units\u003C/code\u003E\n- And calling \u003Ccode\u003Esqrt\u003C/code\u003E on something in \u003Ccode\u003ESquared units\u003C/code\u003E returns a value back in\n\u003Ccode\u003Eunits\u003C/code\u003E\nSee also \u003Ca href=\u0022#sqrtUnitless\u0022\u003E\u003Ccode\u003EsqrtUnitless\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cubed","title":"Quantity.cubed","content":"Quantity.cubed \ncubed \n\u003Cp\u003ECube a quantity with some \u003Ccode\u003Eunits\u003C/code\u003E, resulting in a new quantity in\n\u003Ccode\u003ECubed units\u003C/code\u003E.\nQuantity.cubed (Length.meters 5)\n--\u0026gt; Volume.cubicMeters 125\nSee also \u003Ca href=\u0022#cubedUnitless\u0022\u003E\u003Ccode\u003EcubedUnitless\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cubedUnitless","title":"Quantity.cubedUnitless","content":"Quantity.cubedUnitless \ncubedUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#unsafeCbrt","title":"Quantity.unsafeCbrt","content":"Quantity.unsafeCbrt \nunsafeCbrt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cbrt","title":"Quantity.cbrt","content":"Quantity.cbrt \ncbrt \n\u003Cp\u003ETake a quantity in \u003Ccode\u003ECubed units\u003C/code\u003E and return the cube root of that\nquantity in plain \u003Ccode\u003Eunits\u003C/code\u003E.\nQuantity.cbrt (Volume.liters 1)\n--\u0026gt; Length.centimeters 10\nSee also \u003Ca href=\u0022#cbrtUnitless\u0022\u003E\u003Ccode\u003EcbrtUnitless\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#cbrtUnitless","title":"Quantity.cbrtUnitless","content":"Quantity.cbrtUnitless \ncbrtUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#reciprocal","title":"Quantity.reciprocal","content":"Quantity.reciprocal \nreciprocal \n\u003Cp\u003EFind the inverse of a unitless quantity.\nQuantity.reciprocal (Quantity.float 5)\n--\u0026gt; Quantity.float 0.2\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#modBy","title":"Quantity.modBy","content":"Quantity.modBy \nmodBy \n\u003Cp\u003EReturns the remainder of the modulus operation.\nNote: This returns negative results for remainders on negative numbers.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#remainderBy","title":"Quantity.remainderBy","content":"Quantity.remainderBy \nremainderBy \n\u003Cp\u003EReturns the remainder of the modulus operation.\nNote: This returns positive results for remainders on negative numbers.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#interpolateFrom","title":"Quantity.interpolateFrom","content":"Quantity.interpolateFrom \ninterpolateFrom \n\u003Cp\u003EInterpolate from the first quantity to the second, based on a parameter that\nranges from zero to one. Passing a parameter quantity of zero will return the start\nquantity and passing a parameter quantity of one will return the end quantity.\nfiveMeters =\nLength.meters 5\ntenMeters =\nLength.meters 10\nQuantity.interpolateFrom fiveMeters tenMeters 0\n--\u0026gt; Length.meters 5\nQuantity.interpolateFrom fiveMeters tenMeters 1\n--\u0026gt; Length.meters 10\nQuantity.interpolateFrom fiveMeters tenMeters 0.6\n--\u0026gt; Length.meters 8\nThe end quantity can be less than the start quantity:\nQuantity.interpolateFrom tenMeters fiveMeters 0.1\n--\u0026gt; Length.meters 9.5\nParameter quantitys less than zero or greater than one can be used to extrapolate:\nQuantity.interpolateFrom fiveMeters tenMeters 1.5\n--\u0026gt; Length.meters 12.5\nQuantity.interpolateFrom fiveMeters tenMeters -0.5\n--\u0026gt; Length.meters 2.5\nQuantity.interpolateFrom tenMeters fiveMeters -0.2\n--\u0026gt; Length.meters 11\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#midpoint","title":"Quantity.midpoint","content":"Quantity.midpoint \nmidpoint \n\u003Cp\u003EFind the midpoint between two quantities.\nQuantity.midpoint (Length.meters 5) (Length.meters 10)\n--\u0026gt; Length.meters 7.5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#range","title":"Quantity.range","content":"Quantity.range \nrange \n\u003Cp\u003EConstruct a range of evenly-spaced quantitys given a \u003Ccode\u003Estart\u003C/code\u003E quantity, an \u003Ccode\u003Eend\u003C/code\u003E\nquantity and the number of \u003Ccode\u003Esteps\u003C/code\u003E to take from the start to the end. The first\nquantity in the returned list will be equal to \u003Ccode\u003Estart\u003C/code\u003E and the last quantity will be\nequal to \u003Ccode\u003Eend\u003C/code\u003E. Note that the number of returned quantitys will be one greater than\nthe number of steps!\nQuantity.range\n{ start = Length.meters 2\n, end = Length.meters 3\n, steps = 5\n}\n--\u0026gt; [ Length.centimeters 200\n--\u0026gt; , Length.centimeters 220\n--\u0026gt; , Length.centimeters 240\n--\u0026gt; , Length.centimeters 260\n--\u0026gt; , Length.centimeters 280\n--\u0026gt; , Length.centimeters 300\n--\u0026gt; ]\nThe start and end quantitys can be in either order:\nQuantity.range\n{ start = Duration.hours 1\n, end = Quantity.zero\n, steps = 4\n}\n--\u0026gt; [ Duration.minutes 60\n--\u0026gt; , Duration.minutes 45\n--\u0026gt; , Duration.minutes 30\n--\u0026gt; , Duration.minutes 15\n--\u0026gt; , Duration.minutes 0\n--\u0026gt; ]\nPassing a negative or zero \u003Ccode\u003Esteps\u003C/code\u003E quantity will result in an empty list being\nreturned.\nIf you need finer control over what quantitys get generated, try combining\n\u003Ccode\u003EinterpolateFrom\u003C/code\u003E with the various functions in the\n\u003Ca href=\u0022https://package.elm-lang.org/packages/ianmackenzie/elm-1d-parameter/latest/\u0022\u003E\u003Ccode\u003Eelm-1d-parameter\u003C/code\u003E\u003C/a\u003E\npackage. For example:\n-- Same as using Quantity.range\nParameter1d.steps 4 \u003C|\nQuantity.interpolateFrom\n(Length.meters 2)\n(Length.meters 3)\n--\u003E [ Length.centimeters 200\n--\u0026gt; , Length.centimeters 225\n--\u0026gt; , Length.centimeters 250\n--\u0026gt; , Length.centimeters 275\n--\u0026gt; , Length.centimeters 300\n--\u0026gt; ]\n-- Omit the last quantity\nParameter1d.leading 4 \u003C|\nQuantity.interpolateFrom\n(Length.meters 2)\n(Length.meters 3)\n--\u003E [ Length.centimeters 200\n--\u0026gt; , Length.centimeters 225\n--\u0026gt; , Length.centimeters 250\n--\u0026gt; , Length.centimeters 275\n--\u0026gt; ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#in_","title":"Quantity.in_","content":"Quantity.in_ \nin_ \n\u003Cp\u003EGeneralized units conversion function that lets you convert to many kinds of\nunits not directly supported by \u003Ccode\u003Eelm-units\u003C/code\u003E. The first argument is a function\nthat constructs a quantity of the desired unit type, and the second is the quantity\nto convert. For example,\nSpeed.metersPerSecond 5\n|\u0026gt; Speed.inFeetPerSecond\n--\u0026gt; 16.4042\nis equivalent to\nSpeed.metersPerSecond 5\n|\u0026gt; Quantity.in\u003Cem\u003E Speed.feetPerSecond\n--\u0026gt; 16.4042\nMore interestingly, if you wanted to get speed in some weirder unit like\nmillimeters per minute (not directly supported by \u003Ccode\u003Eelm-units\u003C/code\u003E), you could do\nSpeed.metersPerSecond 5\n|\u0026gt; Quantity.in\u003C/em\u003E\n(Length.millimeters\n\u0026gt;\u0026gt; Quantity.per (Duration.minutes 1)\n)\n--\u0026gt; 300000\nInternally,\nQuantity.in_ someUnits someQuantity\nis simply implemented as\nQuantity.ratio some(someUnits 1)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#roundTo","title":"Quantity.roundTo","content":"Quantity.roundTo \nroundTo \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#round","title":"Quantity.round","content":"Quantity.round \nround \n\u003Cp\u003ERound a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E-valued quantity to the nearest \u003Ccode\u003EInt\u003C/code\u003E. Note that \u003Ca href=\u0022#-int-float-conversion\u0022\u003Ethis may\nnot do what you expect\u003C/a\u003E.\nQuantity.round (Pixels.pixels 3.5)\n--\u0026gt; Pixels.pixels 4\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#floor","title":"Quantity.floor","content":"Quantity.floor \nfloor \n\u003Cp\u003ERound a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E-valued quantity down to the nearest \u003Ccode\u003EInt\u003C/code\u003E. Note that \u003Ca href=\u0022#-int-float-conversion\u0022\u003Ethis\nmay not do what you expect\u003C/a\u003E.\nQuantity.floor (Pixels.pixels 2.9)\n--\u0026gt; Pixels.pixels 2\nQuantity.floor (Pixels.pixels -2.1)\n--\u0026gt; Pixels.pixels -3\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#ceil","title":"Quantity.ceil","content":"Quantity.ceil \nceil \n\u003Cp\u003ERound a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E-valued quantity up to the nearest \u003Ccode\u003EInt\u003C/code\u003E. Note that \u003Ca href=\u0022#-int-float-conversion\u0022\u003Ethis may\nnot do what you expect\u003C/a\u003E.\nQuantity.ceiling (Pixels.pixels 1.2)\n--\u0026gt; Pixels.pixels 2\nQuantity.ceiling (Pixels.pixels -2.1)\n--\u0026gt; Pixels.pixels -2\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#truncate","title":"Quantity.truncate","content":"Quantity.truncate \ntruncate \n\u003Cp\u003ERound a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E-valued quantity towards zero. Note that \u003Ca href=\u0022#-int-float-conversion\u0022\u003Ethis may not do\nwhat you expect\u003C/a\u003E.\nQuantity.truncate (Pixels.pixels -2.8)\n--\u0026gt; Pixels.pixels -2\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sum","title":"Quantity.sum","content":"Quantity.sum \nsum \n\u003Cp\u003EFind the sum of a list of quantities.\nQuantity.sum\n[ Length.meters 1\n, Length.centimeters 2\n, Length.millimeters 3\n]\n--\u0026gt; Length.meters 1.023\nQuantity.sum []\n--\u0026gt; Quantity.zero\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#minimum","title":"Quantity.minimum","content":"Quantity.minimum \nminimum \n\u003Cp\u003EFind the minimum quantity in a list of quantities. Returns \u003Ccode\u003ENothing\u003C/code\u003E if the\nlist is empty.\nQuantity.minimum\n[ Mass.kilograms 1\n, Mass.pounds 2\n, Mass.tonnes 3\n]\n--\u0026gt; Just (Mass.pounds 2)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#maximum","title":"Quantity.maximum","content":"Quantity.maximum \nmaximum \n\u003Cp\u003EFind the maximum quantity in a list of quantities. Returns \u003Ccode\u003ENothing\u003C/code\u003E if the\nlist is empty.\nQuantity.maximum\n[ Mass.kilograms 1\n, Mass.pounds 2\n, Mass.tonnes 3\n]\n--\u0026gt; Just (Mass.tonnes 3)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#minimumBy","title":"Quantity.minimumBy","content":"Quantity.minimumBy \nminimumBy \n\u003Cp\u003EFind the \u0027minimum\u0027 item in a list as measured by some derived \u003Ccode\u003EQuantity\u003C/code\u003E:\npeople =\n[ { name = \u0022Bob\u0022, height = Length.meters 1.6 }\n, { name = \u0022Charlie\u0022, height = Length.meters 2.0 }\n, { name = \u0022Alice\u0022, height = Length.meters 1.8 }\n]\nQuantity.minimumBy .height people\n--\u0026gt; Just { name = \u0022Bob\u0022, height = Length.meters 1.6 }\nIf the list is empty, returns \u003Ccode\u003ENothing\u003C/code\u003E. If multiple items in the list are tied,\nthen the first one is returned.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#maximumBy","title":"Quantity.maximumBy","content":"Quantity.maximumBy \nmaximumBy \n\u003Cp\u003EFind the \u0027maximum\u0027 item in a list as measured by some derived \u003Ccode\u003EQuantity\u003C/code\u003E:\npeople =\n[ { name = \u0022Bob\u0022, height = Length.meters 1.6 }\n, { name = \u0022Charlie\u0022, height = Length.meters 2.0 }\n, { name = \u0022Alice\u0022, height = Length.meters 1.8 }\n]\nQuantity.maximumBy .height people\n--\u0026gt; Just { name = \u0022Charlie\u0022, height = Length.meters 2.0 }\nIf the list is empty, returns \u003Ccode\u003ENothing\u003C/code\u003E. If multiple items in the list are tied,\nthen the first one is returned.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sort","title":"Quantity.sort","content":"Quantity.sort \nsort \n\u003Cp\u003ESort a list of quantities.\nQuantity.sort\n[ Mass.kilograms 1\n, Mass.pounds 2\n, Mass.tonnes 3\n]\n--\u0026gt; [ Mass.pounds 2\n--\u0026gt; , Mass.kilograms 1\n--\u0026gt; , Mass.tonnes 3\n--\u0026gt; ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#sortBy","title":"Quantity.sortBy","content":"Quantity.sortBy \nsortBy \n\u003Cp\u003ESort an arbitrary list of quantitys by a derived \u003Ccode\u003EQuantity\u003C/code\u003E. If you had\npeople =\n[ { name = \u0022Bob\u0022, height = Length.meters 1.6 }\n, { name = \u0022Charlie\u0022, height = Length.meters 2.0 }\n, { name = \u0022Alice\u0022, height = Length.meters 1.8 }\n]\nthen you could sort by name with\nList.sortBy .name people\n--\u0026gt; [ { name = \u0022Alice\u0022, height = Length.meters 1.8 }\n--\u0026gt; , { name = \u0022Bob\u0022, height = Length.meters 1.6 }\n--\u0026gt; , { name = \u0022Charlie\u0022, height = Length.meters 2.0 }\n--\u0026gt; ]\n(nothing new there!), and sort by height with\nQuantity.sortBy .height people\n--\u0026gt; [ { name = \u0022Bob\u0022, height = Length.meters 1.6 }\n--\u0026gt; , { name = \u0022Alice\u0022, height = Length.meters 1.8 }\n--\u0026gt; , { name = \u0022Charlie\u0022, height = Length.meters 2.0 }\n--\u0026gt; ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#rate","title":"Quantity.rate","content":"Quantity.rate \nrate \n\u003Cp\u003EConstruct a rate of change by dividing a dependent quantity (numerator) by\nan independent quantity (denominator):\nspeed =\nQuantity.rate (Length.miles 1) Duration.minute\nspeed |\u0026gt; Speed.inMilesPerHour\n--\u0026gt; 60\nNote that we could directly use our rate of change quantity as a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-speed.html\u0022 title=\u0022Speed\u0022\u003E\u003Ccode\u003ESpeed\u003C/code\u003E\u003C/a\u003E! That is\nbecause many built-in quantity types are defined as rates of change, for\nexample:\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-speed.html\u0022 title=\u0022Speed\u0022\u003E\u003Ccode\u003ESpeed\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-length.html\u0022 title=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003E per \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-acceleration.html\u0022 title=\u0022Acceleration\u0022\u003E\u003Ccode\u003EAcceleration\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-speed.html\u0022 title=\u0022Speed\u0022\u003E\u003Ccode\u003ESpeed\u003C/code\u003E\u003C/a\u003E per \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-pressure.html\u0022 title=\u0022Pressure\u0022\u003E\u003Ccode\u003EPressure\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-force.html\u0022 title=\u0022Force\u0022\u003E\u003Ccode\u003EForce\u003C/code\u003E\u003C/a\u003E per \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-area.html\u0022 title=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-energy.html\u0022 title=\u0022Energy\u0022\u003E\u003Ccode\u003EEnergy\u003C/code\u003E\u003C/a\u003E per \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-current.html\u0022 title=\u0022Current\u0022\u003E\u003Ccode\u003ECurrent\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-charge.html\u0022 title=\u0022Charge\u0022\u003E\u003Ccode\u003ECharge\u003C/code\u003E\u003C/a\u003E per \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-resistance.html\u0022 title=\u0022Resistance\u0022\u003E\u003Ccode\u003EResistance\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-voltage.html\u0022 title=\u0022Voltage\u0022\u003E\u003Ccode\u003EVoltage\u003C/code\u003E\u003C/a\u003E per \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-current.html\u0022 title=\u0022Current\u0022\u003E\u003Ccode\u003ECurrent\u003C/code\u003E\u003C/a\u003E\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-voltage.html\u0022 title=\u0022Voltage\u0022\u003E\u003Ccode\u003EVoltage\u003C/code\u003E\u003C/a\u003E is \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E per \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-current.html\u0022 title=\u0022Current\u0022\u003E\u003Ccode\u003ECurrent\u003C/code\u003E\u003C/a\u003E\nNote that there are \u003Ca href=\u0022/#multiplication-and-division\u0022\u003Eother forms of division\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#per","title":"Quantity.per","content":"Quantity.per \nper \n\u003Cp\u003E\u0027Infix\u0027 version of \u003Ca href=\u0022#rate\u0022\u003E\u003Ccode\u003Erate\u003C/code\u003E\u003C/a\u003E, meant to be used in pipeline form;\nQuantity.rate distance time\ncan be written as\ndistance |\u0026gt; Quantity.per time\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#at","title":"Quantity.at","content":"Quantity.at \nat \n\u003Cp\u003EMultiply a rate of change by an independent quantity (the denominator in\nthe rate) to get a total quantity:\nDuration.minutes 30\n|\u0026gt; Quantity.at\n(Speed.kilometersPerHour 100)\n--\u0026gt; Length.kilometers 50\nCan be useful to define conversion functions from one unit to another, since\nif you define a \u003Ccode\u003Erate\u003C/code\u003E then \u003Ccode\u003EQuantity.at rate\u003C/code\u003E will give you a conversion\nfunction:\npixelDensity : Float (Rate Pixels Meters)\npixelDensity =\nPixels.pixels 96 |\u0026gt; Quantity.per (Length.inches 1)\nlengthToPixels : Length -\u0026gt; Float Pixels\nlengthToPixels length =\nQuantity.at pixelDensity length\nlengthToPixels (Length.inches 3)\n--\u0026gt; Pixels.pixels 288\nEagle-eyed readers will note that using partial application you could also\nsimply write\nlengthToPixels =\nQuantity.at pixelDensity\nNote that there are \u003Ca href=\u0022/#multiplication-and-division\u0022\u003Eother forms of multiplication\u003C/a\u003E!\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#at_","title":"Quantity.at_","content":"Quantity.at_ \nat_ \n\u003Cp\u003EGiven a rate and a \u003Cem\u003Edependent\u003C/em\u003E quantity (total quantity), determine the\nnecessary amount of the \u003Cem\u003Eindependent\u003C/em\u003E quantity:\nLength.kilometers 75\n|\u0026gt; Quantity.at\u003Cem\u003E\n(Speed.kilometersPerHour 100)\n--\u0026gt; Duration.minutes 45\nWhere \u003Ccode\u003Eat\u003C/code\u003E performs multiplication, \u0060at\u003C/em\u003E\u003Ccode\u003Eperforms division - you multiply a\nspeed by a duration to get a distance, but you divide a distance by a speed to\nget a duration.\nSimilar to\u003C/code\u003Eat\u003Ccode\u003E,\u003C/code\u003Eat\u003Cem\u003E\u0060 can be used to define an \u003C/em\u003Einverse\u003Cem\u003E conversion function:\npixelDensity : Float (Rate Pixels Meters)\npixelDensity =\nPixels.pixels 96 |\u0026gt; Quantity.per (Length.inches 1)\npixelsToLength : Float Pixels -\u0026gt; Length\npixelsToLength pixels =\nQuantity.at\u003C/em\u003E pixelDensity pixels\npixelsToLength (Pixels.pixels 48)\n--\u0026gt; Length.inches 0.5\nFloat (Rate dependentUnits independentUnits)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#for_","title":"Quantity.for_","content":"Quantity.for_ \nfor_ \n\u003Cp\u003ESame as \u003Ccode\u003Eat\u003C/code\u003E but with the argument order flipped, which may read better\nin some cases:\nSpeed.kilometersPerHour 100\n|\u0026gt; Quantity.for\n(Duration.minutes 30)\n--\u0026gt; Length.kilometers 50\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#inverse","title":"Quantity.inverse","content":"Quantity.inverse \ninverse \n\u003Cp\u003EFind the inverse of a given rate. May be useful if you are using a rate to\ndefine a conversion, and want to convert the other way;\nQuantity.at (Quantity.inverse rate)\nis equivalent to\nQuantity.at_ rate\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantitymodule.html#rateProduct","title":"Quantity.rateProduct","content":"Quantity.rateProduct \nrateProduct \n\u003Cp\u003EMultiply two rates of change that \u0027cancel out\u0027 together, resulting in a new\nrate. For example, if you know the real-world speed of an on-screen object and\nthe display resolution, then you can get the speed in pixels per second:\nrealWorldSpeed =\nSpeed.metersPerSecond 0.1\nresolution =\nPixels.float 96 |\u0026gt; Quantity.per Length.inch\nQuantity.rateProduct realWorldSpeed resolution\n--\u0026gt; Pixels.pixelsPerSecond 377.95\nThat is, \u0022length per duration\u0022 multiplied by \u0022pixels per length\u0022 gives you\n\u0022pixels per duration\u0022.\nSometimes you can\u0027t directly multiply two rates to get what you want, in which\ncase you may need to use \u003Ca href=\u0022#inverse\u0022\u003E\u003Ccode\u003Einverse\u003C/code\u003E\u003C/a\u003E in combination with\n\u003Ccode\u003ErateProduct\u003C/code\u003E. For example, if you know the on-screen speed of some object and\nthe display resolution, then you can use those to get the real-world speed:\npixelSpeed =\nPixels.pixelsPerSecond 500\nresolution =\nPixels.float 96 |\u0026gt; Quantity.per Length.inch\nQuantity.rateProduct pixelSpeed\n(Quantity.inverse resolution).Value\n--\u0026gt; Speed.metersPerSecond 0.1323\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistancemodule.html","title":"Resistance","content":"Resistance \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-resistance.html\u0022 title=\u0022Resistance\u0022\u003E\u003Ccode\u003EResistance\u003C/code\u003E\u003C/a\u003E value represents an electrical resistance in ohms.\nNote that since \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-ohms.html\u0022 title=\u0022Ohms\u0022\u003E\u003Ccode\u003EOhms\u003C/code\u003E\u003C/a\u003E is defined as \u003Ccode\u003ERate Volts Amperes\u003C/code\u003E (voltage per unit\ncurrent), you can construct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-resistance.html\u0022 title=\u0022Resistance\u0022\u003E\u003Ccode\u003EResistance\u003C/code\u003E\u003C/a\u003E value using \u003Ccode\u003EQuantity.per\u003C/code\u003E:\nresistance =\nvoltage |\u0026gt; Quantity.per current\nYou can also do rate-related calculations with \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-resistance.html\u0022 title=\u0022Resistance\u0022\u003E\u003Ccode\u003EResistance\u003C/code\u003E\u003C/a\u003E values to compute\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-voltage.html\u0022 title=\u0022Voltage\u0022\u003E\u003Ccode\u003EVoltage\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-current.html\u0022 title=\u0022Current\u0022\u003E\u003Ccode\u003ECurrent\u003C/code\u003E\u003C/a\u003E:\nvoltage =\ncurrent |\u0026gt; Quantity.at resistance\ncurrent =\nvoltage |\u0026gt; Quantity.at_ resistance\u003C/p\u003E\n\n \nResistance.ohms \nohms \nResistance.inOhms \ninOhms"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistancemodule.html#ohms","title":"Resistance.ohms","content":"Resistance.ohms \nohms \n\u003Cp\u003EConstruct a resistance from a number of ohms.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistancemodule.html#inOhms","title":"Resistance.inOhms","content":"Resistance.inOhms \ninOhms \n\u003Cp\u003EConvert a resistance to a number of ohms.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html","title":"SolidAngle","content":"SolidAngle \n\u003Cp\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/Solid_angle\u0022\u003ESolid angle\u003C/a\u003E is a tricky concept\nto explain, but roughly speaking solid angle is for 3D what angle is for 2D. It\ncan be used to measure three-dimensional field of view and is stored in\n2D angle can be thought of as how much circumference of the unit circle is\ncovered. The unit circle (circle of radius 1) has a circumference of 2\u03C0, and an\nangle in radians corresponds to the corresponding amount of circumference\ncovered. So an angle of 2\u03C0 radians covers the entire circumference of the\ncircle, \u03C0 radians covers half the circle, \u03C0/2 radians covers a quarter, etc.\nSimilarly, 3D solid angle can be thought of as how much surface area of the unit\nsphere is covered. The unit sphere has surface area of 4\u03C0, and a solid angle in\nsteradians corresponds to the corresponding amount of surface area covered. So a\nsolid angle of 4\u03C0 steradians covers the entire sphere, 2\u03C0 steradians covers half\nthe sphere (one hemisphere), etc.\u003C/p\u003E\n\n \nSolidAngle.steradians \nsteradians \nSolidAngle.inSteradians \ninSteradians \nSolidAngle.spats \nspats \nSolidAngle.inSpats \ninSpats \nSolidAngle.squareDegrees \nsquareDegrees \nSolidAngle.inSquareDegrees \ninSquareDegrees \nSolidAngle.conical \nconical \nSolidAngle.pyramidal \npyramidal"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#steradians","title":"SolidAngle.steradians","content":"SolidAngle.steradians \nsteradians \n\u003Cp\u003EConstruct a solid angle from a number of steradians.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#inSteradians","title":"SolidAngle.inSteradians","content":"SolidAngle.inSteradians \ninSteradians \n\u003Cp\u003EConvert a solid angle to a number of steradians.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#spats","title":"SolidAngle.spats","content":"SolidAngle.spats \nspats \n\u003Cp\u003EConstruct a solid angle from a number of [spats][1]. One spat is the 3D\nequivalent of one full turn; in the same way that one turn is the angle that\ncovers an entire circle, one spat is the solid angle that covers an entire\nsphere. It\u0027s rare to have solid angles more than one spat, since solid angles\nare usually used to measure what angular fraction of a full sphere something\ncovers.\nSolidAngle.spats 1\n--\u0026gt; SolidAngle.steradians (4 * pi)\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Spat_(unit)\u0022\u003Ehttps://en.wikipedia.org/wiki/Spat_(unit)\u003C/a\u003E\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#inSpats","title":"SolidAngle.inSpats","content":"SolidAngle.inSpats \ninSpats \n\u003Cp\u003EConvert a solid angle to a number of spats.\nSolidAngle.steradians (2 * pi) |\u0026gt; SolidAngle.inSpats\n--\u0026gt; 0.5\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#squareDegrees","title":"SolidAngle.squareDegrees","content":"SolidAngle.squareDegrees \nsquareDegrees \n\u003Cp\u003EConstruct a solid angle from a number of \u003Ca href=\u0022https://en.wikipedia.org/wiki/Square_degree\u0022\u003Esquare\ndegrees\u003C/a\u003E. One square degree is,\nroughly speaking, the solid angle of a square on the surface of a sphere where\nthe square is one degree wide and one degree tall as viewed from the center of\nthe sphere.\nSolidAngle.squareDegrees 100\n-\u0026gt; SolidAngle.steradians 0.03046\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#inSquareDegrees","title":"SolidAngle.inSquareDegrees","content":"SolidAngle.inSquareDegrees \ninSquareDegrees \n\u003Cp\u003EConvert a solid angle to a number of square degrees.\nSolidAngle.spats 1 |\u0026gt; SolidAngle.inSquareDegrees\n--\u0026gt; 41252.96125\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#conical","title":"SolidAngle.conical","content":"SolidAngle.conical \nconical \n\u003Cp\u003EFind the solid angle of a cone with a given tip angle (the angle between two\nopposite sides of the cone, \u003Cem\u003Enot\u003C/em\u003E the half-angle from the axis of the cone to\nits side). A 1 degree cone has a solid angle of approximately \u03C0/4 square\ndegrees, similar to how a circle of diameter 1 has an area of \u03C0/4:\nSolidAngle.conical (Angle.degrees 1)\n|\u0026gt; SolidAngle.inSquareDegrees\n--\u0026gt; 0.78539318\npi / 4\n--\u0026gt; 0.78539816\nA cone with a tip angle of 180 degrees is just a hemisphere:\nSolidAngle.conical (Angle.degrees 180)\n--\u0026gt; SolidAngle.spats 0.5\n\u0022Inside out\u0022 cones are also supported, up to 360 degrees (a full sphere):\nSolidAngle.conical (Angle.degrees 270)\n--\u0026gt; SolidAngle.spats 0.85355\nSolidAngle.conical (Angle.degrees 360)\n--\u0026gt; SolidAngle.spats 1\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidanglemodule.html#pyramidal","title":"SolidAngle.pyramidal","content":"SolidAngle.pyramidal \npyramidal \n\u003Cp\u003EFind the solid angle of a rectangular pyramid given the angles between the\ntwo pairs of sides. A 1 degree by 1 degree pyramid has a solid angle of almost\nexactly 1 square degree:\nSolidAngle.pyramidal\n(Angle.degrees 1)\n(Angle.degrees 1)\n--\u0026gt; SolidAngle.squareDegrees 0.9999746\nIn general, the solid angle of a pyramid that is \u003Cem\u003En\u003C/em\u003E degrees wide by \u003Cem\u003Em\u003C/em\u003E degrees\ntall is (for relatively small values of \u003Cem\u003En\u003C/em\u003E and \u003Cem\u003Em\u003C/em\u003E) approximately \u003Cem\u003Enm\u003C/em\u003E square\ndegrees:\nSolidAngle.pyramidal\n(Angle.degrees 10)\n(Angle.degrees 10)\n--\u0026gt; SolidAngle.squareDegrees 99.7474\nSolidAngle.pyramidal\n(Angle.degrees 60)\n(Angle.degrees 30)\n--\u0026gt; SolidAngle.squareDegrees 1704.08\nA pyramid that is 180 degrees by 180 degrees covers an entire hemisphere:\nSolidAngle.pyramidal\n(Angle.degrees 180)\n(Angle.degrees 180)\n--\u0026gt; SolidAngle.spats 0.5\n\u0022Inside out\u0022 pyramids greater than 180 degrees are not supported and will be\ntreated as the corresponding \u0022normal\u0022 pyramid (an angle of 240 degrees will be\ntreated as 120 degrees, an angle of 330 degrees will be treated as 30 degrees,\netc.).\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html","title":"Speed","content":"Speed \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-speed.html\u0022 title=\u0022Speed\u0022\u003E\u003Ccode\u003ESpeed\u003C/code\u003E\u003C/a\u003E value represents a speed in meters per second, miles per hour etc.\nIt is stored as a number of meters per second.\nNote that since \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-meterspersecond.html\u0022 title=\u0022MetersPerSecond\u0022\u003E\u003Ccode\u003EMetersPerSecond\u003C/code\u003E\u003C/a\u003E is defined as \u003Ccode\u003ERate Meters Seconds\u003C/code\u003E (length\nper unit time), you can construct a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-speed.html\u0022 title=\u0022Speed\u0022\u003E\u003Ccode\u003ESpeed\u003C/code\u003E\u003C/a\u003E value using \u003Ccode\u003EQuantity.per\u003C/code\u003E:\nspeed =\nlength |\u0026gt; Quantity.per duration\nYou can also do rate-related calculations with \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-speed.html\u0022 title=\u0022Speed\u0022\u003E\u003Ccode\u003ESpeed\u003C/code\u003E\u003C/a\u003E values to compute\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-length.html\u0022 title=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-duration.html\u0022 title=\u0022Duration\u0022\u003E\u003Ccode\u003EDuration\u003C/code\u003E\u003C/a\u003E:\nlength =\nspeed |\u0026gt; Quantity.for duration\nalsoLength =\nduration |\u0026gt; Quantity.at speed\nduration =\nlength |\u0026gt; Quantity.at_ speed\u003C/p\u003E\n\n \nSpeed.metersPerSecond \nmetersPerSecond \nSpeed.inMetersPerSecond \ninMetersPerSecond \nSpeed.feetPerSecond \nfeetPerSecond \nSpeed.inFeetPerSecond \ninFeetPerSecond \nSpeed.kilometersPerHour \nkilometersPerHour \nSpeed.inKilometersPerHour \ninKilometersPerHour \nSpeed.milesPerHour \nmilesPerHour \nSpeed.inMilesPerHour \ninMilesPerHour"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#metersPerSecond","title":"Speed.metersPerSecond","content":"Speed.metersPerSecond \nmetersPerSecond \n\u003Cp\u003EConstruct a speed from a number of meters per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inMetersPerSecond","title":"Speed.inMetersPerSecond","content":"Speed.inMetersPerSecond \ninMetersPerSecond \n\u003Cp\u003EConvert a speed to a number of meters per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#feetPerSecond","title":"Speed.feetPerSecond","content":"Speed.feetPerSecond \nfeetPerSecond \n\u003Cp\u003EConstruct a speed from a number of feet per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inFeetPerSecond","title":"Speed.inFeetPerSecond","content":"Speed.inFeetPerSecond \ninFeetPerSecond \n\u003Cp\u003EConvert a speed to a number of feet per second.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#kilometersPerHour","title":"Speed.kilometersPerHour","content":"Speed.kilometersPerHour \nkilometersPerHour \n\u003Cp\u003EConstruct a speed from a number of kilometers per hour.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inKilometersPerHour","title":"Speed.inKilometersPerHour","content":"Speed.inKilometersPerHour \ninKilometersPerHour \n\u003Cp\u003EConvert a speed to a number of kilometers per hour.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#milesPerHour","title":"Speed.milesPerHour","content":"Speed.milesPerHour \nmilesPerHour \n\u003Cp\u003EConstruct a speed from a number of miles per hour.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speedmodule.html#inMilesPerHour","title":"Speed.inMilesPerHour","content":"Speed.inMilesPerHour \ninMilesPerHour \n\u003Cp\u003EConvert a speed to a number of miles per hour.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html","title":"SubstanceAmount","content":"SubstanceAmount \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-substanceamount.html\u0022 title=\u0022SubstanceAmount\u0022\u003E\u003Ccode\u003ESubstanceAmount\u003C/code\u003E\u003C/a\u003E value represents a substance amount in [moles][1].\n[1]: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Mole_(unit)\u0022\u003Ehttps://en.wikipedia.org/wiki/Mole_(unit)\u003C/a\u003E\u003C/p\u003E\n\n \nSubstanceAmount.moles \nmoles \nSubstanceAmount.inMoles \ninMoles \nSubstanceAmount.picomoles \npicomoles \nSubstanceAmount.inPicomoles \ninPicomoles \nSubstanceAmount.nanomoles \nnanomoles \nSubstanceAmount.inNanomoles \ninNanomoles \nSubstanceAmount.micromoles \nmicromoles \nSubstanceAmount.inMicromoles \ninMicromoles \nSubstanceAmount.millimoles \nmillimoles \nSubstanceAmount.inMillimoles \ninMillimoles \nSubstanceAmount.centimoles \ncentimoles \nSubstanceAmount.inCentimoles \ninCentimoles \nSubstanceAmount.decimoles \ndecimoles \nSubstanceAmount.inDecimoles \ninDecimoles \nSubstanceAmount.kilomoles \nkilomoles \nSubstanceAmount.inKilomoles \ninKilomoles \nSubstanceAmount.megamoles \nmegamoles \nSubstanceAmount.inMegamoles \ninMegamoles \nSubstanceAmount.gigamoles \ngigamoles \nSubstanceAmount.inGigamoles \ninGigamoles"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#moles","title":"SubstanceAmount.moles","content":"SubstanceAmount.moles \nmoles \n\u003Cp\u003EConstruct a substance amount from a number of moles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMoles","title":"SubstanceAmount.inMoles","content":"SubstanceAmount.inMoles \ninMoles \n\u003Cp\u003EConvert a substance amount to a number of moles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#picomoles","title":"SubstanceAmount.picomoles","content":"SubstanceAmount.picomoles \npicomoles \n\u003Cp\u003EConstruct a substance amount from a number of picomoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inPicomoles","title":"SubstanceAmount.inPicomoles","content":"SubstanceAmount.inPicomoles \ninPicomoles \n\u003Cp\u003EConvert a substance amount to a number of picomoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#nanomoles","title":"SubstanceAmount.nanomoles","content":"SubstanceAmount.nanomoles \nnanomoles \n\u003Cp\u003EConstruct a substance amount from a number of nanomoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inNanomoles","title":"SubstanceAmount.inNanomoles","content":"SubstanceAmount.inNanomoles \ninNanomoles \n\u003Cp\u003EConvert a substance amount to a number of nanomoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#micromoles","title":"SubstanceAmount.micromoles","content":"SubstanceAmount.micromoles \nmicromoles \n\u003Cp\u003EConstruct a substance amount from a number of micromoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMicromoles","title":"SubstanceAmount.inMicromoles","content":"SubstanceAmount.inMicromoles \ninMicromoles \n\u003Cp\u003EConvert a substance amount to a number of micromoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#millimoles","title":"SubstanceAmount.millimoles","content":"SubstanceAmount.millimoles \nmillimoles \n\u003Cp\u003EConstruct a substance amount from a number of millimoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMillimoles","title":"SubstanceAmount.inMillimoles","content":"SubstanceAmount.inMillimoles \ninMillimoles \n\u003Cp\u003EConvert a substance amount to a number of millimoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#centimoles","title":"SubstanceAmount.centimoles","content":"SubstanceAmount.centimoles \ncentimoles \n\u003Cp\u003EConstruct a substance amount from a number of centimoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inCentimoles","title":"SubstanceAmount.inCentimoles","content":"SubstanceAmount.inCentimoles \ninCentimoles \n\u003Cp\u003EConvert a substance amount to a number of centimoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#decimoles","title":"SubstanceAmount.decimoles","content":"SubstanceAmount.decimoles \ndecimoles \n\u003Cp\u003EConstruct a substance amount from a number of decimoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inDecimoles","title":"SubstanceAmount.inDecimoles","content":"SubstanceAmount.inDecimoles \ninDecimoles \n\u003Cp\u003EConvert a substance amount to a number of decimoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#kilomoles","title":"SubstanceAmount.kilomoles","content":"SubstanceAmount.kilomoles \nkilomoles \n\u003Cp\u003EConstruct a substance amount from a number of kilomoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inKilomoles","title":"SubstanceAmount.inKilomoles","content":"SubstanceAmount.inKilomoles \ninKilomoles \n\u003Cp\u003EConvert a substance amount to a number of kilomoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#megamoles","title":"SubstanceAmount.megamoles","content":"SubstanceAmount.megamoles \nmegamoles \n\u003Cp\u003EConstruct a substance amount from a number of megamoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inMegamoles","title":"SubstanceAmount.inMegamoles","content":"SubstanceAmount.inMegamoles \ninMegamoles \n\u003Cp\u003EConvert a substance amount to a number of megamoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#gigamoles","title":"SubstanceAmount.gigamoles","content":"SubstanceAmount.gigamoles \ngigamoles \n\u003Cp\u003EConstruct a substance amount from a number of gigamoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamountmodule.html#inGigamoles","title":"SubstanceAmount.inGigamoles","content":"SubstanceAmount.inGigamoles \ninGigamoles \n\u003Cp\u003EConvert a substance amount to a number of gigamoles.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html","title":"Temperature","content":"Temperature \n\u003Cp\u003EUnlike other modules in \u003Ccode\u003Eelm-units\u003C/code\u003E, this module contains two different\nprimary types:\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-temperature.html\u0022 title=\u0022Temperature\u0022\u003E\u003Ccode\u003ETemperature\u003C/code\u003E\u003C/a\u003E, which is not actually a \u003Ccode\u003EQuantity\u003C/code\u003E since temperatures don\u0027t\nreally act like normal quantities. For example, it doesn\u0027t make sense to\nadd two temperatures or find the ratio between them.\n- \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-delta.html\u0022 title=\u0022Delta\u0022\u003E\u003Ccode\u003EDelta\u003C/code\u003E\u003C/a\u003E, which represents the difference between two temperatures. A \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-delta.html\u0022 title=\u0022Delta\u0022\u003E\u003Ccode\u003EDelta\u003C/code\u003E\u003C/a\u003E\n\u003Cem\u003Eis\u003C/em\u003E a \u003Ccode\u003EQuantity\u003C/code\u003E since it does make sense to add two deltas to get a net\ndelta, find the ratio between two deltas (one rise in temperature might be\ntwice as much as another rise in temperature), etc.\nSince a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-temperature.html\u0022 title=\u0022Temperature\u0022\u003E\u003Ccode\u003ETemperature\u003C/code\u003E\u003C/a\u003E value is not a \u003Ccode\u003EQuantity\u003C/code\u003E, this module exposes specialized\nfunctions for doing the operations on \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-temperature.html\u0022 title=\u0022Temperature\u0022\u003E\u003Ccode\u003ETemperature\u003C/code\u003E\u003C/a\u003E values that \u003Cem\u003Edo\u003C/em\u003E make sense,\nsuch as comparing two temperatures or sorting a list of temperatures. It\u0027s also\npossible to find the delta from one temperature to another using \u003Ca href=\u0022Temperature#minus\u0022\u003E\u003Ccode\u003Eminus\u003C/code\u003E\u003C/a\u003E,\nand then add a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-delta.html\u0022 title=\u0022Delta\u0022\u003E\u003Ccode\u003EDelta\u003C/code\u003E\u003C/a\u003E to a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-temperature.html\u0022 title=\u0022Temperature\u0022\u003E\u003Ccode\u003ETemperature\u003C/code\u003E\u003C/a\u003E using \u003Ca href=\u0022Temperature#plus\u0022\u003E\u003Ccode\u003Eplus\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E@docs Temperature, Delta, CelsiusDegrees\u003C/p\u003E\n\u003Ch1\u003ETemperatures\u003C/h1\u003E\n\u003Cp\u003E@docs degreesCelsius, inDegreesCelsius, degreesFahrenheit, inDegreesFahrenheit, kelvins, inKelvins, absoluteZero\u003C/p\u003E\n\u003Ch1\u003EDeltas\u003C/h1\u003E\n\u003Cp\u003EFollowing the suggestion mentioned \u003Ca href=\u0022https://en.wikipedia.org/wiki/Celsius#Temperatures_and_intervals\u0022\u003Ehere\u003C/a\u003E,\nthis module uses (for example) \u003Ccode\u003EcelsiusDegrees\u003C/code\u003E to indicate a temperature delta\n(change in temperature), in contrast to \u003Ccode\u003EdegreesCelsius\u003C/code\u003E which indicates an\nactual temperature.\u003C/p\u003E\n\u003Cp\u003E@docs celsiusDegrees, inCelsiusDegrees, fahrenheitDegrees, inFahrenheitDegrees\u003C/p\u003E\n\n \n\u003Ch2\u003EConstants\u003C/h2\u003E\n\u003Cp\u003EShorthand for \u003Ccode\u003ETemperature.celsiusDegrees 1\u003C/code\u003E and \u003Ccode\u003ETemperature.fahrenheitDegrees\n1\u003C/code\u003E. Can be convenient to use with \u003Ca href=\u0022Quantity#per\u0022\u003E\u003Ccode\u003EQuantity.per\u003C/code\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E@docs celsiusDegree, fahrenheitDegree\u003C/p\u003E\n\u003Ch1\u003EComparison\u003C/h1\u003E\n\u003Cp\u003E@docs lessThan, greaterThan, lessThanOrEqualTo, greaterThanOrEqualTo, compare, equalWithin, min, max\u003C/p\u003E\n\u003Ch1\u003EArithmetic\u003C/h1\u003E\n\u003Cp\u003E@docs plus, minus, clamp\u003C/p\u003E\n\u003Ch1\u003EList functions\u003C/h1\u003E\n\u003Cp\u003E@docs minimum, maximum, sort, sortBy\u003C/p\u003E\n\n \nTemperature.kelvins \nkelvins \nTemperature.inKelvins \ninKelvins \nTemperature.degreesCelsius \ndegreesCelsius \nTemperature.inDegreesCelsius \ninDegreesCelsius \nTemperature.degreesFahrenheit \ndegreesFahrenheit \nTemperature.inDegreesFahrenheit \ninDegreesFahrenheit \nTemperature.absoluteZero \nabsoluteZero \nTemperature.celsiusDegrees \ncelsiusDegrees \nTemperature.inCelsiusDegrees \ninCelsiusDegrees \nTemperature.fahrenheitDegrees \nfahrenheitDegrees \nTemperature.inFahrenheitDegrees \ninFahrenheitDegrees \nTemperature.celsiusDegree \ncelsiusDegree \nTemperature.fahrenheitDegree \nfahrenheitDegree \nTemperature.lessThan \nlessThan \nTemperature.lessThanOrEqualTo \nlessThanOrEqualTo \nTemperature.greaterThan \ngreaterThan \nTemperature.greaterThanOrEqualTo \ngreaterThanOrEqualTo \nTemperature.plus \nplus \nTemperature.clamp \nclamp \nTemperature.round \nround \nTemperature.abs \nabs \nTemperature.min \nmin \nTemperature.max \nmax \nTemperature.minimum \nminimum \nTemperature.maximum \nmaximum \nTemperature.sort \nsort \nTemperature.sortBy \nsortBy"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#kelvins","title":"Temperature.kelvins","content":"Temperature.kelvins \nkelvins \n\u003Cp\u003EConstruct a temperature from a number of [kelvins][kelvin].\nTemperature.kelvins 300\n--\u0026gt; Temperature.degreesCelsius 26.85\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inKelvins","title":"Temperature.inKelvins","content":"Temperature.inKelvins \ninKelvins \n\u003Cp\u003EConvert a temperature to a number of kelvins.\nTemperature.degreesCelsius 0\n|\u0026gt; Temperature.inKelvins\n--\u0026gt; 273.15\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#degreesCelsius","title":"Temperature.degreesCelsius","content":"Temperature.degreesCelsius \ndegreesCelsius \n\u003Cp\u003EConstruct a temperature from a number of degrees Celsius.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inDegreesCelsius","title":"Temperature.inDegreesCelsius","content":"Temperature.inDegreesCelsius \ninDegreesCelsius \n\u003Cp\u003EConvert a temperature to a number of degrees Celsius.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#degreesFahrenheit","title":"Temperature.degreesFahrenheit","content":"Temperature.degreesFahrenheit \ndegreesFahrenheit \n\u003Cp\u003EConstruct a temperature from a number of degrees Fahrenheit.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inDegreesFahrenheit","title":"Temperature.inDegreesFahrenheit","content":"Temperature.inDegreesFahrenheit \ninDegreesFahrenheit \n\u003Cp\u003EConvert a temperature to a number of degrees Fahrenheit.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#absoluteZero","title":"Temperature.absoluteZero","content":"Temperature.absoluteZero \nabsoluteZero \n\u003Cp\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/Absolute_zero\u0022\u003EAbsolute zero\u003C/a\u003E, equal to zero\nkelvins or -273.15 degrees Celsius.\nTemperature.absoluteZero\n--\u0026gt; Temperature.degreesCelsius -273.15\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#celsiusDegrees","title":"Temperature.celsiusDegrees","content":"Temperature.celsiusDegrees \ncelsiusDegrees \n\u003Cp\u003EConstruct a temperature delta from a number of Celsius degrees.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inCelsiusDegrees","title":"Temperature.inCelsiusDegrees","content":"Temperature.inCelsiusDegrees \ninCelsiusDegrees \n\u003Cp\u003EConvert a temperature delta to a number of Celsius degrees.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#fahrenheitDegrees","title":"Temperature.fahrenheitDegrees","content":"Temperature.fahrenheitDegrees \nfahrenheitDegrees \n\u003Cp\u003EConstruct a temperature delta from a number of Fahrenheit degrees.\nTemperature.fahrenheitDegrees 36\n--\u0026gt; Temperature.celsiusDegrees 20\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#inFahrenheitDegrees","title":"Temperature.inFahrenheitDegrees","content":"Temperature.inFahrenheitDegrees \ninFahrenheitDegrees \n\u003Cp\u003EConvert a temperature delta to a number of Fahrenheit degrees.\nTemperature.celsiusDegrees 10\n|\u0026gt; Temperature.inFahrenheitDegrees\n--\u0026gt; 18\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#celsiusDegree","title":"Temperature.celsiusDegree","content":"Temperature.celsiusDegree \ncelsiusDegree \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#fahrenheitDegree","title":"Temperature.fahrenheitDegree","content":"Temperature.fahrenheitDegree \nfahrenheitDegree \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#lessThan","title":"Temperature.lessThan","content":"Temperature.lessThan \nlessThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#lessThanOrEqualTo","title":"Temperature.lessThanOrEqualTo","content":"Temperature.lessThanOrEqualTo \nlessThanOrEqualTo \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#greaterThan","title":"Temperature.greaterThan","content":"Temperature.greaterThan \ngreaterThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#greaterThanOrEqualTo","title":"Temperature.greaterThanOrEqualTo","content":"Temperature.greaterThanOrEqualTo \ngreaterThanOrEqualTo \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#plus","title":"Temperature.plus","content":"Temperature.plus \nplus \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#clamp","title":"Temperature.clamp","content":"Temperature.clamp \nclamp \n\u003Cp\u003EGiven a lower and upper bound, clamp a given temperature to within those\nbounds. Say you wanted to clamp a temperature to be between 18 and 22 degrees\nCelsius:\nlowerBound =\nTemperature.degreesCelsius 18\nupperBound =\nTemperature.degreesCelsius 22\nTemperature.degreesCelsius 25\n|\u0026gt; Temperature.clamp lowerBound upperBound\n--\u0026gt; Temperature.degreesCelsius 22\nTemperature.degreesFahrenheit 67 -- approx 19.4 \u00B0C\n|\u0026gt; Temperature.clamp lowerBound upperBound\n--\u0026gt; Temperature.degreesFahrenheit 67\nTemperature.absoluteZero\n|\u0026gt; Temperature.clamp lowerBound upperBound\n--\u0026gt; Temperature.degreesCelsius 18\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#round","title":"Temperature.round","content":"Temperature.round \nround \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#abs","title":"Temperature.abs","content":"Temperature.abs \nabs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#min","title":"Temperature.min","content":"Temperature.min \nmin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#max","title":"Temperature.max","content":"Temperature.max \nmax \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#minimum","title":"Temperature.minimum","content":"Temperature.minimum \nminimum \n\u003Cp\u003EFind the minimum of a list of temperatures. Returns \u003Ccode\u003ENothing\u003C/code\u003E if the list\nis empty.\nTemperature.minimum\n[ Temperature.degreesCelsius 20\n, Temperature.kelvins 300\n, Temperature.degreesFahrenheit 74\n]\n--\u0026gt; Just (Temperature.degreesCelsius 20)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#maximum","title":"Temperature.maximum","content":"Temperature.maximum \nmaximum \n\u003Cp\u003EFind the maximum of a list of temperatures. Returns \u003Ccode\u003ENothing\u003C/code\u003E if the list\nis empty.\nTemperature.maximum\n[ Temperature.degreesCelsius 20\n, Temperature.kelvins 300\n, Temperature.degreesFahrenheit 74\n]\n--\u0026gt; Just (Temperature.kelvins 300)\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#sort","title":"Temperature.sort","content":"Temperature.sort \nsort \n\u003Cp\u003ESort a list of temperatures from lowest to highest.\nTemperature.sort\n[ Temperature.degreesCelsius 20\n, Temperature.kelvins 300\n, Temperature.degreesFahrenheit 74\n]\n--\u0026gt; [ Temperature.degreesCelsius 20\n--\u0026gt; , Temperature.degreesFahrenheit 74\n--\u0026gt; , Temperature.kelvins 300\n--\u0026gt; ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperaturemodule.html#sortBy","title":"Temperature.sortBy","content":"Temperature.sortBy \nsortBy \n\u003Cp\u003ESort an arbitrary list of values by a derived \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-temperature.html\u0022 title=\u0022Temperature\u0022\u003E\u003Ccode\u003ETemperature\u003C/code\u003E\u003C/a\u003E. If you had\nrooms =\n[ ( \u0022Lobby\u0022, Temperature.degreesCelsius 21 )\n, ( \u0022Locker room\u0022, Temperature.degreesCelsius 17 )\n, ( \u0022Rink\u0022, Temperature.degreesCelsius -4 )\n, ( \u0022Sauna\u0022, Temperature.degreesCelsius 82 )\n]\nthen you could sort by temperature with\nTemperature.sortBy Tuple.second rooms\n--\u0026gt; [ ( \u0022Rink\u0022, Temperature.degreesCelsius -4 )\n--\u0026gt; , ( \u0022Locker room\u0022, Temperature.degreesCelsius 17 )\n--\u0026gt; , ( \u0022Lobby\u0022, Temperature.degreesCelsius 21 )\n--\u0026gt; , ( \u0022Sauna\u0022, Temperature.degreesCelsius 82 )\n--\u0026gt; ]\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltagemodule.html","title":"Voltage","content":"Voltage \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-voltage.html\u0022 title=\u0022Voltage\u0022\u003E\u003Ccode\u003EVoltage\u003C/code\u003E\u003C/a\u003E value represents a voltage (electric potential difference, if\nwe\u0027re being picky) in volts.\nNote that since \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-volts.html\u0022 title=\u0022Volts\u0022\u003E\u003Ccode\u003EVolts\u003C/code\u003E\u003C/a\u003E is defined as \u003Ccode\u003ERate Watts Amperes\u003C/code\u003E (power per unit\ncurrent), you can do rate-related calculations with \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-voltage.html\u0022 title=\u0022Voltage\u0022\u003E\u003Ccode\u003EVoltage\u003C/code\u003E\u003C/a\u003E values to compute\n\u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-power.html\u0022 title=\u0022Power\u0022\u003E\u003Ccode\u003EPower\u003C/code\u003E\u003C/a\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-current.html\u0022 title=\u0022Current\u0022\u003E\u003Ccode\u003ECurrent\u003C/code\u003E\u003C/a\u003E:\n-- elm-units version of \u0027P = V \u003Cem\u003E I\u0027\npower =\ncurrent |\u0026gt; Quantity.at voltage\n-- I = P / V\ncurrent =\npower |\u0026gt; Quantity.at_ voltage\nJust for fun, note that since you can also \u003Ca href=\u0022Resistance\u0022\u003Eexpress \u003Ccode\u003EVoltage\u003C/code\u003E in terms of\n\u003Ccode\u003ECurrent\u003C/code\u003E and \u003Ccode\u003EResistance\u003C/code\u003E\u003C/a\u003E, you could rewrite the second example\nabove as\n-- P = I^2 \u003C/em\u003E R\npower =\ncurrent\n|\u0026gt; Quantity.at\n(current\n|\u0026gt; Quantity.at resistance\n)\u003C/p\u003E\n\n \nVoltage.volts \nvolts \nVoltage.inVolts \ninVolts"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltagemodule.html#volts","title":"Voltage.volts","content":"Voltage.volts \nvolts \n\u003Cp\u003EConstruct a voltage from a number of volts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltagemodule.html#inVolts","title":"Voltage.inVolts","content":"Voltage.inVolts \ninVolts \n\u003Cp\u003EConvert a voltage to a number of volts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html","title":"Volume","content":"Volume \n\u003Cp\u003EA \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-volume.html\u0022 title=\u0022Volume\u0022\u003E\u003Ccode\u003EVolume\u003C/code\u003E\u003C/a\u003E represents a volume in cubic meters, cubic feet, liters, US\nliquid gallons, imperial fluid ounces etc. It is stored as a number of cubic\nmeters.\u003C/p\u003E\n\n \nVolume.cubicMeters \ncubicMeters \nVolume.inCubicMeters \ninCubicMeters \nVolume.cubicInches \ncubicInches \nVolume.inCubicInches \ninCubicInches \nVolume.cubicFeet \ncubicFeet \nVolume.inCubicFeet \ninCubicFeet \nVolume.cubicYards \ncubicYards \nVolume.inCubicYards \ninCubicYards \nVolume.milliliters \nmilliliters \nVolume.inMilliliters \ninMilliliters \nVolume.cubicCentimeters \ncubicCentimeters \nVolume.inCubicCentimeters \ninCubicCentimeters \nVolume.liters \nliters \nVolume.inLiters \ninLiters \nVolume.usLiquidGallons \nusLiquidGallons \nVolume.inUsLiquidGallons \ninUsLiquidGallons \nVolume.usDryGallons \nusDryGallons \nVolume.inUsDryGallons \ninUsDryGallons \nVolume.imperialGallons \nimperialGallons \nVolume.inImperialGallons \ninImperialGallons \nVolume.usLiquidQuarts \nusLiquidQuarts \nVolume.inUsLiquidQuarts \ninUsLiquidQuarts \nVolume.usDryQuarts \nusDryQuarts \nVolume.inUsDryQuarts \ninUsDryQuarts \nVolume.imperialQuarts \nimperialQuarts \nVolume.inImperialQuarts \ninImperialQuarts \nVolume.usLiquidPints \nusLiquidPints \nVolume.inUsLiquidPints \ninUsLiquidPints \nVolume.usDryPints \nusDryPints \nVolume.inUsDryPints \ninUsDryPints \nVolume.imperialPints \nimperialPints \nVolume.inImperialPints \ninImperialPints \nVolume.usFluidOunces \nusFluidOunces \nVolume.inUsFluidOunces \ninUsFluidOunces \nVolume.imperialFluidOunces \nimperialFluidOunces \nVolume.inImperialFluidOunces \ninImperialFluidOunces \nVolume.cubicMeter \ncubicMeter \nVolume.milliliter \nmilliliter \nVolume.cubicCentimeter \ncubicCentimeter \nVolume.liter \nliter \nVolume.cubicInch \ncubicInch \nVolume.cubicFoot \ncubicFoot \nVolume.cubicYard \ncubicYard \nVolume.usLiquidGallon \nusLiquidGallon \nVolume.usDryGallon \nusDryGallon \nVolume.imperialGallon \nimperialGallon \nVolume.usLiquidQuart \nusLiquidQuart \nVolume.usDryQuart \nusDryQuart \nVolume.imperialQuart \nimperialQuart \nVolume.usLiquidPint \nusLiquidPint \nVolume.usDryPint \nusDryPint \nVolume.imperialPint \nimperialPint \nVolume.usFluidOunce \nusFluidOunce \nVolume.imperialFluidOunce \nimperialFluidOunce"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicMeters","title":"Volume.cubicMeters","content":"Volume.cubicMeters \ncubicMeters \n\u003Cp\u003EConstruct a volume from a number of cubic meters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicMeters","title":"Volume.inCubicMeters","content":"Volume.inCubicMeters \ninCubicMeters \n\u003Cp\u003EConvert a volume to a number of cubic meters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicInches","title":"Volume.cubicInches","content":"Volume.cubicInches \ncubicInches \n\u003Cp\u003EConstruct a volume from a number of cubic inches.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicInches","title":"Volume.inCubicInches","content":"Volume.inCubicInches \ninCubicInches \n\u003Cp\u003EConvert a volume to a number of cubic inches.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicFeet","title":"Volume.cubicFeet","content":"Volume.cubicFeet \ncubicFeet \n\u003Cp\u003EConstruct a volume from a number of cubic feet.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicFeet","title":"Volume.inCubicFeet","content":"Volume.inCubicFeet \ninCubicFeet \n\u003Cp\u003EConvert a volume to a number of cubic feet.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicYards","title":"Volume.cubicYards","content":"Volume.cubicYards \ncubicYards \n\u003Cp\u003EConstruct a volume from a number of cubic yards.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicYards","title":"Volume.inCubicYards","content":"Volume.inCubicYards \ninCubicYards \n\u003Cp\u003EConvert a volume to a number of cubic yards.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#milliliters","title":"Volume.milliliters","content":"Volume.milliliters \nmilliliters \n\u003Cp\u003EConstruct a volume from a number of milliliters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inMilliliters","title":"Volume.inMilliliters","content":"Volume.inMilliliters \ninMilliliters \n\u003Cp\u003EConvert a volume to a number of milliliters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicCentimeters","title":"Volume.cubicCentimeters","content":"Volume.cubicCentimeters \ncubicCentimeters \n\u003Cp\u003EConstruct a volume from a number of cubic centimeters.\nAlias for \u003Ccode\u003Emilliliters\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inCubicCentimeters","title":"Volume.inCubicCentimeters","content":"Volume.inCubicCentimeters \ninCubicCentimeters \n\u003Cp\u003EConvert a volume to a number of cubic centimeters.\nAlias for \u003Ccode\u003EinMilliliters\u003C/code\u003E.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#liters","title":"Volume.liters","content":"Volume.liters \nliters \n\u003Cp\u003EConstruct a volume from a number of liters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inLiters","title":"Volume.inLiters","content":"Volume.inLiters \ninLiters \n\u003Cp\u003EConvert a volume to a number of liters.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidGallons","title":"Volume.usLiquidGallons","content":"Volume.usLiquidGallons \nusLiquidGallons \n\u003Cp\u003EConstruct a volume from a number of U.S. liquid gallon.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsLiquidGallons","title":"Volume.inUsLiquidGallons","content":"Volume.inUsLiquidGallons \ninUsLiquidGallons \n\u003Cp\u003EConvert a volume to a number of U.S. liquid gallons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryGallons","title":"Volume.usDryGallons","content":"Volume.usDryGallons \nusDryGallons \n\u003Cp\u003EConstruct a volume from a number of U.S. dry gallons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsDryGallons","title":"Volume.inUsDryGallons","content":"Volume.inUsDryGallons \ninUsDryGallons \n\u003Cp\u003EConvert a volume to a number of U.S. dry gallons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialGallons","title":"Volume.imperialGallons","content":"Volume.imperialGallons \nimperialGallons \n\u003Cp\u003EConstruct a volume from a number of imperial gallons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialGallons","title":"Volume.inImperialGallons","content":"Volume.inImperialGallons \ninImperialGallons \n\u003Cp\u003EConvert a volume to a number of imperial gallons.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidQuarts","title":"Volume.usLiquidQuarts","content":"Volume.usLiquidQuarts \nusLiquidQuarts \n\u003Cp\u003EConstruct a volume from a number of U.S. liquid quarts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsLiquidQuarts","title":"Volume.inUsLiquidQuarts","content":"Volume.inUsLiquidQuarts \ninUsLiquidQuarts \n\u003Cp\u003EConvert a volume to a number of U.S. liquid quarts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryQuarts","title":"Volume.usDryQuarts","content":"Volume.usDryQuarts \nusDryQuarts \n\u003Cp\u003EConstruct a volume from a number of U.S. dry quarts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsDryQuarts","title":"Volume.inUsDryQuarts","content":"Volume.inUsDryQuarts \ninUsDryQuarts \n\u003Cp\u003EConvert a volume to a number of U.S. dry quarts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialQuarts","title":"Volume.imperialQuarts","content":"Volume.imperialQuarts \nimperialQuarts \n\u003Cp\u003EConstruct a volume from a number of imperial quarts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialQuarts","title":"Volume.inImperialQuarts","content":"Volume.inImperialQuarts \ninImperialQuarts \n\u003Cp\u003EConvert a volume to a number of imperial quarts.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidPints","title":"Volume.usLiquidPints","content":"Volume.usLiquidPints \nusLiquidPints \n\u003Cp\u003EConstruct a volume from a number of U.S. liquid pints.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsLiquidPints","title":"Volume.inUsLiquidPints","content":"Volume.inUsLiquidPints \ninUsLiquidPints \n\u003Cp\u003EConvert a volume to a number of U.S. liquid pints.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryPints","title":"Volume.usDryPints","content":"Volume.usDryPints \nusDryPints \n\u003Cp\u003EConstruct a volume from a number of U.S. dry pints.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsDryPints","title":"Volume.inUsDryPints","content":"Volume.inUsDryPints \ninUsDryPints \n\u003Cp\u003EConvert a volume to a number of U.S. dry pints.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialPints","title":"Volume.imperialPints","content":"Volume.imperialPints \nimperialPints \n\u003Cp\u003EConstruct a volume from a number of imperial pints.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialPints","title":"Volume.inImperialPints","content":"Volume.inImperialPints \ninImperialPints \n\u003Cp\u003EConvert a volume to a number of imperial pints.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usFluidOunces","title":"Volume.usFluidOunces","content":"Volume.usFluidOunces \nusFluidOunces \n\u003Cp\u003EConstruct a volume from a number of U.S. fluid ounces.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inUsFluidOunces","title":"Volume.inUsFluidOunces","content":"Volume.inUsFluidOunces \ninUsFluidOunces \n\u003Cp\u003EConvert a volume to a number of U.S. fluid ounces.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialFluidOunces","title":"Volume.imperialFluidOunces","content":"Volume.imperialFluidOunces \nimperialFluidOunces \n\u003Cp\u003EConstruct a volume from a number of imperial fluid ounces.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#inImperialFluidOunces","title":"Volume.inImperialFluidOunces","content":"Volume.inImperialFluidOunces \ninImperialFluidOunces \n\u003Cp\u003EConvert a volume to a number of imperial fluid ounces.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicMeter","title":"Volume.cubicMeter","content":"Volume.cubicMeter \ncubicMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#milliliter","title":"Volume.milliliter","content":"Volume.milliliter \nmilliliter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicCentimeter","title":"Volume.cubicCentimeter","content":"Volume.cubicCentimeter \ncubicCentimeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#liter","title":"Volume.liter","content":"Volume.liter \nliter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicInch","title":"Volume.cubicInch","content":"Volume.cubicInch \ncubicInch \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicFoot","title":"Volume.cubicFoot","content":"Volume.cubicFoot \ncubicFoot \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#cubicYard","title":"Volume.cubicYard","content":"Volume.cubicYard \ncubicYard \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidGallon","title":"Volume.usLiquidGallon","content":"Volume.usLiquidGallon \nusLiquidGallon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryGallon","title":"Volume.usDryGallon","content":"Volume.usDryGallon \nusDryGallon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialGallon","title":"Volume.imperialGallon","content":"Volume.imperialGallon \nimperialGallon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidQuart","title":"Volume.usLiquidQuart","content":"Volume.usLiquidQuart \nusLiquidQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryQuart","title":"Volume.usDryQuart","content":"Volume.usDryQuart \nusDryQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialQuart","title":"Volume.imperialQuart","content":"Volume.imperialQuart \nimperialQuart \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usLiquidPint","title":"Volume.usLiquidPint","content":"Volume.usLiquidPint \nusLiquidPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usDryPint","title":"Volume.usDryPint","content":"Volume.usDryPint \nusDryPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialPint","title":"Volume.imperialPint","content":"Volume.imperialPint \nimperialPint \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#usFluidOunce","title":"Volume.usFluidOunce","content":"Volume.usFluidOunce \nusFluidOunce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volumemodule.html#imperialFluidOunce","title":"Volume.imperialFluidOunce","content":"Volume.imperialFluidOunce \nimperialFluidOunce \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-acceleration.html","title":"Acceleration","content":"Acceleration \n \nAcceleration.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-acceleration.html#Value","title":"Acceleration.Value","content":"Acceleration.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-amperes.html","title":"Amperes","content":"Amperes \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angle.html","title":"Angle","content":"Angle \n \nAngle.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angle.html#Value","title":"Angle.Value","content":"Angle.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularacceleration.html","title":"AngularAcceleration","content":"AngularAcceleration \n \nAngularAcceleration.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularacceleration.html#Value","title":"AngularAcceleration.Value","content":"AngularAcceleration.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeed.html","title":"AngularSpeed","content":"AngularSpeed \n \nAngularSpeed.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-angularspeed.html#Value","title":"AngularSpeed.Value","content":"AngularSpeed.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-area.html","title":"Area","content":"Area \n \nArea.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-area.html#Value","title":"Area.Value","content":"Area.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-candelas.html","title":"Candelas","content":"Candelas \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitance.html","title":"Capacitance","content":"Capacitance \n \nCapacitance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-capacitance.html#Value","title":"Capacitance.Value","content":"Capacitance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-celsiusdegrees.html","title":"CelsiusDegrees","content":"CelsiusDegrees \n \nCelsiusDegrees.CelsiusDegrees \nCelsiusDegrees"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-celsiusdegrees.html#CelsiusDegrees","title":"CelsiusDegrees.CelsiusDegrees","content":"CelsiusDegrees.CelsiusDegrees \nCelsiusDegrees \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-charge.html","title":"Charge","content":"Charge \n \nCharge.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-charge.html#Value","title":"Charge.Value","content":"Charge.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-coulombs.html","title":"Coulombs","content":"Coulombs \n \nCoulombs.Coulombs \nCoulombs"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-coulombs.html#Coulombs","title":"Coulombs.Coulombs","content":"Coulombs.Coulombs \nCoulombs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-cubed-1.html","title":"Cubed\u003C\u0027Units\u003E","content":"Cubed\u003C\u0027Units\u003E \n\u003Cp\u003ERepresents a units type that is the cube of some other units type; for\nexample, \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-meters.html\u0022 title=\u0022Meters\u0022\u003E\u003Ccode\u003EMeters\u003C/code\u003E\u003C/a\u003E is one units type (the units type of a \u003Ca href=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003E) and\n\u003Ccode\u003ECubed Meters\u003C/code\u003E is another (the units type of an \u003Ca href=\u0022Volume\u0022\u003E\u003Ccode\u003EVolume\u003C/code\u003E\u003C/a\u003E). See the\n\u003Ca href=\u0022Quantity#cubed\u0022\u003E\u003Ccode\u003Ecubed\u003C/code\u003E\u003C/a\u003E and \u003Ca href=\u0022Quantity#cbrt\u0022\u003E\u003Ccode\u003Ecbrt\u003C/code\u003E\u003C/a\u003E functions for examples of\nuse.\nThis is a special case of the \u003Ccode\u003EProduct\u003C/code\u003E units type.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-cubicmeters.html","title":"CubicMeters","content":"CubicMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-current.html","title":"Current","content":"Current \n \nCurrent.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-current.html#Value","title":"Current.Value","content":"Current.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-delta.html","title":"Delta","content":"Delta \n \nDelta.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-delta.html#Value","title":"Delta.Value","content":"Delta.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-density.html","title":"Density","content":"Density \n \nDensity.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-density.html#Value","title":"Density.Value","content":"Density.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-duration.html","title":"Duration","content":"Duration \n \nDuration.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-duration.html#Value","title":"Duration.Value","content":"Duration.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energy.html","title":"Energy","content":"Energy \n \nEnergy.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-energy.html#Value","title":"Energy.Value","content":"Energy.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-farads.html","title":"Farads","content":"Farads \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html","title":"Float","content":"Float \n\u003Cp\u003EA static class providing added features to the floating point number class.\nThe main features of this class allow for better floating point equality\ntesting. Generally, floating points always have small variations in their\nvalues because the way that floating point numbers are encoded. It is often\nuseful to do equality comparison checks between floating point numbers in a\nvariety of contexts. There are two main ways of doing this type of\ncomparison. The first is to use a percentage tolerance between two numbers,\neg. Two floating point numbers are equal if they are within 0.01% of each\nother. Another is to compare if the two numbers are within an absolute range\nfrom each other, eg. Two floating point numbers are equal if they are within\n0.0001 units of each other.\u003C/p\u003E\n\u003Cp\u003EThis library does comparison by absolute value comparison through digit\nprecision. Numbers are considered equal if they are equal when rounded to\nthe number of digits as specified by \u003Ccode\u003EFloat.DigitPrecision\u003C/code\u003E. The default is\n10 digits, so by default \u003Ccode\u003E2.0 = 2.00000000003\u003C/code\u003E (the 11th digit is a 3).\u003C/p\u003E\n\u003Cp\u003E\u003Ccode\u003EFloat.Epsilon\u003C/code\u003E is a derived value from the number of digits and represents\nthe maximum difference between two numbers that is considered equal. This\nnumber is \u003Ccode\u003E10^-DigitPrecision\u003C/code\u003E which by default is \u003Ccode\u003E10^(-10)\u003C/code\u003E, or\n\u003Ccode\u003E0.000000001\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003EIn general the rules followed by this extension are from \u003Ca href=\u0022https://floating-point-gui.de/errors/comparison/\u0022\u003EThe Floating Point\nGuide on Comparison\u003C/a\u003E.\u003C/p\u003E\n\n \nFloat.DigitPrecision \nDigitPrecision \nFloat.MinNormal \nMinNormal \nFloat.Epsilon \nEpsilon"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html#DigitPrecision","title":"Float.DigitPrecision","content":"Float.DigitPrecision \nDigitPrecision \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html#MinNormal","title":"Float.MinNormal","content":"Float.MinNormal \nMinNormal \n\u003Cp\u003EThe smallest number that a 64-bit floating point number can accurately\nrepresent. Values lower than this may not have the expected results in\nsome operations. This number is needed to handle the special case of\ntrying to compare two numbers that are really close to zero.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-float.html#Epsilon","title":"Float.Epsilon","content":"Float.Epsilon \nEpsilon \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-force.html","title":"Force","content":"Force \n \nForce.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-force.html#Value","title":"Force.Value","content":"Force.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-henries.html","title":"Henries","content":"Henries \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminance.html","title":"Illuminance","content":"Illuminance \n \nIlluminance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-illuminance.html#Value","title":"Illuminance.Value","content":"Illuminance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductance.html","title":"Inductance","content":"Inductance \n \nInductance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-inductance.html#Value","title":"Inductance.Value","content":"Inductance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval-1.html","title":"Interval\u003C\u0027Units\u003E","content":"Interval\u003C\u0027Units\u003E \n\u003Cp\u003EA finite, closed interval with a minimum and maximum number. This can\nrepresent an interval of any type.\u003C/p\u003E\n\u003Cp\u003EFor example...\nInterval float\nInterval int\nInterval Angle\u003C/p\u003E\n\n \nInterval\u003C\u0027Units\u003E.Interval \nInterval"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-interval-1.html#Interval","title":"Interval\u003C\u0027Units\u003E.Interval","content":"Interval\u003C\u0027Units\u003E.Interval \nInterval \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-joules.html","title":"Joules","content":"Joules \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-kilograms.html","title":"Kilograms","content":"Kilograms \n \nKilograms.Kilograms \nKilograms"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-kilograms.html#Kilograms","title":"Kilograms.Kilograms","content":"Kilograms.Kilograms \nKilograms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-kilogramspercubicmeter.html","title":"KilogramsPerCubicMeter","content":"KilogramsPerCubicMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-length.html","title":"Length","content":"Length \n \nLength.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-length.html#Value","title":"Length.Value","content":"Length.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lumens.html","title":"Lumens","content":"Lumens \n \nLumens.Lumens \nLumens"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lumens.html#Lumens","title":"Lumens.Lumens","content":"Lumens.Lumens \nLumens \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminance.html","title":"Luminance","content":"Luminance \n \nLuminance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminance.html#Value","title":"Luminance.Value","content":"Luminance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousflux.html","title":"LuminousFlux","content":"LuminousFlux \n \nLuminousFlux.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousflux.html#Value","title":"LuminousFlux.Value","content":"LuminousFlux.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensity.html","title":"LuminousIntensity","content":"LuminousIntensity \n \nLuminousIntensity.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-luminousintensity.html#Value","title":"LuminousIntensity.Value","content":"LuminousIntensity.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-lux.html","title":"Lux","content":"Lux \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-mass.html","title":"Mass","content":"Mass \n \nMass.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-mass.html#Value","title":"Mass.Value","content":"Mass.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meters.html","title":"Meters","content":"Meters \n \nMeters.Meters \nMeters"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meters.html#Meters","title":"Meters.Meters","content":"Meters.Meters \nMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meterspersecond.html","title":"MetersPerSecond","content":"MetersPerSecond \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-meterspersecondsquared.html","title":"MetersPerSecondSquared","content":"MetersPerSecondSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molarity.html","title":"Molarity","content":"Molarity \n \nMolarity.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molarity.html#Value","title":"Molarity.Value","content":"Molarity.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-moles.html","title":"Moles","content":"Moles \n \nMoles.Moles \nMoles"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-moles.html#Moles","title":"Moles.Moles","content":"Moles.Moles \nMoles \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-molespercubicmeter.html","title":"MolesPerCubicMeter","content":"MolesPerCubicMeter \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-newtons.html","title":"Newtons","content":"Newtons \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-nits.html","title":"Nits","content":"Nits \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-ohms.html","title":"Ohms","content":"Ohms \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pascals.html","title":"Pascals","content":"Pascals \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percent.html","title":"Percent","content":"Percent \n\u003Cp\u003EA percentage value. The default range for percentages is 0 to 1 but can also be given in the range 0 to 100.\u003C/p\u003E\n\n \nPercent.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percent.html#Value","title":"Percent.Value","content":"Percent.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percentage.html","title":"Percentage","content":"Percentage \n \nPercentage.Percentage \nPercentage"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-percentage.html#Percentage","title":"Percentage.Percentage","content":"Percentage.Percentage \nPercentage \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixel.html","title":"Pixel","content":"Pixel \n \nPixel.Pixel \nPixel"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixel.html#Pixel","title":"Pixel.Pixel","content":"Pixel.Pixel \nPixel \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixels.html","title":"Pixels","content":"Pixels \n \nPixels.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixels.html#Value","title":"Pixels.Value","content":"Pixels.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelspersecond.html","title":"PixelsPerSecond","content":"PixelsPerSecond \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pixelspersecondsquared.html","title":"PixelsPerSecondSquared","content":"PixelsPerSecondSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-power.html","title":"Power","content":"Power \n \nPower.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-power.html#Value","title":"Power.Value","content":"Power.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressure.html","title":"Pressure","content":"Pressure \n \nPressure.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-pressure.html#Value","title":"Pressure.Value","content":"Pressure.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-product-2.html","title":"Product\u003C\u0027Unit1, \u0027Unit2\u003E","content":"Product\u003C\u0027Unit1, \u0027Unit2\u003E \n\u003Cp\u003ERepresents a units type that is the product of two other units types. This\nis a more general form of \u003Ccode\u003ESquared\u003C/code\u003E or \u003Ccode\u003ECubed\u003C/code\u003E. See \u003Ca href=\u0022#product\u0022\u003E\u003Ccode\u003Eproduct\u003C/code\u003E\u003C/a\u003E,\n\u003Ca href=\u0022#times\u0022\u003E\u003Ccode\u003Etimes\u003C/code\u003E\u003C/a\u003E, \u003Ca href=\u0022#over\u0022\u003E\u003Ccode\u003Eover\u003C/code\u003E\u003C/a\u003E and \u003Ca href=\u0022#over_\u0022\u003E\u003Ccode\u003Eover_\u003C/code\u003E\u003C/a\u003E for how it can be used.\u003C/p\u003E\n\n \nProduct\u003C\u0027Unit1, \u0027Unit2\u003E.Product \nProduct"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-product-2.html#Product","title":"Product\u003C\u0027Unit1, \u0027Unit2\u003E.Product","content":"Product\u003C\u0027Unit1, \u0027Unit2\u003E.Product \nProduct \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html","title":"Quantity\u003C\u0027Units\u003E","content":"Quantity\u003C\u0027Units\u003E \n\u003Cp\u003EA \u003Ccode\u003EQuantity\u003C/code\u003E is effectively a \u003Ccode\u003Enumber\u003C/code\u003E (an \u003Ccode\u003EInt\u003C/code\u003E or \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E) tagged with a\n\u003Ccode\u003Eunits\u003C/code\u003E type. So a\nQuantity Float Meters\nis a \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E number of \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-meters.html\u0022 title=\u0022Meters\u0022\u003E\u003Ccode\u003EMeters\u003C/code\u003E\u003C/a\u003E and a\nQuantity Int Pixels\nis an \u003Ccode\u003EInt\u003C/code\u003E number of \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-pixels.html\u0022 title=\u0022Pixels\u0022\u003E\u003Ccode\u003EPixels\u003C/code\u003E\u003C/a\u003E. When compiling with \u003Ccode\u003Eelm make --optimize\u003C/code\u003E the\n\u003Ccode\u003EQuantity\u003C/code\u003E wrapper type will be compiled away, so the runtime performance should\nbe comparable to using a raw \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E or \u003Ccode\u003EInt\u003C/code\u003E.\u003C/p\u003E\n\n \nQuantity\u003C\u0027Units\u003E.( .ctor ) \n( .ctor ) \nQuantity\u003C\u0027Units\u003E.Comparison \nComparison \nQuantity\u003C\u0027Units\u003E.Equals \nEquals \nQuantity\u003C\u0027Units\u003E.LessThan \nLessThan \nQuantity\u003C\u0027Units\u003E.Value \nValue \nQuantity\u003C\u0027Units\u003E.Abs \nAbs \nQuantity\u003C\u0027Units\u003E.Ceiling \nCeiling \nQuantity\u003C\u0027Units\u003E.Floor \nFloor \nQuantity\u003C\u0027Units\u003E.Max \nMax \nQuantity\u003C\u0027Units\u003E.Min \nMin \nQuantity\u003C\u0027Units\u003E.Round \nRound \nQuantity\u003C\u0027Units\u003E.Sqrt \nSqrt \nQuantity\u003C\u0027Units\u003E.Truncate \nTruncate \nQuantity\u003C\u0027Units\u003E.( \u002B ) \n( \u002B ) \nQuantity\u003C\u0027Units\u003E.( / ) \n( / ) \nQuantity\u003C\u0027Units\u003E.( / ) \n( / ) \nQuantity\u003C\u0027Units\u003E.( / ) \n( / ) \nQuantity\u003C\u0027Units\u003E.( % ) \n( % ) \nQuantity\u003C\u0027Units\u003E.( * ) \n( * ) \nQuantity\u003C\u0027Units\u003E.( * ) \n( * ) \nQuantity\u003C\u0027Units\u003E.( * ) \n( * ) \nQuantity\u003C\u0027Units\u003E.( - ) \n( - ) \nQuantity\u003C\u0027Units\u003E.( ~- ) \n( ~- )"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( .ctor )","title":"Quantity\u003C\u0027Units\u003E.( .ctor )","content":"Quantity\u003C\u0027Units\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Comparison","title":"Quantity\u003C\u0027Units\u003E.Comparison","content":"Quantity\u003C\u0027Units\u003E.Comparison \nComparison \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Equals","title":"Quantity\u003C\u0027Units\u003E.Equals","content":"Quantity\u003C\u0027Units\u003E.Equals \nEquals \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#LessThan","title":"Quantity\u003C\u0027Units\u003E.LessThan","content":"Quantity\u003C\u0027Units\u003E.LessThan \nLessThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Value","title":"Quantity\u003C\u0027Units\u003E.Value","content":"Quantity\u003C\u0027Units\u003E.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Abs","title":"Quantity\u003C\u0027Units\u003E.Abs","content":"Quantity\u003C\u0027Units\u003E.Abs \nAbs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Ceiling","title":"Quantity\u003C\u0027Units\u003E.Ceiling","content":"Quantity\u003C\u0027Units\u003E.Ceiling \nCeiling \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Floor","title":"Quantity\u003C\u0027Units\u003E.Floor","content":"Quantity\u003C\u0027Units\u003E.Floor \nFloor \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Max","title":"Quantity\u003C\u0027Units\u003E.Max","content":"Quantity\u003C\u0027Units\u003E.Max \nMax \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Min","title":"Quantity\u003C\u0027Units\u003E.Min","content":"Quantity\u003C\u0027Units\u003E.Min \nMin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Round","title":"Quantity\u003C\u0027Units\u003E.Round","content":"Quantity\u003C\u0027Units\u003E.Round \nRound \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Sqrt","title":"Quantity\u003C\u0027Units\u003E.Sqrt","content":"Quantity\u003C\u0027Units\u003E.Sqrt \nSqrt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#Truncate","title":"Quantity\u003C\u0027Units\u003E.Truncate","content":"Quantity\u003C\u0027Units\u003E.Truncate \nTruncate \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( \u002B )","title":"Quantity\u003C\u0027Units\u003E.( \u002B )","content":"Quantity\u003C\u0027Units\u003E.( \u002B ) \n( \u002B ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( / )","title":"Quantity\u003C\u0027Units\u003E.( / )","content":"Quantity\u003C\u0027Units\u003E.( / ) \n( / ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( / )","title":"Quantity\u003C\u0027Units\u003E.( / )","content":"Quantity\u003C\u0027Units\u003E.( / ) \n( / ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( / )","title":"Quantity\u003C\u0027Units\u003E.( / )","content":"Quantity\u003C\u0027Units\u003E.( / ) \n( / ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( % )","title":"Quantity\u003C\u0027Units\u003E.( % )","content":"Quantity\u003C\u0027Units\u003E.( % ) \n( % ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( * )","title":"Quantity\u003C\u0027Units\u003E.( * )","content":"Quantity\u003C\u0027Units\u003E.( * ) \n( * ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( * )","title":"Quantity\u003C\u0027Units\u003E.( * )","content":"Quantity\u003C\u0027Units\u003E.( * ) \n( * ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( * )","title":"Quantity\u003C\u0027Units\u003E.( * )","content":"Quantity\u003C\u0027Units\u003E.( * ) \n( * ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( - )","title":"Quantity\u003C\u0027Units\u003E.( - )","content":"Quantity\u003C\u0027Units\u003E.( - ) \n( - ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-quantity-1.html#( ~- )","title":"Quantity\u003C\u0027Units\u003E.( ~- )","content":"Quantity\u003C\u0027Units\u003E.( ~- ) \n( ~- ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radians.html","title":"Radians","content":"Radians \n \nRadians.Radians \nRadians"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radians.html#Radians","title":"Radians.Radians","content":"Radians.Radians \nRadians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radianspersecond.html","title":"RadiansPerSecond","content":"RadiansPerSecond \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-radianspersecondsquared.html","title":"RadiansPerSecondSquared","content":"RadiansPerSecondSquared \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-rate-2.html","title":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E","content":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E \n\u003Cp\u003ERepresents the units type of a rate or quotient such as a speed (\u003Ccode\u003ERate\nMeters Seconds\u003C/code\u003E) or a pressure (\u003Ccode\u003ERate Newtons SquareMeters\u003C/code\u003E). See \u003Ca href=\u0022#working-with-rates\u0022\u003EWorking with\nrates\u003C/a\u003E for details.\u003C/p\u003E\n\n \nRate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E.Rate \nRate"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-rate-2.html#Rate","title":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E.Rate","content":"Rate\u003C\u0027DependentUnits, \u0027IndependentUnits\u003E.Rate \nRate \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistance.html","title":"Resistance","content":"Resistance \n \nResistance.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-resistance.html#Value","title":"Resistance.Value","content":"Resistance.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-seconds.html","title":"Seconds","content":"Seconds \n \nSeconds.Seconds \nSeconds"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-seconds.html#Seconds","title":"Seconds.Seconds","content":"Seconds.Seconds \nSeconds \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidangle.html","title":"SolidAngle","content":"SolidAngle \n \nSolidAngle.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-solidangle.html#Value","title":"SolidAngle.Value","content":"SolidAngle.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speed.html","title":"Speed","content":"Speed \n \nSpeed.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-speed.html#Value","title":"Speed.Value","content":"Speed.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-squaremeters.html","title":"SquareMeters","content":"SquareMeters \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-squarepixels.html","title":"SquarePixels","content":"SquarePixels \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-squared-1.html","title":"Squared\u003C\u0027Units\u003E","content":"Squared\u003C\u0027Units\u003E \n\u003Cp\u003ERepresents a units type that is the square of some other units type; for\nexample, \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-meters.html\u0022 title=\u0022Meters\u0022\u003E\u003Ccode\u003EMeters\u003C/code\u003E\u003C/a\u003E is one units type (the units type of a \u003Ca href=\u0022Length\u0022\u003E\u003Ccode\u003ELength\u003C/code\u003E\u003C/a\u003E) and\n\u003Ccode\u003ESquared Meters\u003C/code\u003E is another (the units type of an \u003Ca href=\u0022Area\u0022\u003E\u003Ccode\u003EArea\u003C/code\u003E\u003C/a\u003E). See the\n\u003Ca href=\u0022#squared\u0022\u003E\u003Ccode\u003Esquared\u003C/code\u003E\u003C/a\u003E and \u003Ca href=\u0022#sqrt\u0022\u003E\u003Ccode\u003Esqrt\u003C/code\u003E\u003C/a\u003E functions for examples of use.\nThis is a special case of the \u003Ccode\u003EProduct\u003C/code\u003E units type.\u003C/p\u003E\n\n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-steradians.html","title":"Steradians","content":"Steradians \n \nSteradians.Steradians \nSteradians"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-steradians.html#Steradians","title":"Steradians.Steradians","content":"Steradians.Steradians \nSteradians \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamount.html","title":"SubstanceAmount","content":"SubstanceAmount \n \nSubstanceAmount.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-substanceamount.html#Value","title":"SubstanceAmount.Value","content":"SubstanceAmount.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html","title":"Temperature","content":"Temperature \n \nTemperature.( .ctor ) \n( .ctor ) \nTemperature.Comparison \nComparison \nTemperature.Equals \nEquals \nTemperature.LessThan \nLessThan \nTemperature.Value \nValue \nTemperature.Abs \nAbs \nTemperature.Ceiling \nCeiling \nTemperature.Floor \nFloor \nTemperature.Max \nMax \nTemperature.Min \nMin \nTemperature.Round \nRound \nTemperature.Sqrt \nSqrt \nTemperature.Truncate \nTruncate \nTemperature.( \u002B ) \n( \u002B ) \nTemperature.( \u002B ) \n( \u002B ) \nTemperature.( - ) \n( - )"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#( .ctor )","title":"Temperature.( .ctor )","content":"Temperature.( .ctor ) \n( .ctor ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Comparison","title":"Temperature.Comparison","content":"Temperature.Comparison \nComparison \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Equals","title":"Temperature.Equals","content":"Temperature.Equals \nEquals \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#LessThan","title":"Temperature.LessThan","content":"Temperature.LessThan \nLessThan \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Value","title":"Temperature.Value","content":"Temperature.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Abs","title":"Temperature.Abs","content":"Temperature.Abs \nAbs \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Ceiling","title":"Temperature.Ceiling","content":"Temperature.Ceiling \nCeiling \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Floor","title":"Temperature.Floor","content":"Temperature.Floor \nFloor \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Max","title":"Temperature.Max","content":"Temperature.Max \nMax \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Min","title":"Temperature.Min","content":"Temperature.Min \nMin \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Round","title":"Temperature.Round","content":"Temperature.Round \nRound \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Sqrt","title":"Temperature.Sqrt","content":"Temperature.Sqrt \nSqrt \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#Truncate","title":"Temperature.Truncate","content":"Temperature.Truncate \nTruncate \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#( \u002B )","title":"Temperature.( \u002B )","content":"Temperature.( \u002B ) \n( \u002B ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#( \u002B )","title":"Temperature.( \u002B )","content":"Temperature.( \u002B ) \n( \u002B ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-temperature.html#( - )","title":"Temperature.( - )","content":"Temperature.( - ) \n( - ) \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-unitless.html","title":"Unitless","content":"Unitless \n\u003Cp\u003EA special units type representing \u0027no units\u0027. A \u003Ccode\u003EQuantity Int Unitless\u003C/code\u003E\nvalue is interchangeable with a simple \u003Ccode\u003EInt\u003C/code\u003E, and a \u003Ccode\u003EQuantity Float Unitless\u003C/code\u003E\nvalue is interchangeable with a simple \u003Ca href=\u0022https://evelios.github.io/Math.Units/reference/math-units-float.html\u0022 title=\u0022Float\u0022\u003E\u003Ccode\u003EFloat\u003C/code\u003E\u003C/a\u003E.\nA generic number that doesn\u0027t undergo any type mutation.\nEg.\nUnitless: Unitless 1. \u003Cem\u003E Unitless 1. = Unitless 1.\nMeters  : Meters 1. \u003C/em\u003E Meters 1. = (Meters Squared) 1.\u003C/p\u003E\n\n \nUnitless.Unitless \nUnitless"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-unitless.html#Unitless","title":"Unitless.Unitless","content":"Unitless.Unitless \nUnitless \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltage.html","title":"Voltage","content":"Voltage \n \nVoltage.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-voltage.html#Value","title":"Voltage.Value","content":"Voltage.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volts.html","title":"Volts","content":"Volts \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volume.html","title":"Volume","content":"Volume \n \nVolume.Value \nValue"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-volume.html#Value","title":"Volume.Value","content":"Volume.Value \nValue \n"},{"uri":"https://evelios.github.io/Math.Units/reference/math-units-watts.html","title":"Watts","content":"Watts \n"},{"uri":"https://evelios.github.io/Math.Units/quantity.html","title":"Quantity","content":"(**\n\n---\ntitle: Quantity\ncategory: Tutorials\ncategoryindex: 1\nindex: 4\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n#r \u0022../Geometry/bin/Release/net6.0/Geometry.dll\u0022\n\n#r \u0022../Units/bin/Debug/net6.0/Units.dll\u0022\n#r \u0022../Units/bin/Release/net6.0/Units.dll\u0022\n\nopen Geometry\nopen Math.Units\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Operators\n\n| Operator | Lhs       | Rhs       | Return Type | Example          | Function |\n|----------|-----------|-----------|-------------|------------------|----------|\n| -        | Quantity  |           | Quantity    | \u0060-quantity\u0060      | \u0060Quantity.negate\u0060 |\n| \u002B        | Quantity  | Quantity  | Quantity    | \u0060lhs \u002B rhs\u0060      | \u0060Quantity.plus\u0060 |\n| -        | Quantity  | Quantity  | Quantity    | \u0060lhs - rhs\u0060      | \u0060Quantity.difference\u0060 |\n| *        | Quantity  | Quantity  | Quantity    | \u0060lhs * rhs\u0060      | \u0060Quantity.product\u0060 \u0026 \u0060Quantity.times\u0060 |\n| *        | Quantity  | float     | Quantity    | \u0060lhs * 0.5\u0060      | \u0060Quantity.multiplyBy\u0060 |\n| *        | float     | Quantity  | Quantity    | \u00600.5 * rhs\u0060      | \u0060Quantity.multiplyBy\u0060 |\n| /        | Quantity  | Quantity  | float       | \u0060lhs / rhs\u0060      | \u0060Quantity.ratio\u0060 |\n| /        | Quantity  | float     | Quantity    | \u0060lhs / 4.\u0060       | \u0060Quantity.dividedBy\u0060 |\n\n*)\n\n(**\n\n| Operator | Lhs       | Return Type | Example          | Function |\n|----------|-----------|-------------|------------------|----------|\n| abs      | Quantity  | Quantity    | \u0060-length\u0060        | \u0060Quantity.abs\u0060 |\n| min      | Quantity  | Quantity    | \u0060lhs \u002B rhs\u0060      | \u0060Quantity.min\u0060 |\n| max      | Quantity  | Quantity    | \u0060lhs - rhs\u0060      | \u0060Quantity.max\u0060 |\n| sqrt     | Quantity\u003C\u0027Units\u003E  | Quantity\u003C\u0027Units Squared\u003E  | \u0060lhs * 0.5\u0060      | \u0060Quantity.sqrt\u0060 |\n| floor    | Quantity  | Quantity    | \u00600.5 * rhs\u0060      | \u0060Quantity.floor\u0060 |\n| ceil     | Quantity  | Length      | \u0060angle / length\u0060 | \u0060Quantity.ceil\u0060 |\n| round    | Quantity  | Quantity      | \u0060length / angle\u0060 | \u0060Quantity.round\u0060 |\n| truncate | Quantity  | Quantity    | \u0060lhs / 4.\u0060       | \u0060Quantity.truncate\u0060 |\n\n*)"},{"uri":"https://evelios.github.io/Math.Units/index.html","title":"FSharp Geometry Package","content":"(**\n\n---\ntitle: FSharp Geometry Package\n---\n\nThis package is intended to be a port and extension of the framework [elm-geometry](https://package.elm-lang.org/packages/ianmackenzie/elm-geometry/latest/).\nIt focuses on providing as many interfaces for geometric objects an manipulation in a way that is type safe and\nconvenient.\n\nThis framework is currently in alpha development and is currently working on building out 2D development and\nfunctionality first before moving to expand into 3D objects.\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n#r \u0022../Geometry/bin/Release/net6.0/Geometry.dll\u0022\n\n#r \u0022../Units/bin/Debug/net6.0/Units.dll\u0022\n#r \u0022../Units/bin/Release/net6.0/Units.dll\u0022\n\n(** *)\n\n(**\nTo use this framework you include the package through the namespace\n*)\nopen Geometry\nopen Math.Units\n\n(**\nYou can then create a variety of geometric objects like points, vectors, angles, ...\n*)\n\nPoint2D.pixels 100. 200.\n\nVector2D.meters 4. 4.\n\nAngle.degrees 30.\n(**\n\n# Overview\n| Tutorial | Api |\n|----------|-----|\n| [Vector](vector.html) | [2D](reference/geometry-vector2dmodule.html) |\n| [Point](point.html) | [2D](reference/geometry-point2dmodule.html) |\n| [Direction](direction.html) | [2D](reference/geometry-direction2dmodule.html) |\n| [Frame](frame.html) | [2D](reference/geometry-frame2dmodule.html) |\n| [Axes](axes.html) | [2D](reference/geometry-axes2dmodule.html) |\n| [Line Segment](line-segment.html) | [2D](reference/geometry-linesegment2dmodule.html) |\n| [Triangle](triangle.html) | [2D](reference/geometry-triangle2dmodule.html) |\n| [Circle](circle.html) | [2D](reference/geometry-circle2dmodule.html) |\n| [Ellipse](ellipse.html) | [2D](reference/geometry-ellipse2dmodule.html) |\n| [Arc](arc.html) | [2D](reference/geometry-arc2dmodule.html) |\n| [Polyline](polyline.html) | [2D](reference/geometry-polyline2dmodule.html) |\n| [Polygon](polygon.html) | [2D](reference/geometry-polygon2dmodule.html) |\n| [Size ](size.html) | [2D](reference/geometry-size2dmodule.html) |\n| [Bounding Box](bounding-box.html) | [2D](reference/geometry-boundingbox2dmodule.html) |\n\n*)"},{"uri":"https://evelios.github.io/Math.Units/interval.html","title":"Interval","content":"(**\n---\ntitle: Interval\ncategory: Modules\ncategoryindex: 2\nindex: 3\n---\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n#r \u0022../Geometry/bin/Release/net6.0/Geometry.dll\u0022\n\n#r \u0022../Units/bin/Debug/net6.0/Units.dll\u0022\n#r \u0022../Units/bin/Release/net6.0/Units.dll\u0022\n\nopen Geometry\nopen Math.Units\n\n\ntype Cartesian = Cartesian\n(***)"},{"uri":"https://evelios.github.io/Math.Units/length.html","title":"Lengths","content":"(**\n\n---\ntitle: Lengths\ncategory: Modules\ncategoryindex: 2\nindex: 2\n---\n\n[digit precision]: digit-precision.html\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n#r \u0022../Geometry/bin/Release/net6.0/Geometry.dll\u0022\n\n#r \u0022../Units/bin/Debug/net6.0/Units.dll\u0022\n#r \u0022../Units/bin/Release/net6.0/Units.dll\u0022\n\nopen Geometry\nopen Math.Units\n\n\n(***)\n\n(*** hide ***)\ntype Cartesian = Cartesian\n\n(**\n\n# Builders and Accessors (Units)\n\n| Builder                  | Accessor                   | Length                                    |\n|--------------------------|----------------------------|-------------------------------------------|\n| __Metric__               |                            |                                           |\n| Length.angstroms         | Length.inAngstroms         | $$ 1 * 10^{-10} \\, Meters $$              |\n| Length.nanometers        | Length.inNanometers        | $$ 1 * 10^9 \\, Meters $$                  |\n| Length.microns           | Length.inMicrons           | $$ 1 * 10^{-6} \\, Meters $$               |\n| Length.millimeters       | Length.inMillimeters       | $$ 0.001 \\, Meters $$                     |\n| Length.centimeters       | Length.inCentimeters       | $$ 0.01 \\, Meters $$                      |\n| Length.kilometers        | Length.inKilometers        | $$ 1000 \\, Meters $$                      |\n| __Imperial__             |                            |                                           |\n| Length.inch              | Length.inInches            | $$ 0.0254 \\, Meters $$                    |\n| Length.feet              | Length.inFeet              | $$ 12 \\, Inches $$                        |\n| Length.yards             | Length.inYards             | $$ 3 \\, Feet $$                           |\n| Length.thou              | Length.inThou              | $$ 0.001 \\, Inches $$                     |\n| Length.miles             | Length.inMiles             | $$ 5280 \\, Feet $$                        |\n| __Astronomical Units__   |                            |                                           |\n| Length.astronomicalUnits | Length.inAstronomicalUnits | $$ \\approx 1.50 * 10^{11} \\, Meters $$    |\n| Length.lightYears        | Length.inLightYears        | $$ \\approx 9.46 * 10^{15} \\, Meters $$    |\n| Length.parsecs           | Length.inParsecs           | $$ 648000 \\pi \\, Astronomical \\, Units $$ |\n| __Digital__              |                            |                                           |\n| Length.cssPixels         | Length.inCssPixels         | $$ \\frac{1}{96} \\, Inches $$              |\n| Length.points            | Length.inPoints            | $$ \\frac{1}{72} \\, Inches $$              |\n| Length.picas             | Length.inPicas             | $$ \\frac{1}{6} \\, Inches $$               |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example           | Function |\n|----------|--------|--------|-------------|-------------      |----------|\n| -        | Length |        | Length      | \u0060-length\u0060         | \u0060Length2D.neg\u0060 |\n| \u002B        | Length | Length | Length      | \u0060lhs \u002B rhs\u0060       | \u0060Length2D.plus\u0060 |\n| -        | Length | Length | Length      | \u0060lhs - rhs\u0060       | \u0060Length2D.minus\u0060 |\n| *        | Length | float  | Length      | \u0060lhs * 0.5\u0060       | \u0060Length2D.times\u0060 |\n| *        | float  | Length | Length      | \u00600.5 * rhs\u0060       | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n| /        | Length | float  | Length      | \u0060lhs / 4.\u0060        | \u0060Length2D.dividedBy\u0060 |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n*)\n\n(**\n## Examples\n\n*)\n\nlet vec1 : Vector2D\u003CMeters, Cartesian\u003E = Vector2D.meters 10. 20.\n\nlet vec2 : Vector2D\u003CMeters, Cartesian\u003E = Vector2D.meters 30. 40.\n\n(***)\n\n-vec1\n(*** include-it ***)\n\nvec1 \u002B vec2\n(*** include-it ***)\n\nvec1 - vec2\n(*** include-it ***)\n\nvec1 * 2.\n// Or\n2. * vec1\n(*** include-it ***)\n\nvec1 / 2.\n(*** include-it ***)\n\n(**\n# Math\n*)\n\nlet length = Length.meters 10.\n\nLength.squared length\n(*** include-it ***)\n\nlet lengthSquared = Length.meters 3. * Length.meters 12.\n\nLength.sqrt lengthSquared\n(*** include-it ***)\n\nLength.twice length = 2. * length\n\nLength.half length = 0.5 * length\nLength.half length = length / 2.\n\n(** Round to the nearest 10th digit. You can read more about [digit precision] *)\n\nLength.round (Length.meters 0.123456789123456789)\n(*** include-it ***)\n\nLength.roundTo 3 (Length.meters 0.11111)\n(*** include-it ***)\n\nLength.min (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.max (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.sum [ Length.meters 1.; Length.meters 2. ]\n(*** include-it ***)\n\n\n(**\n# Unsafe Operations\n*)\n\n(*** include-it ***)"},{"uri":"https://evelios.github.io/Math.Units/digit-precision.html","title":"Digit Precision","content":"(**\n\n---\ntitle: Digit Precision\ncategory: Tutorials\ncategoryindex: 1\nindex: 1\n---\n\n[floating point equality]: https://floating-point-gui.de/errors/comparison/\n[f# float]: https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0\n\n*)\n(*** hide ***)\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n#r \u0022../Geometry/bin/Release/net6.0/Geometry.dll\u0022\n\n#r \u0022../Units/bin/Debug/net6.0/Units.dll\u0022\n#r \u0022../Units/bin/Release/net6.0/Units.dll\u0022\n\nopen Geometry\nopen Math.Units\n\ntype Cartesian = Cartesian\n\n(**\n# Digit Precision\n\nThis library provides equality operators \u0060lhs = rhs\u0060 for many of the data\nstructures. The savvy among you may have noticed that all the data structures\nare also storing float numbers. Comparing [floating point equality] is no easy\ntask. Due to floating point rounding errors when numbers are being stored, and\nwith many calculations (especially trig functions), the output numbers may be\nslightly different than you would expect.\n\nWe can show this with an example. We would expect the following to be true\n*)\n\n1. = (0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nChecking the returned value from the right hand side we see that we are getting\nthe value \u00601.0\u0060. So what\u0027s going on?\n*)\n\n(0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nWell, with a little investigation, we can see that we aren\u0027t getting exactly\n\u00601.0\u0060. We are getting ever so slightly less than \u00601.0\u0060.\n*)\n\n((0.3 * 3.) \u002B 0.1) - 1.\n(*** include-it ***)\n\n(**\nComparing datastructures that use floating point numbers can sometimes be a sign\nof bad code code design, but this is not always the case. So when you are\nlooking to do equality comparison, this library provides the ability to do\napproximate equality comparison on floating point numbers and data structures\nlike points and vectors.\n*)\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)\n\n(**\nYou can change the precision that floating point operations are performed at. The\ndefault precision is a digit precision of 10. If we were looking a higher level\nof precision, you can change the digit precision to be something more fitting of\nyour needs. In this example, we can make that equality check fail by increasing\nthe precision we are requiring for this operation.\n*)\n\n// Increasing the equality precision to make this check fail\nFloat.DigitPrecision \u003C- 17\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)\n\n(**\n# Examples\n*)\n\nPoint2D.meters 1. 5. = Point2D.meters 1. (5. \u002B 1.e-20)\n(*** include-it ***)"},{"uri":"https://evelios.github.io/Math.Units/angle.html","title":"Angle","content":"(**\n---\ntitle: Angle\ncategory: Modules\ncategoryindex: 2\nindex: 1\n---\n*)\n(*** hide ***)\n\n#r \u0022../Units/bin/Debug/net6.0/Units.dll\u0022\n#r \u0022../Units/bin/Release/net6.0/Units.dll\u0022\n\nopen Math.Units\n\nopen System\n\nopen Math.Units\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Builders\n*)\n\nAngle.degrees 120.\n\nAngle.radians (Math.PI / 3.)\n\n(**\n# Accessors\n*)\n\nAngle.inDegrees Angle.halfPi\n\nAngle.inRadians Angle.halfPi\n\n(**\n# Trigonometry\n*)\n\nAngle.sin Angle.pi\nAngle.cos Angle.pi\nAngle.tan Angle.pi\n\nAngle.asin (1. / 2.)\nAngle.acos (1. / 2.)\nAngle.atan (1. / 2.)\n\n(**\n# Constants\n\n| Function                 | Value               |\n|--------------------------|---------------------|\n| \u0060Angle.zero\u0060             | 0                   |\n| \u0060Angle.pi\u0060               | $ \\pi $             |\n| \u0060Angle.twoPi\u0060            | $ 2 \\pi $           |\n| \u0060Angle.piOverTwo\u0060        | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.halfPi\u0060           | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.radiansToDegrees\u0060 | $ \\frac{180}{\\pi} $ |\n| \u0060Angle.degreesToRadians\u0060 | $ \\frac{\\pi}{180} $ |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example          | Function |\n|----------|--------|--------|-------------|------------------|----------|\n| -        | Angle  |        | Angle       | \u0060-length\u0060        | \u0060Angle.neg\u0060 |\n| \u002B        | Angle  | Angle  | Angle       | \u0060lhs \u002B rhs\u0060      | \u0060Angle.plus\u0060 |\n| -        | Angle  | Angle  | Angle       | \u0060lhs - rhs\u0060      | \u0060Angle.minus\u0060 |\n| *        | Angle  | float  | Angle       | \u0060lhs * 0.5\u0060      | \u0060Angle.times\u0060 |\n| *        | float  | Angle  | Angle       | \u00600.5 * rhs\u0060      | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n| /        | Angle  | float  | Angle       | \u0060lhs / 4.\u0060       | \u0060Angle.dividedBy\u0060 |\n| /        | Angle  | Angle  | float       | \u0060lhs / rhs\u0060      | None |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n*)"}]